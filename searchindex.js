Search.setIndex({"docnames": ["backbone/index", "datasets/index", "generated/backbone", "generated/backbone.EfficientNet", "generated/backbone.MNISTMLP", "generated/backbone.MNISTMLP_PNN", "generated/backbone.ResNet18", "generated/backbone.ResNet18_PNN", "generated/backbone.ResNet50", "generated/backbone.utils", "generated/backbone.utils.modules", "generated/datasets", "generated/datasets.deprecated", "generated/datasets.deprecated.old_mnist_360", "generated/datasets.imagenet_r_utils", "generated/datasets.mnist_360", "generated/datasets.perm_mnist", "generated/datasets.rot_mnist", "generated/datasets.seq_cifar10", "generated/datasets.seq_cifar100", "generated/datasets.seq_cifar100_224", "generated/datasets.seq_cifar100_224_rs", "generated/datasets.seq_cub200", "generated/datasets.seq_imagenet_r", "generated/datasets.seq_mnist", "generated/datasets.seq_tinyimagenet", "generated/datasets.seq_tinyimagenet_r", "generated/datasets.transforms", "generated/datasets.transforms.denormalization", "generated/datasets.transforms.permutation", "generated/datasets.transforms.rotation", "generated/datasets.utils", "generated/datasets.utils.continual_dataset", "generated/datasets.utils.gcl_dataset", "generated/datasets.utils.validation", "generated/models", "generated/models.agem", "generated/models.agem_r", "generated/models.bic", "generated/models.ccic", "generated/models.coda_prompt", "generated/models.coda_prompt_utils", "generated/models.coda_prompt_utils.model", "generated/models.coda_prompt_utils.vit", "generated/models.deprecated", "generated/models.deprecated.joint", "generated/models.der", "generated/models.derpp", "generated/models.derpp_lider", "generated/models.dualprompt", "generated/models.dualprompt_utils", "generated/models.dualprompt_utils.attention", "generated/models.dualprompt_utils.model", "generated/models.dualprompt_utils.prompt", "generated/models.dualprompt_utils.vision_transformer", "generated/models.er", "generated/models.er_ace", "generated/models.er_ace_lider", "generated/models.ewc_on", "generated/models.fdr", "generated/models.gdumb", "generated/models.gdumb_lider", "generated/models.gem", "generated/models.gss", "generated/models.hal", "generated/models.icarl", "generated/models.icarl_lider", "generated/models.joint_gcl", "generated/models.l2p", "generated/models.l2p_utils", "generated/models.l2p_utils.l2p_model", "generated/models.l2p_utils.prompt", "generated/models.l2p_utils.vit_prompt", "generated/models.lucir", "generated/models.lwf", "generated/models.lwf_mc", "generated/models.mer", "generated/models.pnn", "generated/models.rpc", "generated/models.sgd", "generated/models.si", "generated/models.slca_utils", "generated/models.slca_utils.convs", "generated/models.slca_utils.convs.cifar_resnet", "generated/models.slca_utils.convs.linears", "generated/models.slca_utils.convs.resnet", "generated/models.slca_utils.convs.vits", "generated/models.slca_utils.inc_net", "generated/models.slca_utils.toolkit", "generated/models.twf", "generated/models.twf_utils", "generated/models.twf_utils.afd", "generated/models.twf_utils.utils", "generated/models.utils", "generated/models.utils.continual_model", "generated/models.utils.lider_model", "generated/models.xder", "generated/models.xder_ce", "generated/models.xder_rpc", "generated/utils", "generated/utils.args", "generated/utils.augmentations", "generated/utils.batch_norm", "generated/utils.best_args", "generated/utils.buffer", "generated/utils.checkpoints", "generated/utils.conditional_bn", "generated/utils.conf", "generated/utils.distributed", "generated/utils.gss_buffer", "generated/utils.kornia_utils", "generated/utils.loggers", "generated/utils.magic", "generated/utils.main", "generated/utils.metrics", "generated/utils.mixup", "generated/utils.prompt_templates", "generated/utils.ring_buffer", "generated/utils.schedulers", "generated/utils.simclrloss", "generated/utils.status", "generated/utils.training", "generated/utils.triplet", "getting_started/checkpoints", "getting_started/distributed_training", "getting_started/index", "getting_started/parseval", "getting_started/scripts", "index", "models/index", "readme", "utils/args", "utils/index"], "filenames": ["backbone/index.rst", "datasets/index.rst", "generated/backbone.rst", "generated/backbone.EfficientNet.rst", "generated/backbone.MNISTMLP.rst", "generated/backbone.MNISTMLP_PNN.rst", "generated/backbone.ResNet18.rst", "generated/backbone.ResNet18_PNN.rst", "generated/backbone.ResNet50.rst", "generated/backbone.utils.rst", "generated/backbone.utils.modules.rst", "generated/datasets.rst", "generated/datasets.deprecated.rst", "generated/datasets.deprecated.old_mnist_360.rst", "generated/datasets.imagenet_r_utils.rst", "generated/datasets.mnist_360.rst", "generated/datasets.perm_mnist.rst", "generated/datasets.rot_mnist.rst", "generated/datasets.seq_cifar10.rst", "generated/datasets.seq_cifar100.rst", "generated/datasets.seq_cifar100_224.rst", "generated/datasets.seq_cifar100_224_rs.rst", "generated/datasets.seq_cub200.rst", "generated/datasets.seq_imagenet_r.rst", "generated/datasets.seq_mnist.rst", "generated/datasets.seq_tinyimagenet.rst", "generated/datasets.seq_tinyimagenet_r.rst", "generated/datasets.transforms.rst", "generated/datasets.transforms.denormalization.rst", "generated/datasets.transforms.permutation.rst", "generated/datasets.transforms.rotation.rst", "generated/datasets.utils.rst", "generated/datasets.utils.continual_dataset.rst", "generated/datasets.utils.gcl_dataset.rst", "generated/datasets.utils.validation.rst", "generated/models.rst", "generated/models.agem.rst", "generated/models.agem_r.rst", "generated/models.bic.rst", "generated/models.ccic.rst", "generated/models.coda_prompt.rst", "generated/models.coda_prompt_utils.rst", "generated/models.coda_prompt_utils.model.rst", "generated/models.coda_prompt_utils.vit.rst", "generated/models.deprecated.rst", "generated/models.deprecated.joint.rst", "generated/models.der.rst", "generated/models.derpp.rst", "generated/models.derpp_lider.rst", "generated/models.dualprompt.rst", "generated/models.dualprompt_utils.rst", "generated/models.dualprompt_utils.attention.rst", "generated/models.dualprompt_utils.model.rst", "generated/models.dualprompt_utils.prompt.rst", "generated/models.dualprompt_utils.vision_transformer.rst", "generated/models.er.rst", "generated/models.er_ace.rst", "generated/models.er_ace_lider.rst", "generated/models.ewc_on.rst", "generated/models.fdr.rst", "generated/models.gdumb.rst", "generated/models.gdumb_lider.rst", "generated/models.gem.rst", "generated/models.gss.rst", "generated/models.hal.rst", "generated/models.icarl.rst", "generated/models.icarl_lider.rst", "generated/models.joint_gcl.rst", "generated/models.l2p.rst", "generated/models.l2p_utils.rst", "generated/models.l2p_utils.l2p_model.rst", "generated/models.l2p_utils.prompt.rst", "generated/models.l2p_utils.vit_prompt.rst", "generated/models.lucir.rst", "generated/models.lwf.rst", "generated/models.lwf_mc.rst", "generated/models.mer.rst", "generated/models.pnn.rst", "generated/models.rpc.rst", "generated/models.sgd.rst", "generated/models.si.rst", "generated/models.slca_utils.rst", "generated/models.slca_utils.convs.rst", "generated/models.slca_utils.convs.cifar_resnet.rst", "generated/models.slca_utils.convs.linears.rst", "generated/models.slca_utils.convs.resnet.rst", "generated/models.slca_utils.convs.vits.rst", "generated/models.slca_utils.inc_net.rst", "generated/models.slca_utils.toolkit.rst", "generated/models.twf.rst", "generated/models.twf_utils.rst", "generated/models.twf_utils.afd.rst", "generated/models.twf_utils.utils.rst", "generated/models.utils.rst", "generated/models.utils.continual_model.rst", "generated/models.utils.lider_model.rst", "generated/models.xder.rst", "generated/models.xder_ce.rst", "generated/models.xder_rpc.rst", "generated/utils.rst", "generated/utils.args.rst", "generated/utils.augmentations.rst", "generated/utils.batch_norm.rst", "generated/utils.best_args.rst", "generated/utils.buffer.rst", "generated/utils.checkpoints.rst", "generated/utils.conditional_bn.rst", "generated/utils.conf.rst", "generated/utils.distributed.rst", "generated/utils.gss_buffer.rst", "generated/utils.kornia_utils.rst", "generated/utils.loggers.rst", "generated/utils.magic.rst", "generated/utils.main.rst", "generated/utils.metrics.rst", "generated/utils.mixup.rst", "generated/utils.prompt_templates.rst", "generated/utils.ring_buffer.rst", "generated/utils.schedulers.rst", "generated/utils.simclrloss.rst", "generated/utils.status.rst", "generated/utils.training.rst", "generated/utils.triplet.rst", "getting_started/checkpoints.rst", "getting_started/distributed_training.rst", "getting_started/index.rst", "getting_started/parseval.rst", "getting_started/scripts.rst", "index.rst", "models/index.rst", "readme.rst", "utils/args.rst", "utils/index.rst"], "titles": ["Backbones", "Datasets", "Backbones", "EfficientNet", "MNISTMLP", "MNISTMLP_PNN", "ResNet18", "ResNet18_PNN", "ResNet50", "Utils", "modules", "Datasets", "Deprecated", "old_mnist_360", "Imagenet_r_utils", "mnist_360", "perm_mnist", "rot_mnist", "seq_cifar10", "seq_cifar100", "seq_cifar100_224", "seq_cifar100_224_rs", "seq_cub200", "seq_imagenet_r", "seq_mnist", "seq_tinyimagenet", "seq_tinyimagenet_r", "Transforms", "denormalization", "permutation", "rotation", "Utils", "continual_dataset", "gcl_dataset", "validation", "Models", "agem", "agem_r", "bic", "ccic", "coda_prompt", "Coda_prompt_utils", "model", "vit", "Deprecated", "joint", "der", "derpp", "derpp_lider", "dualprompt", "Dualprompt_utils", "attention", "model", "prompt", "vision_transformer", "er", "er_ace", "er_ace_lider", "ewc_on", "fdr", "gdumb", "gdumb_lider", "gem", "gss", "hal", "icarl", "icarl_lider", "joint_gcl", "l2p", "L2p_utils", "l2p_model", "prompt", "vit_prompt", "lucir", "lwf", "lwf_mc", "mer", "pnn", "rpc", "sgd", "si", "Slca_utils", "Convs", "cifar_resnet", "linears", "resnet", "vits", "inc_net", "toolkit", "twf", "Twf_utils", "afd", "utils", "Utils", "continual_model", "lider_model", "xder", "xder_ce", "xder_rpc", "Utils", "Arguments", "augmentations", "batch_norm", "best_args", "buffer", "checkpoints", "conditional_bn", "conf", "distributed", "gss_buffer", "kornia_utils", "loggers", "magic", "main", "metrics", "mixup", "prompt_templates", "ring_buffer", "schedulers", "simclrloss", "status", "training", "triplet", "Load and save checkpoints", "Distributed training", "First steps", "Mammoth parseval", "Scripts", "Welcome to Mammoth\u2019s documentation!", "Models", "Welcome to Mammoth\u2019s documentation!", "Arguments", "Utils"], "terms": {"constitut": [0, 2], "underli": [0, 2], "architectur": [0, 2, 6, 7], "network": [0, 2, 3, 4, 5, 6, 7, 43, 65, 66, 73, 75, 85, 95, 99, 104, 109, 117, 128, 130, 132], "thei": [0, 2, 94, 99, 104, 108, 132], "ar": [0, 1, 2, 11, 32, 35, 94, 95, 99, 103, 104, 108, 111, 119, 123, 124, 125, 127, 128, 129, 130, 132], "respons": [0, 2, 35, 94, 99, 121, 129, 132], "extract": [0, 2, 3, 34], "from": [0, 1, 2, 3, 8, 11, 15, 19, 35, 43, 45, 54, 55, 72, 85, 86, 95, 100, 104, 105, 107, 108, 109, 110, 111, 114, 117, 123, 125, 128, 129, 130, 131], "input": [0, 1, 2, 3, 4, 5, 6, 7, 11, 15, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 95, 96, 97, 98, 101, 106, 110, 115, 129], "onc": [0, 2, 35, 99, 107, 129, 132], "load": [0, 2, 3, 11, 35, 94, 99, 100, 105, 107, 111, 129, 131, 132], "model": [0, 1, 2, 3, 8, 11, 19, 32, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 108, 109, 113, 119, 121, 123, 124, 125, 131, 132], "i": [0, 1, 2, 3, 11, 15, 32, 33, 35, 40, 43, 45, 49, 54, 62, 68, 72, 73, 79, 85, 86, 94, 99, 100, 101, 104, 106, 107, 108, 109, 113, 115, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132], "access": [0, 2, 35, 108, 112, 129], "self": [0, 2, 32, 35, 60, 61, 104, 128, 129, 130], "net": [0, 2, 35, 104, 129], "attribut": [0, 1, 104, 108], "The": [0, 1, 2, 3, 6, 7, 11, 15, 17, 20, 21, 24, 25, 26, 32, 35, 40, 45, 49, 68, 72, 85, 86, 94, 95, 99, 100, 101, 103, 104, 106, 108, 109, 110, 111, 113, 114, 115, 117, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132], "specif": [0, 2, 35, 94, 99, 100, 106, 109, 115, 129, 131, 132], "choic": [0, 2, 100, 131], "depend": [0, 2, 104], "benchmark": [0, 1, 2, 11, 111], "e": [0, 1, 2, 11, 35, 79, 85, 99, 101, 108, 111, 125, 129, 132], "dataset": [0, 2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 45, 48, 49, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 73, 74, 75, 77, 78, 80, 83, 89, 92, 94, 95, 96, 97, 98, 99, 100, 103, 104, 107, 113, 121, 123, 125, 131, 132], "see": [0, 1, 2, 11, 35, 45, 99, 108, 122, 123, 125, 127, 129, 132], "which": [0, 1, 2, 11, 32, 35, 85, 99, 100, 104, 108, 127, 129, 131, 132], "defin": [0, 1, 2, 3, 11, 25, 29, 30, 32, 35, 94, 123, 129], "get_backbon": [0, 1, 2, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 77], "method": [0, 2, 3, 18, 94, 95, 99, 100, 104, 108, 109, 110, 117, 128, 130, 132], "mai": [0, 2, 35, 119, 125, 129], "exploit": [0, 2], "differ": [0, 2, 16, 35, 123, 129], "level": [0, 2, 3], "For": [0, 1, 2, 11, 35, 45, 99, 101, 122, 125, 129, 132], "exampl": [0, 1, 2, 3, 11, 13, 15, 35, 55, 94, 99, 100, 101, 104, 108, 109, 117, 129, 131, 132], "der": [0, 2, 35, 99, 100, 101, 128, 129, 130, 131, 132], "us": [0, 1, 2, 3, 11, 31, 32, 35, 40, 43, 45, 49, 55, 62, 68, 79, 94, 95, 100, 101, 104, 107, 108, 113, 115, 117, 121, 123, 124, 125, 127, 129, 131], "soft": [0, 2, 122], "target": [0, 2, 34, 88, 89, 91, 95, 99, 104, 132], "produc": [0, 2, 127], "after": [0, 2, 3, 35, 94, 95, 99, 108, 112, 124, 129, 132], "classif": [0, 2, 3], "layer": [0, 2, 3, 4, 5, 6, 8, 54, 62, 72, 85, 86, 95, 106], "while": [0, 1, 2, 11, 35, 129], "icarl": [0, 2, 100, 128, 130, 131], "befor": [0, 1, 2, 11, 35, 39, 94, 99, 100, 108, 129, 131, 132], "comput": [0, 1, 2, 4, 5, 6, 7, 11, 32, 35, 39, 65, 66, 73, 75, 94, 95, 100, 106, 110, 119, 122, 129, 131], "mean": [0, 1, 2, 3, 11, 18, 19, 20, 21, 22, 23, 25, 26, 28, 39, 53, 65, 66, 71, 101, 111, 114, 119], "In": [0, 1, 2, 11, 35, 123, 128, 129, 130], "order": [0, 2, 95, 123, 125, 127], "allow": [0, 1, 2, 11, 112, 123, 125], "thi": [0, 1, 2, 3, 11, 14, 31, 35, 41, 44, 45, 50, 55, 62, 69, 79, 86, 94, 99, 100, 101, 103, 107, 108, 109, 111, 113, 117, 123, 124, 125, 127, 128, 129, 130, 131, 132], "flexibl": [0, 2], "all": [0, 2, 31, 32, 35, 45, 94, 95, 99, 100, 104, 107, 109, 111, 114, 115, 117, 119, 121, 123, 124, 125, 127, 128, 129, 130, 132], "must": [0, 1, 2, 11, 35, 129], "accept": [0, 2, 101, 127], "returnt": [0, 2, 3, 4, 5, 6, 7, 8], "argument": [0, 1, 2, 11, 15, 32, 35, 55, 107, 110, 111, 113, 121, 123, 124, 125, 127, 128, 129, 130], "specifi": [0, 2, 3, 83, 99, 104, 106, 132], "possibl": [0, 2, 35, 108, 127, 129], "valu": [0, 1, 2, 11, 35, 65, 73, 75, 94, 99, 101, 107, 111, 114, 120, 125, 127, 129, 132], "out": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 72, 86, 104, 111, 120, 127, 128, 130], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 32, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 85, 89, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 129, 132], "immedi": [0, 2], "both": [0, 1, 2, 6, 11, 108, 119, 123, 125], "tupl": [0, 1, 2, 3, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 101, 104, 106, 109, 110, 115, 117, 121], "addit": [0, 2, 35, 94, 100, 128, 129, 130, 131], "some": [0, 1, 2, 11, 72, 86, 94, 99, 132], "requir": [0, 2, 35, 55, 94, 99, 104, 109, 117, 125, 128, 129, 130, 132], "output": [0, 2, 3, 4, 5, 6, 7, 35, 62, 66, 95, 101, 104, 106, 109, 117, 121, 127, 129], "g": [0, 1, 2, 11, 35, 85, 99, 101, 108, 111, 125, 129, 132], "twf": [0, 2, 35, 90, 100, 128, 129, 130, 131], "case": [0, 1, 2, 11, 35, 99, 123, 129, 132], "can": [0, 1, 2, 11, 35, 94, 99, 119, 123, 125, 127, 128, 129, 130, 132], "set": [0, 2, 3, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 32, 33, 34, 35, 99, 100, 104, 107, 108, 109, 111, 113, 117, 121, 123, 125, 127, 128, 129, 130, 131, 132], "full": [0, 2, 6, 99, 132], "list": [0, 1, 2, 3, 11, 12, 14, 15, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 95, 96, 97, 98, 99, 101, 104, 108, 110, 114, 115, 121, 129, 132], "tensor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 35, 36, 65, 66, 73, 75, 94, 95, 101, 104, 106, 109, 110, 115, 117, 121, 122, 129], "other": [0, 2, 3, 101, 104, 111, 113, 121, 123, 125], "support": [0, 1, 2, 11, 35, 86, 94, 99, 104, 108, 119, 123, 124, 129, 132], "guarante": [0, 2], "work": [0, 2, 125], "should": [0, 1, 2, 11, 99, 101, 123, 127, 132], "inherit": [0, 1, 2, 11, 110], "mammothbackbon": [0, 2, 3, 4, 5, 6, 8], "below": [0, 2, 35, 127, 129], "provid": [0, 1, 2, 11, 15, 35, 55, 79, 94, 101, 104, 125, 129], "strict": [0, 2], "strongli": [0, 2], "recommend": [0, 2], "compat": [0, 1, 2, 11, 33, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 129], "exist": [0, 2, 99], "follow": [0, 1, 2, 11, 35, 99, 103, 113, 123, 125, 127, 128, 129, 130, 132], "equival": [0, 2], "call": [0, 2, 3, 4, 5, 35, 94, 99, 104, 107, 108, 112, 113, 129, 132], "x": [0, 2, 3, 4, 5, 6, 7, 8, 10, 30, 35, 38, 39, 40, 42, 43, 49, 51, 52, 53, 54, 62, 65, 66, 68, 70, 71, 72, 73, 77, 78, 83, 84, 85, 86, 87, 88, 91, 94, 98, 101, 106, 109, 128, 129, 130], "get_grad": [0, 2, 63], "gradient": [0, 2, 62, 95, 106, 110, 124, 128, 130], "respect": [0, 1, 2, 11, 35, 94, 99, 127, 129, 132], "loss": [0, 1, 2, 11, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 95, 96, 97, 98, 99, 119, 120, 122, 125, 129, 132], "concaten": [0, 2], "singl": [0, 1, 2, 11, 13, 15, 99, 100, 115, 125, 131, 132], "set_grad": [0, 2], "get_param": [0, 2], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 30, 32, 34, 41, 50, 62, 65, 66, 69, 73, 75, 94, 95, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 117, 120, 121, 122, 123, 124, 127, 128, 130, 132], "set_param": [0, 2], "mammoth": [1, 11, 100, 113, 123, 124, 125, 127, 131], "complet": [1, 11, 15, 99], "separ": [1, 11, 122, 123, 125], "continu": [1, 11, 13, 15, 32, 33, 35, 37, 40, 45, 46, 47, 48, 49, 55, 59, 63, 67, 68, 76, 79, 94, 121, 123, 129], "learn": [1, 8, 11, 15, 32, 33, 35, 49, 68, 79, 83, 85, 94, 99, 100, 119, 129, 131, 132], "each": [1, 2, 3, 4, 5, 11, 15, 16, 35, 39, 62, 65, 66, 94, 95, 99, 100, 101, 115, 121, 122, 123, 124, 125, 127, 129, 131, 132], "static": [1, 3, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 106, 129], "necessari": [1, 3, 11, 113, 123, 128, 130], "inform": [1, 11, 123, 125, 128, 130], "run": [1, 3, 11, 95, 100, 113, 123, 125, 127, 128, 130, 131], "includ": [1, 11, 31, 35, 55, 81, 86, 99, 121, 125, 127, 128, 129, 130, 132], "name": [1, 3, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 99, 100, 108, 110, 123, 127, 129, 131, 132], "str": [1, 3, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 99, 100, 104, 110, 111, 120, 131], "increment": [1, 11, 15, 30, 35, 45, 79, 83, 84, 88, 128, 129, 130], "gener": [1, 11, 13, 15, 33, 35, 37, 45, 46, 47, 48, 55, 59, 63, 67, 68, 76, 79, 99, 101, 115, 127, 129, 132], "more": [1, 11, 35, 39, 103, 108, 115, 125, 129], "section": [1, 11], "size": [1, 3, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 35, 89, 99, 100, 101, 104, 109, 110, 117, 123, 129, 131, 132], "data": [1, 3, 11, 15, 19, 20, 21, 22, 34, 35, 45, 55, 72, 79, 86, 94, 99, 100, 101, 104, 107, 108, 109, 111, 117, 125, 127, 128, 129, 130, 131, 132], "int": [1, 2, 3, 6, 7, 8, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 32, 33, 35, 65, 66, 73, 75, 95, 100, 101, 104, 107, 108, 109, 110, 111, 117, 120, 121, 129, 131], "number": [1, 2, 3, 6, 7, 11, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 32, 35, 39, 62, 85, 94, 95, 99, 100, 101, 104, 108, 109, 110, 111, 117, 120, 121, 122, 123, 127, 129, 131, 132], "per": [1, 11, 17, 18, 19, 20, 21, 22, 24, 25, 26, 32, 62, 94, 99, 100, 104, 131, 132], "n_classes_per_task": [1, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33], "integ": [1, 11, 30, 35, 94, 129], "one": [1, 11, 35, 45, 94, 107, 115, 121, 123, 124, 129], "onli": [1, 11, 35, 95, 99, 100, 104, 107, 121, 122, 124, 128, 129, 130, 131, 132], "get_epoch": [1, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33], "epoch": [1, 11, 32, 33, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 99, 100, 111, 120, 123, 129, 131, 132], "option": [1, 3, 11, 35, 45, 100, 101, 104, 106, 110, 111, 115, 123, 125, 129, 131], "get_batch_s": [1, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32], "batch": [1, 2, 11, 13, 15, 32, 35, 55, 94, 95, 99, 100, 101, 104, 106, 109, 110, 117, 122, 124, 128, 129, 130, 131, 132], "get_data_load": [1, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32], "dataload": [1, 11, 15, 16, 18, 19, 20, 21, 22, 24, 25, 32, 100, 107, 131], "train": [1, 3, 8, 11, 13, 14, 15, 16, 18, 19, 22, 23, 24, 25, 32, 34, 42, 43, 45, 52, 54, 55, 72, 79, 85, 86, 94, 99, 100, 108, 113, 123, 128, 130, 131, 132], "test": [1, 11, 13, 14, 15, 18, 20, 21, 22, 32, 34, 127], "loader": [1, 11, 13, 15, 18, 32, 99, 132], "nn": [1, 2, 11, 15, 35, 43, 54, 72, 86], "modul": [1, 3, 6, 8, 13, 15, 19, 32, 34, 42, 43, 44, 45, 51, 52, 53, 54, 55, 70, 71, 72, 73, 79, 83, 84, 85, 86, 87, 91, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 117, 119, 121, 123, 124, 129], "backbon": [1, 3, 4, 5, 6, 7, 8, 10, 11, 21, 32, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 89, 94, 95, 96, 97, 98, 123], "folder": [1, 11, 35, 99, 123, 127, 128, 129, 130, 132], "get_transform": [1, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32], "callabl": [1, 11, 15], "augment": [1, 11, 13, 15, 55, 72, 86, 94, 104, 109, 110, 115, 117], "transform": [1, 11, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 89, 94, 95, 96, 97, 98, 101, 104, 109, 110, 117], "appli": [1, 2, 3, 11, 15, 18, 19, 20, 21, 22, 25, 35, 100, 101, 104, 106, 109, 110, 115, 117, 129, 131], "dure": [1, 11, 35, 45, 55, 123, 129], "get_loss": [1, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 65, 66, 73, 75], "function": [1, 3, 4, 5, 6, 7, 8, 14, 15, 16, 18, 19, 22, 23, 24, 25, 31, 32, 34, 36, 41, 42, 45, 50, 54, 60, 61, 62, 69, 72, 73, 74, 75, 77, 78, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132], "get_normalization_transform": [1, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32], "normal": [1, 11, 18, 19, 20, 21, 22, 23, 25, 26, 32, 35, 43, 53, 54, 71, 72, 86, 91, 101, 106, 128, 129, 130], "torch": [1, 3, 11, 15, 19, 35, 43, 54, 66, 72, 86, 95, 101, 106, 110, 115, 122, 129], "totensor": [1, 11, 18, 19, 20, 21, 22, 23, 25, 26], "get_denormalization_transform": [1, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32], "revert": [1, 11], "you": [1, 3, 11, 35, 108, 125, 127, 128, 129, 130], "denorm": [1, 11, 32], "py": [1, 3, 11, 19, 35, 83, 84, 85, 99, 109, 117, 119, 124, 125, 127, 128, 129, 130, 132], "continual_dataset": [1, 11], "detail": [1, 11, 35, 108, 122, 129], "sequentialcifar10": [1, 11, 18], "seq_cifar10": [1, 11], "an": [1, 3, 11, 15, 30, 35, 43, 54, 55, 72, 86, 94, 101, 123, 129], "download": [1, 3, 8, 11, 16, 18, 19, 22, 23, 24, 25, 85, 99, 128, 130, 132], "default": [1, 11, 35, 94, 99, 100, 101, 107, 110, 111, 125, 127, 129, 131, 132], "chang": [1, 11, 13, 15, 16, 18, 19, 22, 23, 24, 25, 125, 128, 130], "locat": [1, 11], "base_path": [1, 11, 99, 100, 107, 125, 128, 130, 131, 132], "conf": [1, 11, 99, 125, 128, 130, 132], "extend": [1, 11, 35, 129], "notat": [1, 3, 11], "three": [1, 11], "scenario": [1, 11, 45], "avail": [1, 11, 35, 72, 86, 99, 107, 123, 124, 125, 129, 132], "total": [1, 2, 11, 35, 108, 121, 129], "increas": [1, 11], "metric": [1, 11, 100, 111, 123, 125, 131], "mask": [1, 11, 104, 111, 119, 121], "correct": [1, 11, 62, 128, 130], "sampl": [1, 11, 35, 37, 101, 104, 109, 115, 117, 119, 128, 129, 130], "infer": [1, 11, 100, 131], "without": [1, 11, 15, 94, 110, 128, 130], "have": [1, 3, 11, 35, 101, 125, 129], "twice": [1, 11, 85], "fix": [1, 11, 29, 30, 54, 72, 86], "distribut": [1, 11, 100, 110, 115, 123, 131], "gradual": [1, 11], "over": [1, 11, 94, 99, 122, 132], "time": [1, 11, 127], "notion": [1, 11], "boundari": [1, 11], "ignor": [1, 11, 105, 128, 130], "long": [1, 11], "cssl": [1, 11, 35, 39, 129], "same": [1, 2, 3, 11, 35, 85, 101, 119, 123, 129], "label": [1, 11, 13, 15, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 99, 100, 101, 104, 109, 117, 119, 122, 129, 131, 132], "miss": [1, 11, 128, 130], "due": [1, 11, 124], "limit": [1, 11, 100, 127, 131], "supervis": [1, 11, 119, 128, 130], "simul": [1, 11], "where": [1, 11, 15, 99, 100, 107, 115, 131, 132], "percentag": [1, 11, 34, 99, 100, 131, 132], "label_perc": [1, 11, 35, 99, 100, 129, 131, 132], "0": [1, 3, 11, 18, 19, 20, 21, 22, 23, 25, 26, 30, 34, 35, 40, 43, 51, 54, 62, 72, 86, 91, 99, 100, 101, 104, 108, 119, 122, 123, 127, 128, 129, 130, 131, 132], "5": [1, 3, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 53, 62, 71, 101, 129], "50": [1, 8, 11, 85, 99, 132], "remain": [1, 11, 15, 35, 94, 129], "1": [1, 3, 6, 7, 8, 11, 20, 23, 34, 35, 43, 45, 53, 54, 72, 83, 85, 86, 91, 94, 96, 97, 98, 99, 100, 101, 104, 117, 119, 122, 127, 129, 131, 132], "current": [1, 11, 13, 15, 32, 35, 55, 79, 94, 99, 104, 108, 111, 120, 121, 123, 129, 132], "doe": [1, 11, 35, 45, 99, 101, 129], "partial": [1, 11], "check": [1, 11, 35, 72, 86, 128, 129, 130], "special": [1, 11], "compar": [1, 11], "perform": [1, 11, 35, 99, 100, 101, 110, 113, 124, 129, 131, 132], "what": [1, 11], "usual": [1, 11, 99, 132], "consid": [1, 11, 122], "upper": [1, 11, 99, 132], "bound": [1, 11, 99, 101, 132], "To": [1, 11, 35, 99, 113, 123, 124, 125, 129, 132], "simpli": [1, 11, 45, 99, 123, 124, 125, 132], "automat": [1, 11, 94, 99, 108, 123, 124, 128, 130, 132], "continualdataset": [1, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 95, 104, 121], "except": [1, 2, 11, 35, 85, 99, 123, 132], "gcldataset": [1, 11, 13, 15, 33], "gcl_dataset": [1, 11], "These": [1, 11, 35, 129], "store": [1, 11, 32, 62, 99, 104, 107, 112, 127, 132], "file": [1, 3, 11, 35, 99, 100, 120, 123, 125, 127, 129, 131, 132], "my_dataset": [1, 11], "implement": [1, 11, 35, 41, 45, 50, 54, 55, 69, 72, 79, 81, 86, 108, 129], "conveni": [1, 11], "most": [1, 3, 11, 35, 94, 99, 125, 128, 129, 130, 132], "initi": [1, 2, 4, 5, 11, 13, 15, 35, 39, 54, 72, 94, 95, 104, 105, 109, 113, 117, 121, 123, 129], "appropri": [1, 11, 35, 99, 132], "store_masked_load": [1, 11, 32], "first": [1, 2, 11, 95, 101, 104, 127], "inizi": [1, 11], "mycifar10": [1, 11, 18], "tcifar10": [1, 11, 18], "non": [1, 11, 100, 131], "done": [1, 11], "storag": [1, 11], "raw": [1, 11, 35, 94, 125, 129], "replai": [1, 11, 55, 99, 104, 128, 130, 132], "base": [1, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 123, 128, 129, 130, 131, 132], "rethink": [1, 11, 128, 130], "bag": [1, 11, 128, 130], "trick": [1, 11, 128, 130], "signatur": [1, 11, 35, 129], "augmented_data": [1, 11], "non_augmented_data": [1, 11], "If": [1, 8, 11, 35, 85, 95, 99, 101, 104, 115, 119, 120, 122, 123, 125, 128, 129, 130, 132], "goe": [1, 11], "well": [1, 11, 14], "your": [1, 11, 72, 86, 127, 128, 130], "pick": [1, 11], "up": [1, 11, 94, 108, 113, 121, 123], "get_dataset": [1, 11], "abl": [1, 11], "take": [1, 11, 35, 94, 104, 123, 129], "care": [1, 11, 94, 123], "make": [1, 11, 100, 131], "sure": [1, 11], "contain": [1, 2, 4, 5, 11, 14, 15, 16, 31, 32, 35, 41, 44, 45, 50, 69, 99, 101, 103, 104, 107, 109, 111, 113, 115, 117, 121, 122, 123, 125, 127, 129, 132], "It": [1, 3, 11, 14, 35, 55, 94, 99, 113, 119, 121, 127, 128, 129, 130, 132], "permute_class": [1, 11, 99, 100, 131, 132], "flag": [1, 11, 15, 106], "also": [1, 11, 35, 55, 99, 119, 129, 132], "permut": [1, 11, 16, 99, 100, 128, 130, 131, 132], "split": [1, 11, 99, 100, 104, 124, 131, 132], "between": [1, 3, 11, 35, 125, 129], "randomli": [1, 11, 99, 101, 110, 132], "kwarg": [2, 3, 6, 8, 54, 72, 85, 86, 91, 94, 106, 110], "sourc": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122], "A": [2, 3, 15, 32, 33, 35, 37, 40, 43, 49, 54, 68, 72, 86, 101, 106, 108, 110, 111, 112, 114, 115, 119, 128, 129, 130], "keyword": [2, 110], "forward": [2, 3, 4, 5, 6, 7, 8, 10, 35, 38, 39, 40, 42, 43, 49, 51, 52, 53, 54, 65, 66, 68, 70, 71, 72, 73, 77, 78, 83, 84, 85, 86, 87, 91, 94, 98, 100, 106, 110, 111, 114, 119, 124, 129, 131], "pass": [2, 4, 5, 6, 7, 35, 94, 106, 124, 129], "type": [2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 85, 89, 94, 95, 96, 97, 98, 100, 101, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 121, 122, 129], "get": [2, 3, 15, 122, 128, 130], "given": [2, 3, 29, 30, 53, 62, 71, 94, 95, 101, 104, 105, 111, 115, 121], "get_grads_list": 2, "batch_siz": [2, 4, 5, 6, 7, 89, 99, 100, 101, 122, 131, 132], "input_shap": [2, 6, 7], "string": [2, 3, 6, 35, 99, 129], "among": [2, 6, 11, 35], "new_param": 2, "num_flat_featur": 2, "item": [2, 15, 35, 104, 109, 117, 129], "dimens": [2, 101], "second": [2, 101], "onward": 2, "xavier": [2, 4, 5], "m": [2, 123, 128, 130], "linear": [2, 3, 54, 72, 86], "sequenti": [2, 18, 19, 20, 21, 22, 24, 25, 26, 110, 127, 128, 130], "10": [2, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 42, 78, 83, 88, 95, 98, 99, 109, 117, 128, 130, 132], "relu": [2, 4, 5, 91], "class": [3, 4, 5, 6, 7, 8, 10, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 114, 117, 118, 119, 120, 121, 125, 128, 129, 130, 131, 132], "blockdecod": 3, "object": [3, 15, 28, 29, 30, 32, 35, 45, 55, 101, 102, 104, 107, 109, 110, 111, 112, 113, 117, 120, 129], "block": [3, 6, 7, 8, 43, 54, 72, 83, 85, 86, 108], "decod": 3, "readabl": 3, "straight": 3, "offici": [3, 72, 86, 128, 130], "tensorflow": [3, 72, 86], "repositori": [3, 128, 130], "string_list": 3, "insid": [3, 123], "blockarg": 3, "namedtupl": 3, "arg": [3, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 80, 89, 91, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 110, 111, 113, 121, 123, 129, 131, 132], "blocks_arg": 3, "encod": 3, "block_str": 3, "conv2ddynamicsamepad": 3, "in_channel": 3, "out_channel": 3, "kernel_s": 3, "stride": [3, 6, 7, 8, 83, 85], "dilat": [3, 8, 85], "group": [3, 8, 85], "bia": [3, 6, 128, 130], "true": [3, 6, 8, 10, 16, 18, 19, 22, 23, 24, 25, 43, 54, 72, 84, 85, 86, 87, 91, 99, 102, 104, 109, 110, 117, 120, 132], "conv2d": [3, 6, 8], "2d": [3, 106], "convolut": [3, 6, 8, 85], "like": 3, "dynam": [3, 95], "imag": [3, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 43, 54, 65, 66, 72, 73, 75, 85, 86, 101, 104, 109, 117], "pad": [3, 8, 18, 19, 20, 21, 22, 25, 26, 85, 101], "oper": [3, 99, 110, 132], "calcul": [3, 99, 101, 114, 132], "conv2dstaticsamepad": 3, "image_s": 3, "none": [3, 5, 7, 8, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 34, 35, 36, 37, 38, 39, 42, 43, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 85, 86, 89, 91, 94, 96, 97, 98, 100, 101, 104, 106, 107, 108, 109, 110, 111, 113, 115, 117, 119, 120, 127, 129, 131], "": [3, 54, 72, 86, 94, 95, 111, 123], "mode": [3, 35, 54, 72, 86, 129], "mudul": 3, "construct": [3, 83], "global_param": 3, "hookm": [3, 20, 22, 23], "fals": [3, 8, 15, 16, 18, 19, 20, 22, 23, 24, 25, 38, 42, 43, 51, 52, 53, 54, 70, 71, 72, 73, 84, 85, 86, 87, 88, 91, 99, 100, 101, 104, 105, 109, 111, 117, 120, 121, 127, 131, 132], "easili": [3, 128, 130], "from_nam": 3, "from_pretrain": 3, "globalparam": 3, "share": 3, "refer": [3, 35, 72, 83, 84, 85, 86, 129], "http": [3, 43, 54, 72, 83, 84, 85, 86, 95, 119, 125, 128, 130], "arxiv": [3, 43, 54, 72, 83, 86, 95, 119], "org": [3, 43, 54, 72, 83, 86, 95, 119], "ab": [3, 43, 54, 72, 83, 86], "1905": 3, "11946": 3, "import": [3, 35, 94, 99, 108, 113, 129, 132], "rand": 3, "3": [3, 19, 43, 54, 72, 83, 86, 94, 99, 109, 117, 132], "224": [3, 20, 21, 22, 23, 43, 54, 72, 86, 100, 131], "b0": 3, "eval": 3, "activations_hook": 3, "grad": [3, 62], "extract_endpoint": 3, "featur": [3, 6, 39, 65, 66, 95, 119], "reduct": [3, 119], "2": [3, 18, 24, 54, 72, 85, 91, 101], "4": [3, 8, 18, 19, 22, 25, 26, 43, 54, 72, 85, 86, 91, 101, 127], "dictionari": [3, 103, 111, 125, 127], "last": [3, 45, 85, 95, 99, 101, 121, 123, 132], "intermedi": 3, "rubric": 3, "endpoint": 3, "print": [3, 18, 19, 107, 111, 112, 120], "reduction_1": 3, "shape": [3, 10, 101, 106, 110, 119, 122], "16": [3, 20, 40, 43, 49, 54, 68, 72, 86, 91], "112": 3, "reduction_2": 3, "24": 3, "56": [3, 83], "reduction_3": 3, "40": 3, "28": [3, 15, 16, 17, 20, 21, 24], "reduction_4": 3, "14": 3, "reduction_5": 3, "320": 3, "7": [3, 95], "reduction_6": 3, "1280": 3, "extract_featur": 3, "final": [3, 62], "logit": [3, 65, 66, 73, 74, 75, 86, 91, 104, 109, 117], "process": [3, 99, 108, 110, 113, 121, 128, 130, 132], "classmethod": [3, 32], "model_nam": [3, 35, 103, 129], "override_param": 3, "creat": [3, 16, 32, 35, 99, 107, 108, 125, 128, 129, 130], "accord": [3, 35, 104, 109, 117, 129], "channel": [3, 6, 83, 85, 101], "kei": [3, 105, 128, 130], "word": [3, 43, 54, 72, 86], "param": [3, 62, 85, 110, 119], "overrid": [3, 16, 18, 19, 22, 23, 24, 25, 35, 94, 107, 110, 129], "width_coeffici": 3, "depth_coeffici": 3, "dropout_r": 3, "num_class": [3, 6, 7, 8, 42, 43, 54, 72, 78, 85, 86, 98, 108], "batch_norm_momentum": 3, "batch_norm_epsilon": 3, "drop_connect_r": 3, "depth_divisor": 3, "min_depth": 3, "weights_path": 3, "advprop": 3, "1000": [3, 8, 43, 54, 72, 85, 86], "path": [3, 88, 99, 100, 107, 111, 113, 127, 131, 132], "pretrain": [3, 8, 40, 49, 54, 68, 72, 85, 86, 87], "weight": [3, 54, 72, 86, 100, 105, 123, 128, 130, 131], "local": [3, 94, 112, 123, 127], "disk": 3, "internet": 3, "bool": [3, 8, 15, 85, 101, 104, 109, 110, 117], "whether": [3, 15, 101, 105, 110, 111], "valid": [3, 86, 99, 100, 104, 131, 132], "when": [3, 94, 99, 108, 123, 132], "categori": 3, "control": 3, "get_image_s": 3, "resolut": [3, 20, 21], "set_swish": 3, "memory_effici": 3, "swish": 3, "memori": [3, 37, 62, 100, 104, 109, 117, 124, 128, 130, 131], "effici": [3, 86, 128, 130], "standard": [3, 18, 19, 20, 21, 22, 25, 101, 127], "export": 3, "version": [3, 13, 37, 41, 45, 50, 69, 105, 109, 117], "mbconvblock": 3, "block_arg": 3, "mobil": 3, "invert": 3, "residu": [3, 8, 85], "bottleneck": [3, 8, 85], "util": [3, 10, 14, 15, 32, 33, 34, 41, 50, 69, 81, 90, 94, 95, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 128, 130], "image_height": 3, "image_width": 3, "1704": 3, "04861": 3, "mobilenet": 3, "v1": 3, "1801": 3, "04381": 3, "v2": 3, "02244": 3, "v3": [3, 54, 72], "drop": [3, 43, 54, 72, 86, 94], "connect": [3, 5], "rate": [3, 99, 100, 131, 132], "float": [3, 34, 35, 94, 100, 101, 110, 114, 115, 120, 129, 131], "memoryefficientswish": 3, "swishimplement": 3, "backward": [3, 100, 106, 111, 114, 124, 131], "ctx": [3, 106], "grad_output": [3, 106], "calculate_output_image_s": 3, "input_image_s": 3, "conv2dsamepad": 3, "thank": [3, 72, 86, 125], "mannatsingh": 3, "point": [3, 99, 113, 132], "h": [3, 123, 128, 130], "w": 3, "output_image_s": 3, "drop_connect": 3, "p": [3, 18, 19, 20, 21, 22, 23, 25, 26, 62, 101], "bcwh": 3, "structur": [3, 103], "probabl": [3, 101, 110], "include_top": 3, "suggest": 3, "efficientnet_param": 3, "efficientnet_tf": 3, "survival_prob": 3, "8": [3, 43, 51, 54, 72, 86, 95, 99, 128, 130], "get_model_param": 3, "global": [3, 99, 132], "dict": [3, 35, 111, 123], "modifi": [3, 7], "get_model_params_tf": 3, "get_same_padding_conv2d": 3, "choos": 3, "otherwis": [3, 35, 101, 104, 109, 115, 117, 129], "onnx": 3, "get_width_and_height_from_s": 3, "obtain": [3, 121], "height": [3, 101], "width": [3, 101], "load_pretrained_weight": 3, "load_fc": 3, "verbos": [3, 100, 120, 125, 131], "url": [3, 123], "whole": 3, "fc": 3, "end": [3, 32, 45, 99, 132], "mammoth_efficientnet": 3, "nclass": [3, 6, 7], "instanti": [3, 6, 7], "resnet18": [3, 7, 85, 128, 130], "nf": [3, 6, 7], "filter": [3, 6, 7], "resnet": [3, 6, 7, 8, 81, 83], "round_filt": 3, "round": [3, 15], "multipli": 3, "new": [3, 35, 62, 74, 96, 97, 98, 99, 128, 129, 130, 132], "new_filt": 3, "round_repeat": 3, "repeat": [3, 127], "depth": [3, 43, 54, 72, 83, 86], "num_repeat": 3, "input_s": [4, 5, 6, 7], "output_s": [4, 5], "compos": [4, 5, 16, 18, 19, 20, 21, 22, 23, 25, 26, 101, 110], "two": [4, 5, 101, 115], "hidden": [4, 5, 119], "100": [4, 5, 19, 20, 21, 128, 130], "activ": [4, 5, 15, 43, 54, 72, 86], "design": [4, 5, 6, 109, 128, 130], "mnist": [4, 5, 13, 15, 16, 17, 24, 83, 100, 128, 130, 131], "reset_paramet": [4, 5, 73], "devic": [4, 6, 8, 35, 57, 66, 94, 99, 104, 107, 109, 117, 129, 132], "old_col": [5, 7, 77], "equip": 5, "later": 5, "retrun": 5, "basicblock": [6, 7, 85], "in_plan": [6, 7, 8, 85], "plane": [6, 7, 8, 83, 85], "basic": [6, 7], "expans": [6, 8, 83, 85], "num_block": [6, 7], "complex": 6, "output_class": [6, 7], "set_return_prerelu": [6, 8, 108], "enabl": [6, 8, 54, 72, 100, 131], "conv3x3": [6, 8, 85], "out_plan": [6, 8, 85], "3x3": [6, 8, 85], "64": [6, 7, 8, 25, 85], "basicblockpnn": 7, "pnn": [7, 100, 128, 130, 131], "resnetpnn": 7, "x_shape": [7, 77], "inplan": [8, 83, 85], "downsampl": [8, 83, 85, 91], "base_width": [8, 85], "norm_lay": [8, 43, 54, 72, 85, 86], "zero_init_residu": [8, 85], "width_per_group": [8, 85], "replace_stride_with_dil": [8, 85], "set_grad_filt": 8, "filter_": 8, "conv1x1": [8, 85], "1x1": [8, 85], "deep": [8, 85], "recognit": [8, 43, 54, 72, 85, 86], "pre": [8, 85, 86, 128, 130], "imagenet": [8, 14, 23, 25, 40, 49, 54, 68, 72, 85, 86, 128, 130], "progress": [8, 85, 100, 120, 128, 130, 131], "displai": [8, 85], "bar": [8, 85, 100, 120, 131], "stderr": [8, 85, 111, 120], "alphamodul": 10, "recurs": 10, "listmodul": 10, "append": 10, "get_all_dataset": 11, "those": [11, 35, 129], "error": [11, 35, 127], "wa": [11, 35, 123, 127], "detect": [11, 35, 129], "rais": [11, 35, 101], "messag": [11, 18, 19, 35, 107], "namespac": [11, 15, 32, 35, 94, 111, 113, 121], "hyperparamet": [11, 32, 103, 125, 128, 130], "asserterror": [11, 35], "instanc": [11, 35, 100, 104], "get_dataset_class": 11, "select": [11, 35, 99, 103, 106, 110, 128, 129, 130, 132], "get_dataset_nam": 11, "deprec": [13, 45], "mnist360": [13, 15], "360": [13, 15, 100, 128, 130, 131], "length": [13, 53, 71, 99, 110, 128, 130], "54051": 13, "old": [13, 65, 66, 74, 96, 97, 98], "n_class": [13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 35, 52, 88, 129], "9": [13, 15, 128, 130], "cross_entropi": 13, "get_minibatch_s": [13, 32], "get_test_data": [13, 15], "ensembl": [13, 15], "next": [13, 15, 94, 107], "along": [13, 101, 111], "its": [13, 35, 95, 99, 104, 111, 129, 132], "get_train_data": [13, 15], "aument": 13, "init_test_load": [13, 15], "init_train_load": [13, 15], "train_next_class": [13, 15], "coupl": [13, 15, 39, 115, 127], "packag": [14, 19, 31, 41, 50, 69, 109, 117, 128, 130], "r": [14, 21, 23, 26, 100, 125, 128, 130, 131], "classnam": 14, "is_train": 15, "custom": [15, 35, 40, 41, 49, 50, 68, 69, 81, 94, 99, 101, 106, 108, 110, 129, 132], "rotat": [15, 17, 128, 130], "indic": [15, 106, 109, 110], "remaining_training_item": 15, "num_round": 15, "is_ov": 15, "completed_round": 15, "test_class": 15, "index": [15, 30, 32, 35, 65, 66, 73, 75, 94, 101, 104, 106, 111, 120, 121, 127, 129], "test_iter": 15, "iter": [15, 30, 35, 39, 94, 95, 99, 101, 120, 129, 132], "train_class": 15, "active_train_load": 15, "current_item": 15, "reinit": 15, "sequentialmnist360": 15, "context": 15, "ident": 15, "add": [15, 35, 41, 50, 69, 94, 100, 103, 104, 109, 111, 117, 125, 128, 129, 130], "them": [15, 55, 95, 99, 132], "test_load": [15, 32], "train_load": [15, 32], "custom_collate_unbatch": 15, "collat": 15, "unbatch": 15, "repres": [15, 39, 65, 66, 101, 114], "mymnist": [16, 24], "root": [16, 18, 19, 22, 23, 24, 25, 125], "target_transform": [16, 18, 19, 22, 23, 24, 25, 34], "getitem": [16, 18, 19, 22, 23, 24, 25], "permutedmnist": 16, "sequenc": [16, 110], "task": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 32, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 99, 100, 104, 109, 111, 113, 114, 117, 120, 121, 123, 125, 128, 130, 131, 132], "pixel": 16, "experi": [16, 55, 100, 111, 127, 128, 130, 131], "n_task": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 35, 42, 73, 91, 96, 97, 98, 117, 129], "perm": [16, 100, 131], "20": [16, 17, 22, 23, 25, 83], "domain": [16, 17, 35, 36, 37, 39, 45, 46, 47, 48, 55, 58, 59, 62, 63, 64, 68, 76, 79, 80, 128, 129, 130], "il": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 96, 97, 98, 111, 121, 128, 129, 130], "rotatedmnist": 17, "rot": [17, 100, 131], "200": [17, 22, 23, 25, 128, 130], "cifar10": [18, 99, 100, 131, 132], "std": [18, 19, 20, 21, 22, 23, 25, 26, 28, 101], "deviat": [18, 19, 20, 21, 22, 25, 101], "torchvis": [18, 19, 20, 21, 22, 25, 85, 109, 110, 117], "4914": 18, "4822": 18, "4465": 18, "seq": [18, 19, 20, 21, 22, 23, 24, 25, 26, 99, 100, 128, 130, 131, 132], "32": [18, 19, 26, 83, 99, 132], "247": 18, "2435": 18, "2615": 18, "randomcrop": [18, 19, 20, 21, 22, 25, 26], "randomhorizontalflip": [18, 19, 20, 21, 22, 23, 25, 26], "workaround": [18, 19], "avoid": [18, 19, 79, 108], "alreadi": [18, 19], "mycifar100": 19, "cifar100": [19, 20, 21, 23, 84, 100, 128, 130, 131], "sequentialcifar100": 19, "5071": [19, 21], "4867": [19, 21], "4408": [19, 21], "2675": [19, 21], "2565": [19, 21], "2761": [19, 21], "get_examples_numb": 19, "get_schedul": [19, 32], "optim": [19, 35, 83, 94, 100, 118, 123, 129, 131], "lr_schedul": [19, 100, 131], "opt": [19, 35, 109, 117, 129], "hostedtoolcach": [19, 109, 117], "python": [19, 99, 109, 117, 125, 132], "13": [19, 109, 117], "x64": [19, 109, 117], "lib": [19, 109, 117], "python3": [19, 109, 117], "site": [19, 109, 117], "tcifar100": 19, "sequentialcifar100224": 20, "224x224": [20, 21, 54, 72, 86, 128, 130], "vit": [20, 40, 41, 49, 50, 54, 68, 69, 72, 81, 128, 130], "b": [20, 40, 42, 49, 54, 68, 72, 86], "test_transform": [20, 21, 22, 23, 26, 34], "resiz": [20, 21, 22, 23, 26, 101, 128, 130], "interpol": [20, 21, 22, 23, 26, 128, 130], "bilinear": [20, 21, 22, 26], "max_siz": [20, 21, 22, 23, 26], "antialia": [20, 21, 22, 23, 26], "warn": [20, 21, 22, 23, 26, 49, 94, 107], "sequentialcifar100224r": 21, "resnet50": [21, 85, 128, 130], "cub200": [22, 100, 131], "mycub200": 22, "img_siz": [22, 43, 54, 72, 86], "4856": 22, "4994": 22, "4324": 22, "2272": 22, "2226": 22, "2613": 22, "sequentialcub200": 22, "myimagenetr": 23, "sequentialimagenetr": 23, "bicub": 23, "randomresizedcrop": 23, "scale": [23, 43, 54, 72, 86], "08": 23, "ratio": 23, "75": 23, "3333": 23, "get_class_nam": 23, "get_n_epochs_first_stag": 23, "get_prompt_templ": 23, "get_virtual_bn_num": 23, "sequentialmnist": 24, "mytinyimagenet": 25, "tinyimagenet": [25, 26, 128, 130], "sequentialtinyimagenet": [25, 26], "tini": [25, 128, 130], "4802": 25, "448": 25, "3975": 25, "tinyimg": [25, 26, 100, 128, 130, 131], "277": 25, "2691": 25, "2821": 25, "sequentialtinyimagenet32r": 26, "32x32": [26, 128, 130], "4807": 26, "4485": 26, "398": 26, "2541": 26, "2456": 26, "2604": 26, "fixedpermut": 29, "seed": [29, 30, 99, 100, 107, 131, 132], "numpi": [29, 30], "arrai": [29, 30], "fixedrot": 30, "deg_min": 30, "deg_max": 30, "180": 30, "incrementalrot": 30, "init_deg": 30, "increase_per_iter": 30, "006": 30, "set_iter": 30, "c_task": 32, "avail_sch": 32, "multisteplr": [32, 100, 131], "minibatch": 32, "get_offset": 32, "task_idx": [32, 65, 66, 73, 75], "start": [32, 35, 94, 99, 100, 123, 125, 129, 131, 132], "schedul": [32, 100, 123, 131], "_lrschedul": [32, 118], "train_dataset": 32, "test_dataset": 32, "divid": 32, "evalu": [33, 99, 121, 132], "multipl": [33, 35, 101, 124, 129], "validationdataset": 34, "get_train_v": 34, "val_perc": 34, "few": [35, 99, 100, 125, 129, 131, 132], "framework": [35, 129], "auto": [35, 110, 129], "mechan": [35, 129], "get_model": [35, 129], "continualmodel": [35, 36, 37, 38, 39, 40, 45, 46, 47, 49, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 95, 96, 97, 98, 104, 121, 129], "continual_model": [35, 129], "leav": [35, 101, 129], "user": [35, 129], "definit": [35, 129], "observ": [35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 99, 125, 129, 132], "place": [35, 129], "hyper": [35, 94, 99, 127, 129, 132], "get_pars": [35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 129], "identifi": [35, 129], "my_model": [35, 129], "command": [35, 99, 113, 125, 129, 132], "line": [35, 99, 113, 125, 128, 129, 130, 132], "want": [35, 125, 127, 129], "updat": [35, 62, 84, 94, 99, 104, 124, 129, 132], "def": [35, 86, 112, 129], "not_aug_input": [35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 94, 96, 97, 98, 129], "receiv": [35, 129], "origin": [35, 54, 72, 86, 128, 129, 130], "By": [35, 125, 127, 129], "just": [35, 104, 109, 117, 129], "howev": [35, 99, 124, 129, 132], "overridden": [35, 94, 99, 129, 132], "chosen": [35, 129], "thu": [35, 125, 129], "cannot": [35, 129], "advantag": [35, 129], "unlabel": [35, 94, 129], "through": [35, 128, 129, 130], "besid": [35, 55, 129], "begin_task": [35, 38, 40, 48, 49, 57, 65, 66, 68, 73, 74, 89, 94, 99, 129, 132], "end_task": [35, 36, 38, 39, 45, 58, 59, 60, 61, 62, 64, 65, 66, 67, 73, 75, 77, 78, 80, 89, 94, 96, 97, 98, 99, 129, 132], "behavior": [35, 125, 129], "save": [35, 45, 99, 100, 129, 131, 132], "properti": [35, 83, 85, 87, 94, 104, 112, 129], "current_task": [35, 94, 129], "n_classes_current_task": [35, 94, 129], "n_past_class": [35, 94, 129], "seen": [35, 55, 94, 104, 121, 129], "so": [35, 94, 121, 129], "far": [35, 94, 121, 129], "past": [35, 62, 94, 111, 121, 129], "n_seen_class": [35, 94, 129], "task_iter": [35, 129], "reset": [35, 129], "virtual": [35, 129], "cpt": [35, 73, 91, 94, 104, 129], "amount": [35, 129], "could": [35, 94, 129], "either": [35, 94, 123, 129], "weak_transform": [35, 129], "kornia": [35, 110, 128, 129, 130], "to_kornia_transform": [35, 110, 129], "pil": [35, 110, 129], "normalization_transform": [35, 129], "As": [35, 124, 129], "cpu": [35, 100, 104, 107, 117, 129, 131], "cuda": [35, 129], "abov": [35, 123, 129], "eas": [35, 99, 129, 132], "convers": [35, 129], "handel": [35, 123, 129], "kornia_util": [35, 129], "convert": [35, 54, 72, 86, 110, 129], "alwai": [35, 129], "argpars": [35, 113, 129], "argumentpars": [35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 89, 96, 97, 98, 100, 129], "pars": [35, 99, 113, 129, 132], "staticmethod": [35, 129], "parser": [35, 94, 95, 99, 100, 129, 132], "mymodel": [35, 129], "add_argu": [35, 129], "my_param": [35, 129], "help": [35, 99, 100, 125, 127, 129, 131, 132], "my": [35, 72, 86, 129], "view": [35, 129], "get_optim": [35, 40, 94, 129], "get_debug_it": [35, 39, 94, 129], "debug_mod": [35, 99, 100, 129, 131, 132], "autolog_wandb": [35, 94, 125, 129], "reli": [35, 129], "magic": [35, 129], "log": [35, 39, 94, 99, 100, 107, 111, 122, 127, 129, 131, 132], "variabl": [35, 94, 110, 112, 125, 129], "_wandb_": [35, 94, 125, 129], "manual": [35, 54, 72, 86, 129], "extra": [35, 94, 123, 129], "debug": [35, 94, 99, 128, 129, 130, 132], "hook": [35, 129], "intern": [35, 94, 99, 129, 132], "meta_begin_task": [35, 94, 129], "meta_end_task": [35, 94, 129], "meta_observ": [35, 94, 129], "remov": [35, 129], "associ": [35, 101, 128, 129, 130], "get_all_model": 35, "get_model_class": 35, "get_model_nam": 35, "project": [36, 62, 100, 113, 131], "gxy": 36, "ger": 36, "gem": [37, 100, 108, 128, 130, 131], "leverag": 37, "buffer": [37, 55, 94, 99, 100, 108, 109, 117, 123, 124, 128, 130, 131, 132], "reservoir": [37, 104, 109, 117, 128, 130], "agemr": 37, "build_buff": 38, "evaluate_bia": 38, "fprefx": 38, "anticip": 38, "compute_embed": 39, "vector": [39, 53, 62, 65, 66, 71, 119], "discard_supervised_label": 39, "discard_unsupervised_label": 39, "end_epoch": 39, "wait": [39, 108], "need": [39, 99, 108, 128, 130, 132], "knn": 39, "coda": [40, 41, 100, 128, 130, 131], "prompt": [40, 41, 43, 49, 50, 51, 54, 68, 69, 86, 100, 128, 130, 131], "decompos": [40, 128, 130], "attent": [40, 43, 54, 72, 86, 101, 128, 130], "vit_base_patch16_224": [40, 49, 68], "21k": [40, 49, 68, 86], "finetun": [40, 49, 68, 79], "1k": [40, 49, 54, 68, 72], "codaprompt": [40, 42], "coda_prompt_util": [42, 43], "emb_d": 42, "prompt_param": 42, "key_dim": 42, "768": [42, 43, 53, 54, 71, 72, 86], "x_querri": 42, "l": 42, "x_block": 42, "task_id": [42, 43, 52, 54, 72, 91], "gram_schmidt": 42, "vv": 42, "process_task_count": 42, "pt": [42, 100, 123, 131], "pen": 42, "ortho_penalti": 42, "t": [42, 62, 95, 111, 125], "tensor_prompt": 42, "c": [42, 91], "ortho": 42, "blip": 43, "code": [43, 54, 72, 86, 105, 125, 128, 130], "github": [43, 54, 72, 83, 84, 85, 86, 119], "com": [43, 54, 72, 83, 84, 85, 86, 119, 128, 130], "salesforc": 43, "dim": [43, 51, 53, 54, 71, 72, 74, 86, 108], "num_head": [43, 51, 53, 54, 72, 86], "qkv_bia": [43, 51, 54, 72, 86], "qk_scale": 43, "attn_drop": [43, 51, 54, 72, 86], "proj_drop": [43, 51, 54, 72, 86], "register_hook": 43, "get_attention_map": 43, "get_attn_gradi": 43, "save_attention_map": 43, "attention_map": [43, 91, 104], "save_attn_gradi": 43, "attn_gradi": 43, "mlp_ratio": [43, 54, 72, 86], "drop_path": [43, 54, 72, 86], "act_lay": [43, 54, 72, 86], "gelu": [43, 54, 72, 86], "layernorm": [43, 54, 72, 86], "mlp": 43, "in_featur": [43, 73], "hidden_featur": 43, "out_featur": 43, "vision": [43, 54, 72, 85, 86], "mixer": 43, "relat": [43, 55, 100, 111, 128, 130, 131], "visiontransform": [43, 54, 72, 86], "patch_siz": [43, 54, 72, 86], "in_chan": [43, 54, 72, 86], "embed_dim": [43, 53, 54, 71, 72, 84, 86, 122], "12": [43, 53, 54, 71, 72, 86], "representation_s": [43, 86], "drop_rat": [43, 54, 72, 86], "attn_drop_r": [43, 54, 72, 86], "drop_path_r": [43, 54, 72, 86], "ckpt_layer": 43, "pytorch": [43, 54, 72, 85, 86, 124], "impl": [43, 54, 72, 86], "worth": [43, 54, 72, 86], "16x16": [43, 54, 72, 86], "2010": [43, 54, 72, 86], "11929": [43, 54, 72, 86], "register_blk": 43, "q": 43, "no_weight_decai": [43, 54, 72, 86], "collect": [44, 99, 132], "cl": [45, 54, 72], "instead": [45, 99, 117, 127, 132], "combin": [45, 127], "sgd": [45, 94, 100, 131], "compab": 45, "joint_gcl": 45, "previou": [45, 104, 105], "noth": [45, 94, 128, 130], "derpplid": 48, "lideroptim": [48, 57, 61, 66, 95], "complementari": [49, 128, 130], "rehears": [49, 55, 99, 100, 104, 108, 109, 117, 128, 130, 132], "free": [49, 128, 130], "get_paramet": [49, 68, 94], "dualprompt": [50, 54, 100, 128, 130, 131], "dualprompt_util": [51, 52, 53, 54], "pret_attent": 51, "return_output": [52, 70], "eprompt": 53, "embedding_kei": [53, 54, 71, 72], "prompt_init": [53, 54, 71, 72], "uniform": [53, 54, 71, 72], "prompt_pool": [53, 54, 71, 72], "prompt_kei": [53, 54, 71, 72], "pool_siz": [53, 54, 71, 72], "top_k": [53, 54, 71, 72], "batchwise_prompt": [53, 54, 71, 72], "prompt_key_init": [53, 54, 71, 72], "num_lay": 53, "use_prefix_tune_for_e_prompt": [53, 54], "same_key_valu": [53, 54], "x_emb": [53, 71], "prompt_mask": [53, 71], "cls_featur": [53, 54, 71, 72], "l2_normal": [53, 71], "epsilon": [53, 71], "1e": [53, 54, 71, 72, 91], "matrix": [53, 71, 95], "clone": 54, "timm": [54, 72, 86, 128, 130], "copyright": [54, 72, 86], "2020": [54, 72, 86, 119, 128, 130], "ross": [54, 72, 86], "wightman": [54, 72, 86], "modif": [54, 72], "ad": [54, 72, 94, 99, 104, 108, 128, 130, 132], "jaeho": [54, 72], "lee": [54, 72], "dlwogh9344": [54, 72], "khu": [54, 72], "ac": [54, 72, 100, 128, 130, 131], "kr": [54, 72], "init_valu": [54, 72], "attn_lay": 54, "layerscal": [54, 72], "05": [54, 72], "inplac": [54, 72], "parallelblock": [54, 72], "num_parallel": [54, 72], "respostblock": [54, 72], "init_weight": [54, 72, 86], "global_pool": [54, 72, 86], "token": [54, 72, 86], "class_token": [54, 72], "no_embed_class": [54, 72], "fc_norm": [54, 72], "weight_init": [54, 72, 86], "embed_lay": [54, 72, 86], "patch_emb": [54, 72, 86], "patchemb": [54, 72, 86], "block_fn": [54, 72], "prompt_length": [54, 72], "head_typ": [54, 72], "use_prompt_mask": [54, 72], "use_g_prompt": 54, "g_prompt_length": 54, "g_prompt_layer_idx": 54, "use_prefix_tune_for_g_prompt": 54, "use_e_prompt": 54, "e_prompt_layer_idx": 54, "forward_featur": [54, 72, 86], "forward_head": [54, 72], "re": [54, 72, 128, 130], "pre_logit": [54, 72], "get_classifi": [54, 72, 86], "group_match": [54, 72], "coars": [54, 72], "load_pretrain": [54, 72, 86], "checkpoint_path": [54, 72, 86], "prefix": [54, 72, 86, 111, 125], "reset_classifi": [54, 72, 86], "set_grad_checkpoint": [54, 72], "checkpoint_filter_fn": [54, 72, 86], "state_dict": [54, 72, 86], "adapt_layer_scal": [54, 72], "patch": [54, 72, 86], "embed": [54, 72, 73, 86, 122], "patchifi": [54, 72, 86], "proj": [54, 72, 86], "conv": [54, 72, 83, 84, 85, 86], "get_init_weights_vit": [54, 72], "jax": [54, 72, 86], "head_bia": [54, 72], "init_weights_vit_jax": [54, 72], "match": [54, 72, 95, 106], "flax": [54, 72], "init_weights_vit_moco": [54, 72], "moco": [54, 72], "minu": [54, 72], "init_weights_vit_timm": [54, 72], "reproduc": [54, 72], "resize_pos_emb": [54, 72, 86], "posemb": [54, 72, 86], "posemb_new": [54, 72, 86], "num_prefix_token": [54, 72], "gs_new": [54, 72, 86], "vit_base_patch16_224_dualprompt": 54, "paper": [54, 62, 72, 86], "fine": [54, 72], "tune": [54, 72, 99, 132], "in21k": [54, 72], "googl": [54, 72, 86], "research": [54, 72, 86, 128, 130], "simplest": [55, 79, 124], "form": [55, 79, 124, 125], "maintain": 55, "previous": 55, "usag": [55, 112], "predefin": 55, "add_management_arg": [55, 100], "add_experiment_arg": [55, 100], "add_rehearsal_arg": [55, 100], "erac": 56, "eracelid": 57, "ewcon": 58, "penalti": [58, 80], "fit_buff": [60, 61, 73], "gdumblid": 61, "overwrite_grad": 62, "newgrad": 62, "grad_dim": 62, "overwrit": 62, "whenev": 62, "violat": 62, "occur": 62, "pp": 62, "project2cone2": 62, "margin": [62, 73, 122], "ep": [62, 91], "001": 62, "solv": 62, "dual": 62, "qp": 62, "describ": [62, 72, 86], "propos": 62, "store_grad": 62, "get_anchor": 64, "binary_cross_entropi": [65, 66], "pred": [65, 66, 91], "y": [65, 66, 91, 101, 109, 123], "compute_class_mean": [65, 66], "fed": [65, 66, 73, 75], "ground": [65, 66, 73, 75, 94, 119], "truth": [65, 66, 73, 75, 94, 119], "differenti": [65, 73, 75, 125], "icarllid": 66, "jointgcl": [67, 128, 130], "l2p": [69, 72, 100, 128, 130, 131], "l2p_util": [70, 71, 72], "l2pmodel": 70, "prompt_shuffl": [71, 72], "how": [72, 86], "regular": [72, 86, 95, 128, 130], "2106": [72, 86], "10270": [72, 86], "releas": [72, 86], "vision_transform": [72, 86], "acknowledg": [72, 86], "author": [72, 86, 119, 128, 130], "phil": [72, 86], "wang": [72, 86], "lucidrain": [72, 86], "einop": [72, 86], "einsum": [72, 86], "fun": [72, 86], "simpl": [72, 86, 123, 128, 130], "style": [72, 86, 128, 130], "inspir": [72, 86, 128, 130], "andrej": [72, 86], "karpathi": [72, 86], "mingpt": [72, 86], "bert": [72, 86], "against": [72, 86], "huggingfac": [72, 86], "hack": [72, 86], "togeth": [72, 86], "vit_base_patch16_224_l2p": 72, "customclassifi": 73, "noscale_forward": 73, "reset_weight": 73, "opt_step": 73, "imprint_weight": 73, "fit": 73, "update_classifi": 73, "lucir_batch_hard_triplet_loss": 73, "k": [73, 95, 118, 121, 122], "num_old_class": 73, "triplet": 73, "modified_kl_div": 74, "smooth": 74, "temp": [74, 91], "lwfmc": 75, "draw_batch": 76, "inp": 76, "lab": 76, "task_label": [77, 94, 104, 109, 117], "bone": 77, "dsimplex": [78, 98], "countermeasur": 79, "forget": [79, 111, 114, 128, 130], "slca": [81, 100, 128, 130, 131], "khurramjaved96": 83, "blob": [83, 84, 85, 119], "autoencod": 83, "resnet32": 83, "slca_util": [83, 84, 85, 86, 87, 88], "cifarresnet": 83, "cifar": [83, 85, 128, 130], "1512": 83, "03385": 83, "pdf": [83, 95, 119], "last_conv": [83, 85], "downsamplea": 83, "nin": 83, "nout": 83, "downsampleb": 83, "downsamplec": 83, "resnetbasicblock": 83, "resnet110": 83, "110": 83, "resnet20": 83, "resnet20mnist": 83, "resnet32mnist": 83, "resnet44": 83, "44": 83, "resnet56": 83, "hshustc": 84, "cvpr19_incremental_learn": 84, "master": [84, 85, 108, 119, 128, 130], "modified_linear": 84, "simplecontinuallinear": 84, "nb_class": [84, 87], "feat_expand": 84, "with_norm": 84, "backup": 84, "recal": 84, "freeze_old": [84, 87], "no_last_relu": 85, "resnet101": 85, "101": 85, "resnet152": 85, "152": 85, "18": 85, "resnet34": 85, "34": 85, "resnext101_32x8d": 85, "resnext": 85, "32x8d": 85, "aggreg": [85, 125], "neural": [85, 128, 130], "resnext50_32x4d": 85, "32x4d": 85, "wide_resnet101_2": 85, "wide": 85, "larger": 85, "everi": [85, 100, 131], "outer": 85, "ha": [85, 86, 94, 108, 112, 119], "2048": 85, "512": 85, "1024": 85, "wide_resnet50_2": 85, "deit": 86, "facebookresearch": 86, "2012": 86, "12877": 86, "distil": [86, 128, 130], "with_adapt": 86, "head": [86, 105], "layer_feat": 86, "get_adapt": 86, "num_token": 86, "vit_base_patch16_224_in21k": 86, "adapt": [86, 128, 130], "note": [86, 100, 108, 123, 128, 130, 131], "classifi": [86, 105, 108, 128, 130], "represent": [86, 128, 130], "vit_base_patch16_224_mocov3": 86, "basenet": 87, "feature_extractor_typ": 87, "copi": 87, "extract_vector": 87, "feature_dim": 87, "freez": 87, "generate_fc": 87, "in_dim": 87, "out_dim": 87, "update_fc": 87, "finetuneincrementalnet": 87, "fc_with_ln": 87, "extract_layerwise_vector": 87, "pool": 87, "bcb_no_grad": 87, "fc_onli": 87, "save_old_fc": 87, "get_convnet": 87, "accuraci": [88, 107, 111, 121], "y_pred": 88, "y_true": 88, "nb_old": 88, "count_paramet": 88, "trainabl": 88, "makedir": 88, "split_images_label": 88, "img": [88, 101], "target2onehot": 88, "tensor2numpi": 88, "get_custom_double_transform": 89, "partial_distill_loss": 89, "net_partial_featur": 89, "pret_partial_featur": 89, "teacher_forc": [89, 91], "extern_attention_map": 89, "batch_iter": 89, "twf_util": [91, 92], "binarygumbelsoftmax": 91, "tau": 91, "6666666666666666": 91, "channelattn": 91, "reduction_r": 91, "activated_with_softmax": 91, "compute_dist": 91, "fm_": 91, "fm_t": 91, "rho": 91, "use_overhaul_fd": 91, "tasks_id": 91, "upsampl": 91, "desired_shap": 91, "conditionallinear": 91, "fin": 91, "fout": 91, "use_bn": 91, "act_init": 91, "init_paramet": 91, "diverseloss": 91, "lambda_loss": 91, "doubleattn": 91, "min_resize_threshold": 91, "hardattentionsoftmax": 91, "flag_stop_grad": [91, 106], "multitaskafdaltern": 91, "chw": 91, "clear_grad": 91, "lambda_diverse_loss": 91, "use_hard_softmax": 91, "teacher_forcing_or": 91, "lambda_forcing_loss": 91, "attn_mod": 91, "ch": 91, "resize_map": 91, "extend_lik": 91, "get_tasks_id": 91, "06": 91, "softattentionsoftmax": 91, "spatialattn": 91, "studenttransform": 91, "teacherforcingloss": 91, "teachertransform": 91, "get_margin": 91, "fm": 91, "get_rnd_weight": 91, "num_task": 91, "nonlinear": 91, "init_twf": 92, "interfac": 94, "load_buff": 94, "do": 94, "wrapper": 94, "counter": 94, "wandb": [94, 99, 100, 111, 121, 127, 131, 132], "instal": [94, 121, 125, 128, 130], "avail_optim": 94, "adam": [94, 100, 131], "adamw": [94, 100, 131], "upon": 94, "prepar": 94, "execut": [94, 99, 113, 121, 132], "might": [94, 108], "result": [94, 100, 111, 114, 121, 123, 131], "wai": [94, 125], "handl": [94, 105, 108], "been": [94, 112, 125], "yet": 94, "n_remaining_class": 94, "abstract": 94, "step": [94, 99, 100, 131, 132], "captur": 94, "lipschitz": [95, 128, 130], "lider": [95, 100, 128, 130, 131], "2210": 95, "06443": 95, "superclass": 95, "compute_transition_matrix": 95, "front": 95, "latter": [95, 123], "dynamic_budget_lip_loss": 95, "budget": 95, "eq": 95, "assum": 95, "get_feature_lip_coeff": 95, "coeffici": [95, 115], "get_layer_lip_coeff": 95, "features_a": 95, "features_b": 95, "estim": 95, "2108": 95, "12905": 95, "get_norm": 95, "norm": 95, "init_net": 95, "minimization_lip_loss": 95, "minim": 95, "top_eigenvalu": 95, "n_power_iter": 95, "top": [95, 101], "eigenvalu": 95, "power": 95, "stop": [95, 106], "propag": 95, "posit": [95, 122], "neg": [95, 122], "transmitting_matrix": 95, "fm1": 95, "fm2": 95, "add_lipschitz_arg": 95, "update_logit": [96, 97, 98], "gt": [96, 97, 98], "task_start": [96, 97, 98], "xderc": 97, "xderrpc": 98, "throughout": [99, 132], "librari": [99, 113, 132], "main": [99, 123, 124, 125, 127, 128, 130, 132], "entri": [99, 113, 132], "script": [99, 113, 123, 132], "There": [99, 132], "found": [99, 132], "correspond": [99, 132], "parse_arg": [99, 113, 132], "shown": [99, 132], "lr": [99, 100, 131, 132], "buffer_s": [99, 100, 103, 104, 109, 117, 123, 131, 132], "er": [99, 100, 108, 128, 130, 131, 132], "128": [99, 132], "500": [99, 132], "03": [99, 132], "boolean": [99, 132], "convent": [99, 132], "savecheck": [99, 100, 123, 131, 132], "inference_onli": [99, 100, 131, 132], "search": [99, 132], "disabl": [99, 100, 131, 132], "num_work": [99, 100, 131, 132], "worker": [99, 100, 107, 127, 131, 132], "random": [99, 100, 101, 104, 109, 114, 117, 131, 132], "joint": [99, 100, 111, 120, 123, 128, 130, 131, 132], "suppli": [99, 123, 132], "treat": [99, 132], "serv": [99, 132], "fulli": [99, 132], "unsupervis": [99, 119, 128, 130, 132], "manner": [99, 132], "under": [99, 123, 125, 127, 132], "begin": [99, 132], "state": [99, 111, 123, 132], "preliminari": [99, 132], "statist": [99, 132], "minut": [99, 132], "gdumb": [99, 100, 128, 130, 131, 132], "logic": [99, 132], "applic": [99, 108, 132], "get_devic": [99, 107, 132], "create_if_not_exist": 99, "custom_str_underscor": [99, 100, 131], "none_or_float": 99, "random_id": 99, "alphabet": 99, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789": 99, "smart_joint": 99, "0x7fe9f47a42c0": [100, 131], "agem": [100, 131], "ewc": [100, 131], "derpp": [100, 131], "si": [100, 128, 130, 131], "bic": [100, 128, 130, 131], "fdr": [100, 128, 130, 131], "gss": [100, 109, 128, 130, 131], "gcl": [100, 131], "lwf": [100, 128, 130, 131], "mer": [100, 128, 130, 131], "rpc": [100, 128, 130, 131], "ccic": [100, 128, 130, 131], "hal": [100, 128, 130, 131], "lucir": [100, 105, 128, 130, 131], "mc": [100, 131], "xder": [100, 131], "ce": [100, 131], "optim_wd": [100, 131], "decai": [100, 131], "optim_mom": [100, 131], "momentum": [100, 131], "optim_nesterov": [100, 131], "nesterov": [100, 131], "lr_mileston": [100, 131], "mileston": [100, 131], "sched_multistep_lr_gamma": [100, 131], "gamma": [100, 106, 131], "n_epoch": [100, 123, 131], "dp": [100, 108, 124, 131], "ddp": [100, 108, 131], "checkpoint": [100, 131], "loadcheck": [100, 123, 131], "ckpt_name": [100, 123, 131], "start_from": [100, 127, 131], "stop_aft": [100, 131], "manag": [100, 131], "present": [100, 104, 131], "non_verbos": [100, 131], "disable_log": [100, 131], "drawn": [100, 131], "enable_other_metr": [100, 131], "transfer": [100, 111, 114, 128, 130, 131], "wandb_ent": [100, 125, 131], "entiti": [100, 131], "wandb_project": [100, 125, 131], "eval_epoch": [100, 131], "intra": [100, 128, 130, 131], "reehars": [100, 131], "minibatch_s": [100, 109, 131], "variou": 101, "customrandomcrop": 101, "min_resize_index": 101, "crop": 101, "pair": 101, "stackabl": 101, "map": 101, "desir": 101, "squar": 101, "border": 101, "other_img": 101, "minimum": 101, "customrandomhorizontalflip": 101, "horizont": 101, "flip": 101, "doublecompos": 101, "__iter__": 101, "__getitem__": 101, "__len__": 101, "__call__": 101, "doubletransform": 101, "tf": 101, "unchang": 101, "soft_aug": 101, "strong_aug": 101, "strong": [101, 128, 130], "pipelin": 101, "apply_transform": 101, "korniaaugnograd": [101, 110], "directli": [101, 113], "cutmix_data": 101, "alpha": [101, 115], "cutmix_prob": 101, "cutmix": 101, "box": 101, "mix": [101, 115], "y_a": 101, "y_b": 101, "lam": 101, "lambda": 101, "assertionerror": 101, "rand_bbox": 101, "format": [101, 123], "coordin": 101, "left": 101, "corner": 101, "bby1": 101, "bbx2": 101, "bottom": 101, "right": 101, "bby2": 101, "bbx1": 101, "random_crop": 101, "random_flip": 101, "random_grayscal": 101, "prob": 101, "grayscal": 101, "bn_track_stat": 102, "condit": [102, 106], "best": [103, 128, 130], "small": 103, "organ": [103, 125], "dataset_nam": 103, "hyperparameter_nam": 103, "hyperparameter_valu": 103, "todolist": 103, "add_data": [104, 109, 117], "strategi": [104, 109, 117, 128, 130], "empti": [104, 109, 117], "get_all_data": [104, 109, 117], "get_data": [104, 109, 117], "return_index": 104, "mask_task_out": 104, "request": [104, 109, 117, 128, 130], "mask_task": 104, "element": 104, "get_data_by_index": 104, "init_tensor": [104, 109, 117], "is_empti": [104, 109, 117], "move": 104, "used_attribut": 104, "being": 104, "fill_buff": 104, "t_idx": 104, "use_herd": 104, "required_attribut": 104, "herd": 104, "icarl_replai": 104, "val_set_split": 104, "merg": 104, "fraction": 104, "num_seen_exampl": [104, 117], "algorithm": 104, "maximum": [104, 120, 127], "els": [104, 107], "mammoth_load_checkpoint": 105, "ignore_classifi": 105, "dataparallel": [105, 108, 124], "distributeddataparallel": [105, 108, 124], "conditionalbatchnorm1d": 106, "num_featur": 106, "num_condit": 106, "1d": 106, "cond_id": 106, "beta": [106, 115], "conditionalbatchnorm2d": 106, "selectcleargrad": 106, "autograd": 106, "clear": [106, 112], "reshap": 106, "configur": [107, 113], "bath": 107, "tensorboard": 107, "create_seeded_dataload": 107, "dataloader_arg": 107, "program": [107, 113], "extern": 107, "least": 107, "gpu": [107, 124, 127], "mp": 107, "set_random_se": 107, "certain": 107, "set_random_seed_work": 107, "worker_id": 107, "warn_onc": 107, "msg": 107, "parallel": [108, 123, 127], "make_ddp": [108, 124], "make_dp": [108, 124], "wait_for_mast": 108, "synchron": [108, 124], "customdp": 108, "device_id": 108, "output_devic": 108, "intercept_nam": 108, "intercept": 108, "etc": [108, 123], "becaus": 108, "break": 108, "hoc": 108, "solut": 108, "here": 108, "wrap": 108, "setup": 108, "rank": 108, "world_siz": 108, "environ": 108, "arriv": 108, "barrier": 108, "op": [108, 110], "drop_cach": 109, "functional_reservoir": 109, "batch_c": 109, "bigx": 109, "bigi": 109, "__init__": [109, 117], "give_index": 109, "get_grad_scor": 109, "batch_x": 109, "batch_i": 109, "reset_fathom": 109, "customkorniarandaug": 110, "n": 110, "polici": 110, "policyaugmentbas": 110, "randaug": 110, "rand_selector": 110, "categor": 110, "_getpolici": 110, "magnitud": 110, "compose_subpolicy_sequenti": 110, "subpolici": 110, "get_forward_sequ": 110, "forward_paramet": 110, "policysequenti": 110, "batch_shap": 110, "paramitem": 110, "augmentationsequenti": 110, "arbitrari": 110, "_do_transform": 110, "union": 110, "augmentationbase2d": 110, "setting_str": 111, "dataset_str": 111, "model_str": 111, "add_bwt": 111, "results_mask_class": 111, "add_forget": 111, "add_fwt": 111, "acc": 111, "accs_mask_class": 111, "dump": 111, "dic": 111, "mean_acc": 111, "ndarrai": 111, "log_fullacc": 111, "rewind": 111, "num": 111, "write": 111, "ani": [111, 123], "log_acc": [111, 125], "result_": 111, "print_mean_accuraci": 111, "task_numb": [111, 120], "persistent_loc": 112, "func": 112, "decor": 112, "my_funct": 112, "clear_loc": 112, "orchestr": 113, "compon": 113, "lecun_fix": 113, "backward_transf": 114, "forward_transf": 114, "random_result": 114, "baselin": [114, 128, 130], "force_lambda": 115, "forc": 115, "than": 115, "ring": 117, "ringbuff": 117, "buffer_portion_s": 117, "cosineschedul": 118, "cosin": 118, "base_lr": 118, "get_lr": 118, "yonglong": 119, "tian": 119, "mit": 119, "edu": 119, "date": 119, "07": 119, "hobbitlong": 119, "supcontrast": 119, "supconloss": 119, "temperatur": 119, "contrast_mod": 119, "base_temperatur": 119, "contrast": [119, 128, 130], "2004": 119, "11362": 119, "simclr": 119, "degener": 119, "2002": 119, "05709": 119, "bsz": 119, "n_view": 119, "mask_": 119, "j": 119, "asymmetr": 119, "scalar": [119, 122], "progressbar": 120, "prog": 120, "max_it": 120, "progress_bar": 120, "hand": 121, "initialize_wandb": 121, "mask_class": 121, "former": 121, "inf": 121, "logger": [121, 123, 125], "batch_hard_triplet_loss": 122, "margin_typ": 122, "build": 122, "anchor": [122, 128, 130], "hardest": 122, "hard": 122, "exp": 122, "max": [122, 128, 130], "negative_only_triplet_loss": 122, "variant": 122, "base_checkpoint_nam": 123, "_": 123, "timestamp": 123, "d": 123, "mesur": 123, "machin": [123, 124, 127, 128, 130], "remot": 123, "scratch": 123, "regardless": 123, "presenc": 123, "via": [124, 128, 130], "across": 124, "averag": 124, "now": 124, "difficulti": 124, "experiment": 124, "slurm": [124, 127], "cluster": [124, 127], "pip": [125, 128, 130], "txt": [125, 127], "directori": 125, "about": 125, "pyd": 125, "advanc": [125, 128, 130], "ai": 125, "don": 125, "omit": 125, "loss1": 125, "loss2": 125, "further": [125, 128, 130], "analysi": [125, 128, 130], "parsev": 125, "results_": 125, "ensur": 125, "expect": 125, "pytest": 125, "develop": 127, "prepare_grid": 127, "grid_combin": 127, "job": 127, "experiment_nam": 127, "launch": 127, "grid": 127, "local_launch": 127, "paralel": 127, "redund": 127, "at_a_tim": 127, "revers": 127, "slurm_sbatch": 127, "redirect": 127, "err": 127, "cycl": 127, "partit": 127, "account": 127, "00": 127, "dry": 127, "submit": 127, "wandb_sync": 127, "facilit": 127, "sync": 127, "offlin": 127, "n_worker": 127, "core": 127, "vers": [128, 130], "dark": [128, 130], "modular": [128, 130], "easi": [128, 130], "importantli": [128, 130], "idelli": [128, 130], "With": [128, 130], "stone": [128, 130], "join": [128, 130], "discord": [128, 130], "server": [128, 130], "question": [128, 130], "shield": [128, 130], "discordapp": [128, 130], "api": [128, 130], "guild": [128, 130], "1164956257392799860": [128, 130], "widget": [128, 130], "png": [128, 130], "load_best_arg": [128, 130], "lifelong": [128, 130], "consist": [128, 130], "onlin": [128, 130], "elast": [128, 130], "consolid": [128, 130], "oewc": [128, 130], "distanc": [128, 130], "greedi": [128, 130], "sampler": [128, 130], "dumb": [128, 130], "learner": [128, 130], "episod": [128, 130], "unavail": [128, 130], "window": [128, 130], "hindsight": [128, 130], "unifi": [128, 130], "rebalanc": [128, 130], "meta": [128, 130], "polytop": [128, 130], "synapt": [128, 130], "intellig": [128, 130], "slow": [128, 130], "align": [128, 130], "track": [128, 130], "git": [128, 130], "cub": [128, 130], "svhn": [128, 130], "articl": [128, 130], "boschini2022class": [128, 130], "titl": [128, 130], "boschini": [128, 130], "matteo": [128, 130], "bonicelli": [128, 130], "lorenzo": [128, 130], "buzzega": [128, 130], "pietro": [128, 130], "porrello": [128, 130], "angelo": [128, 130], "calderara": [128, 130], "simon": [128, 130], "journal": [128, 130], "ieee": [128, 130], "transact": [128, 130], "pattern": [128, 130], "year": [128, 130], "2022": [128, 130], "publish": [128, 130], "inproceed": [128, 130], "buzzega2020dark": [128, 130], "abati": [128, 130], "david": [128, 130], "booktitl": [128, 130], "system": [128, 130], "editor": [128, 130], "larochel": [128, 130], "ranzato": [128, 130], "hadsel": [128, 130], "f": [128, 130], "balcan": [128, 130], "lin": [128, 130], "page": [128, 130], "15920": [128, 130], "15930": [128, 130], "curran": [128, 130], "inc": [128, 130], "volum": [128, 130], "33": [128, 130], "neurip": [128, 130], "icpr": [128, 130], "tpami": [128, 130], "effect": [128, 130], "auxiliari": [128, 130], "knowledg": [128, 130], "eccv": [128, 130], "semi": [128, 130], "prl": [128, 130], "On": [128, 130], "driven": [128, 130], "insight": [128, 130], "reduc": [128, 130], "abrupt": [128, 130], "iclr2022": [128, 130], "fast": [128, 130], "cvpr2022": [128, 130], "variat": [128, 130], "tmlr": [128, 130], "2023": [128, 130], "mitig": [128, 130], "catastroph": [128, 130], "collas2022": [128, 130], "nispa": [128, 130], "neuro": [128, 130], "stabil": [128, 130], "plastic": [128, 130], "spars": [128, 130], "icml2022": [128, 130], "student": [128, 130], "ijcai2022": [128, 130], "futur": [128, 130], "we": [128, 130], "plan": [128, 130], "incorpor": [128, 130], "improv": [128, 130], "pull": [128, 130], "touch": [128, 130], "pleas": [128, 130], "autopep8": [128, 130], "aggress": [128, 130], "e402": [128, 130], "interest": [128, 130], "repo": [128, 130], "tag": [128, 130], "neurips2020": [128, 130], "tpami2023": [128, 130]}, "objects": {"": [[2, 0, 0, "-", "backbone"], [11, 0, 0, "module-0", "datasets"], [35, 0, 0, "module-0", "models"], [99, 0, 0, "module-0", "utils"]], "backbone": [[3, 0, 0, "-", "EfficientNet"], [4, 0, 0, "-", "MNISTMLP"], [5, 0, 0, "-", "MNISTMLP_PNN"], [2, 1, 1, "", "MammothBackbone"], [6, 0, 0, "-", "ResNet18"], [7, 0, 0, "-", "ResNet18_PNN"], [8, 0, 0, "-", "ResNet50"], [2, 3, 1, "", "num_flat_features"], [9, 0, 0, "-", "utils"], [2, 3, 1, "", "xavier"]], "backbone.EfficientNet": [[3, 1, 1, "", "BlockDecoder"], [3, 1, 1, "", "Conv2dDynamicSamePadding"], [3, 1, 1, "", "Conv2dStaticSamePadding"], [3, 1, 1, "", "EfficientNet"], [3, 1, 1, "", "MBConvBlock"], [3, 1, 1, "", "MemoryEfficientSwish"], [3, 1, 1, "", "SwishImplementation"], [3, 3, 1, "", "calculate_output_image_size"], [3, 3, 1, "", "drop_connect"], [3, 3, 1, "", "efficientnet"], [3, 3, 1, "", "efficientnet_params"], [3, 3, 1, "", "efficientnet_tf"], [3, 3, 1, "", "get_model_params"], [3, 3, 1, "", "get_model_params_tf"], [3, 3, 1, "", "get_same_padding_conv2d"], [3, 3, 1, "", "get_width_and_height_from_size"], [3, 3, 1, "", "load_pretrained_weights"], [3, 3, 1, "", "mammoth_efficientnet"], [3, 3, 1, "", "round_filters"], [3, 3, 1, "", "round_repeats"]], "backbone.EfficientNet.BlockDecoder": [[3, 2, 1, "", "decode"], [3, 2, 1, "", "encode"]], "backbone.EfficientNet.Conv2dDynamicSamePadding": [[3, 2, 1, "", "forward"]], "backbone.EfficientNet.Conv2dStaticSamePadding": [[3, 2, 1, "", "forward"]], "backbone.EfficientNet.EfficientNet": [[3, 2, 1, "", "activations_hook"], [3, 2, 1, "", "extract_endpoints"], [3, 2, 1, "", "extract_features"], [3, 2, 1, "", "forward"], [3, 2, 1, "", "from_name"], [3, 2, 1, "", "from_pretrained"], [3, 2, 1, "", "get_image_size"], [3, 2, 1, "", "set_swish"]], "backbone.EfficientNet.MBConvBlock": [[3, 2, 1, "", "forward"], [3, 2, 1, "", "set_swish"]], "backbone.EfficientNet.MemoryEfficientSwish": [[3, 2, 1, "", "forward"]], "backbone.EfficientNet.SwishImplementation": [[3, 2, 1, "", "backward"], [3, 2, 1, "", "forward"]], "backbone.MNISTMLP": [[4, 1, 1, "", "MNISTMLP"]], "backbone.MNISTMLP.MNISTMLP": [[4, 2, 1, "", "forward"], [4, 2, 1, "", "reset_parameters"], [4, 2, 1, "", "to"]], "backbone.MNISTMLP_PNN": [[5, 1, 1, "", "MNISTMLP_PNN"]], "backbone.MNISTMLP_PNN.MNISTMLP_PNN": [[5, 2, 1, "", "forward"], [5, 2, 1, "", "reset_parameters"]], "backbone.MammothBackbone": [[2, 2, 1, "id0", "features"], [2, 2, 1, "id1", "forward"], [2, 2, 1, "id4", "get_grads"], [2, 2, 1, "id5", "get_grads_list"], [2, 2, 1, "id6", "get_params"], [2, 2, 1, "id7", "set_params"]], "backbone.ResNet18": [[6, 1, 1, "", "BasicBlock"], [6, 1, 1, "", "ResNet"], [6, 3, 1, "", "conv3x3"], [6, 3, 1, "", "resnet18"]], "backbone.ResNet18.BasicBlock": [[6, 4, 1, "", "expansion"], [6, 2, 1, "", "forward"]], "backbone.ResNet18.ResNet": [[6, 2, 1, "", "forward"], [6, 2, 1, "", "set_return_prerelu"], [6, 2, 1, "", "to"]], "backbone.ResNet18_PNN": [[7, 1, 1, "", "BasicBlockPnn"], [7, 1, 1, "", "ResNetPNN"], [7, 3, 1, "", "resnet18_pnn"]], "backbone.ResNet18_PNN.BasicBlockPnn": [[7, 2, 1, "", "forward"]], "backbone.ResNet18_PNN.ResNetPNN": [[7, 2, 1, "", "forward"]], "backbone.ResNet50": [[8, 1, 1, "", "Bottleneck"], [8, 1, 1, "", "ResNet"], [8, 3, 1, "", "conv1x1"], [8, 3, 1, "", "conv3x3"], [8, 3, 1, "", "resnet50"]], "backbone.ResNet50.Bottleneck": [[8, 4, 1, "", "expansion"], [8, 2, 1, "", "forward"]], "backbone.ResNet50.ResNet": [[8, 2, 1, "", "forward"], [8, 2, 1, "", "set_grad_filter"], [8, 2, 1, "", "set_return_prerelu"], [8, 2, 1, "", "to"]], "backbone.utils": [[10, 0, 0, "-", "modules"]], "backbone.utils.modules": [[10, 1, 1, "", "AlphaModule"], [10, 1, 1, "", "ListModule"]], "backbone.utils.modules.AlphaModule": [[10, 2, 1, "", "forward"], [10, 2, 1, "", "parameters"]], "backbone.utils.modules.ListModule": [[10, 2, 1, "", "append"]], "datasets": [[12, 0, 0, "-", "deprecated"], [11, 3, 1, "", "get_all_datasets"], [11, 3, 1, "", "get_dataset"], [11, 3, 1, "", "get_dataset_class"], [11, 3, 1, "", "get_dataset_names"], [14, 0, 0, "-", "imagenet_r_utils"], [15, 0, 0, "-", "mnist_360"], [16, 0, 0, "-", "perm_mnist"], [17, 0, 0, "-", "rot_mnist"], [18, 0, 0, "-", "seq_cifar10"], [19, 0, 0, "-", "seq_cifar100"], [20, 0, 0, "-", "seq_cifar100_224"], [21, 0, 0, "-", "seq_cifar100_224_rs"], [22, 0, 0, "-", "seq_cub200"], [23, 0, 0, "-", "seq_imagenet_r"], [24, 0, 0, "-", "seq_mnist"], [25, 0, 0, "-", "seq_tinyimagenet"], [26, 0, 0, "-", "seq_tinyimagenet_r"], [27, 0, 0, "-", "transforms"], [31, 0, 0, "-", "utils"]], "datasets.deprecated": [[13, 0, 0, "-", "old_mnist_360"]], "datasets.deprecated.old_mnist_360": [[13, 1, 1, "", "MNIST360"]], "datasets.deprecated.old_mnist_360.MNIST360": [[13, 4, 1, "", "LENGTH"], [13, 4, 1, "", "NAME"], [13, 4, 1, "", "N_CLASSES"], [13, 4, 1, "", "SETTING"], [13, 2, 1, "", "get_backbone"], [13, 2, 1, "", "get_batch_size"], [13, 2, 1, "", "get_denormalization_transform"], [13, 2, 1, "", "get_loss"], [13, 2, 1, "", "get_minibatch_size"], [13, 2, 1, "", "get_test_data"], [13, 2, 1, "", "get_train_data"], [13, 2, 1, "", "get_transform"], [13, 2, 1, "", "init_test_loaders"], [13, 2, 1, "", "init_train_loaders"], [13, 2, 1, "", "train_next_class"]], "datasets.mnist_360": [[15, 1, 1, "", "MNIST360"], [15, 1, 1, "", "SequentialMNIST360"], [15, 3, 1, "", "custom_collate_unbatch"]], "datasets.mnist_360.MNIST360": [[15, 4, 1, "id0", "N_CLASSES"], [15, 4, 1, "", "active_train_loaders"], [15, 4, 1, "", "args"], [15, 4, 1, "", "completed_rounds"], [15, 4, 1, "", "current_items"], [15, 4, 1, "", "dataset"], [15, 2, 1, "", "get_test_data"], [15, 2, 1, "", "get_train_data"], [15, 2, 1, "", "init_test_loaders"], [15, 2, 1, "", "init_train_loaders"], [15, 4, 1, "", "is_over"], [15, 4, 1, "", "is_train"], [15, 4, 1, "", "num_rounds"], [15, 2, 1, "", "reinit"], [15, 4, 1, "", "remaining_training_items"], [15, 4, 1, "", "test_class"], [15, 4, 1, "", "test_iteration"], [15, 4, 1, "", "train_classes"], [15, 2, 1, "", "train_next_class"]], "datasets.mnist_360.SequentialMNIST360": [[15, 4, 1, "id1", "NAME"], [15, 4, 1, "id2", "N_CLASSES"], [15, 4, 1, "id3", "SETTING"], [15, 4, 1, "id4", "SIZE"], [15, 4, 1, "id5", "TRANSFORM"], [15, 4, 1, "", "args"], [15, 2, 1, "", "get_backbone"], [15, 2, 1, "", "get_batch_size"], [15, 2, 1, "", "get_data_loaders"], [15, 2, 1, "", "get_denormalization_transform"], [15, 2, 1, "", "get_epochs"], [15, 2, 1, "", "get_loss"], [15, 2, 1, "", "get_normalization_transform"], [15, 2, 1, "", "get_transform"]], "datasets.perm_mnist": [[16, 1, 1, "", "MyMNIST"], [16, 1, 1, "", "PermutedMNIST"]], "datasets.perm_mnist.PermutedMNIST": [[16, 4, 1, "", "NAME"], [16, 4, 1, "", "N_CLASSES_PER_TASK"], [16, 4, 1, "", "N_TASKS"], [16, 4, 1, "", "SETTING"], [16, 4, 1, "", "SIZE"], [16, 2, 1, "", "get_backbone"], [16, 2, 1, "", "get_batch_size"], [16, 2, 1, "", "get_data_loaders"], [16, 2, 1, "", "get_denormalization_transform"], [16, 2, 1, "", "get_epochs"], [16, 2, 1, "", "get_loss"], [16, 2, 1, "", "get_normalization_transform"], [16, 2, 1, "", "get_transform"]], "datasets.rot_mnist": [[17, 1, 1, "", "RotatedMNIST"]], "datasets.rot_mnist.RotatedMNIST": [[17, 4, 1, "", "NAME"], [17, 4, 1, "", "N_CLASSES"], [17, 4, 1, "", "N_CLASSES_PER_TASK"], [17, 4, 1, "", "N_TASKS"], [17, 4, 1, "", "SETTING"], [17, 4, 1, "", "SIZE"], [17, 2, 1, "", "get_backbone"], [17, 2, 1, "", "get_batch_size"], [17, 2, 1, "", "get_data_loaders"], [17, 2, 1, "", "get_denormalization_transform"], [17, 2, 1, "", "get_epochs"], [17, 2, 1, "", "get_loss"], [17, 2, 1, "", "get_normalization_transform"], [17, 2, 1, "", "get_transform"]], "datasets.seq_cifar10": [[18, 1, 1, "", "MyCIFAR10"], [18, 1, 1, "", "SequentialCIFAR10"], [18, 1, 1, "", "TCIFAR10"]], "datasets.seq_cifar10.SequentialCIFAR10": [[18, 4, 1, "", "MEAN"], [18, 4, 1, "", "NAME"], [18, 4, 1, "", "N_CLASSES"], [18, 4, 1, "", "N_CLASSES_PER_TASK"], [18, 4, 1, "", "N_TASKS"], [18, 4, 1, "", "SETTING"], [18, 4, 1, "", "SIZE"], [18, 4, 1, "", "STD"], [18, 4, 1, "", "TRANSFORM"], [18, 2, 1, "", "get_backbone"], [18, 2, 1, "", "get_batch_size"], [18, 2, 1, "", "get_data_loaders"], [18, 2, 1, "", "get_denormalization_transform"], [18, 2, 1, "", "get_epochs"], [18, 2, 1, "", "get_loss"], [18, 2, 1, "", "get_normalization_transform"], [18, 2, 1, "", "get_transform"]], "datasets.seq_cifar100": [[19, 1, 1, "", "MyCIFAR100"], [19, 1, 1, "", "SequentialCIFAR100"], [19, 1, 1, "", "TCIFAR100"]], "datasets.seq_cifar100.SequentialCIFAR100": [[19, 4, 1, "", "MEAN"], [19, 4, 1, "", "NAME"], [19, 4, 1, "", "N_CLASSES"], [19, 4, 1, "", "N_CLASSES_PER_TASK"], [19, 4, 1, "", "N_TASKS"], [19, 4, 1, "", "SETTING"], [19, 4, 1, "", "SIZE"], [19, 4, 1, "", "STD"], [19, 4, 1, "", "TRANSFORM"], [19, 2, 1, "", "get_backbone"], [19, 2, 1, "", "get_batch_size"], [19, 2, 1, "", "get_data_loaders"], [19, 2, 1, "", "get_denormalization_transform"], [19, 2, 1, "", "get_epochs"], [19, 2, 1, "", "get_examples_number"], [19, 2, 1, "", "get_loss"], [19, 2, 1, "", "get_normalization_transform"], [19, 2, 1, "", "get_scheduler"], [19, 2, 1, "", "get_transform"]], "datasets.seq_cifar100_224": [[20, 1, 1, "", "SequentialCIFAR100224"]], "datasets.seq_cifar100_224.SequentialCIFAR100224": [[20, 4, 1, "", "MEAN"], [20, 4, 1, "", "NAME"], [20, 4, 1, "", "N_CLASSES"], [20, 4, 1, "", "N_CLASSES_PER_TASK"], [20, 4, 1, "", "N_TASKS"], [20, 4, 1, "", "SETTING"], [20, 4, 1, "", "SIZE"], [20, 4, 1, "", "STD"], [20, 4, 1, "", "TEST_TRANSFORM"], [20, 4, 1, "", "TRANSFORM"], [20, 2, 1, "", "get_backbone"], [20, 2, 1, "", "get_batch_size"], [20, 2, 1, "", "get_data_loaders"], [20, 2, 1, "", "get_denormalization_transform"], [20, 2, 1, "", "get_epochs"], [20, 2, 1, "", "get_loss"], [20, 2, 1, "", "get_normalization_transform"], [20, 2, 1, "", "get_transform"]], "datasets.seq_cifar100_224_rs": [[21, 1, 1, "", "SequentialCIFAR100224RS"]], "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS": [[21, 4, 1, "", "MEAN"], [21, 4, 1, "", "NAME"], [21, 4, 1, "", "N_CLASSES"], [21, 4, 1, "", "N_CLASSES_PER_TASK"], [21, 4, 1, "", "N_TASKS"], [21, 4, 1, "", "SETTING"], [21, 4, 1, "", "SIZE"], [21, 4, 1, "", "STD"], [21, 4, 1, "", "TEST_TRANSFORM"], [21, 4, 1, "", "TRANSFORM"], [21, 2, 1, "", "get_backbone"], [21, 2, 1, "", "get_batch_size"], [21, 2, 1, "", "get_data_loaders"], [21, 2, 1, "", "get_denormalization_transform"], [21, 2, 1, "", "get_epochs"], [21, 2, 1, "", "get_loss"], [21, 2, 1, "", "get_normalization_transform"], [21, 2, 1, "", "get_transform"]], "datasets.seq_cub200": [[22, 1, 1, "", "CUB200"], [22, 1, 1, "", "MyCUB200"], [22, 1, 1, "", "SequentialCUB200"]], "datasets.seq_cub200.MyCUB200": [[22, 4, 1, "", "IMG_SIZE"], [22, 4, 1, "", "MEAN"], [22, 4, 1, "", "N_CLASSES"], [22, 4, 1, "", "STD"], [22, 4, 1, "", "TEST_TRANSFORM"]], "datasets.seq_cub200.SequentialCUB200": [[22, 4, 1, "", "MEAN"], [22, 4, 1, "", "NAME"], [22, 4, 1, "", "N_CLASSES_PER_TASK"], [22, 4, 1, "", "N_TASKS"], [22, 4, 1, "", "SETTING"], [22, 4, 1, "", "SIZE"], [22, 4, 1, "", "STD"], [22, 4, 1, "", "TEST_TRANSFORM"], [22, 4, 1, "", "TRANSFORM"], [22, 2, 1, "", "get_backbone"], [22, 2, 1, "", "get_batch_size"], [22, 2, 1, "", "get_data_loaders"], [22, 2, 1, "", "get_denormalization_transform"], [22, 2, 1, "", "get_epochs"], [22, 2, 1, "", "get_loss"], [22, 2, 1, "", "get_normalization_transform"], [22, 2, 1, "", "get_transform"]], "datasets.seq_imagenet_r": [[23, 1, 1, "", "MyImagenetR"], [23, 1, 1, "", "SequentialImagenetR"]], "datasets.seq_imagenet_r.MyImagenetR": [[23, 4, 1, "", "N_CLASSES"]], "datasets.seq_imagenet_r.SequentialImagenetR": [[23, 4, 1, "", "NAME"], [23, 4, 1, "", "N_CLASSES"], [23, 4, 1, "", "N_CLASSES_PER_TASK"], [23, 4, 1, "", "N_TASKS"], [23, 4, 1, "", "SETTING"], [23, 4, 1, "", "SIZE"], [23, 4, 1, "", "TEST_TRANSFORM"], [23, 4, 1, "", "TRANSFORM"], [23, 2, 1, "", "get_backbone"], [23, 2, 1, "", "get_batch_size"], [23, 2, 1, "", "get_class_names"], [23, 2, 1, "", "get_data_loaders"], [23, 2, 1, "", "get_denormalization_transform"], [23, 2, 1, "", "get_epochs"], [23, 2, 1, "", "get_loss"], [23, 2, 1, "", "get_n_epochs_first_stage"], [23, 2, 1, "", "get_normalization_transform"], [23, 2, 1, "", "get_prompt_templates"], [23, 2, 1, "", "get_transform"], [23, 2, 1, "", "get_virtual_bn_num"], [23, 4, 1, "", "normalize"]], "datasets.seq_mnist": [[24, 1, 1, "", "MyMNIST"], [24, 1, 1, "", "SequentialMNIST"]], "datasets.seq_mnist.SequentialMNIST": [[24, 4, 1, "", "NAME"], [24, 4, 1, "", "N_CLASSES"], [24, 4, 1, "", "N_CLASSES_PER_TASK"], [24, 4, 1, "", "N_TASKS"], [24, 4, 1, "", "SETTING"], [24, 4, 1, "", "SIZE"], [24, 4, 1, "", "TRANSFORM"], [24, 2, 1, "", "get_backbone"], [24, 2, 1, "", "get_batch_size"], [24, 2, 1, "", "get_data_loaders"], [24, 2, 1, "", "get_denormalization_transform"], [24, 2, 1, "", "get_epochs"], [24, 2, 1, "", "get_loss"], [24, 2, 1, "", "get_normalization_transform"], [24, 2, 1, "", "get_transform"]], "datasets.seq_tinyimagenet": [[25, 1, 1, "", "MyTinyImagenet"], [25, 1, 1, "", "SequentialTinyImagenet"], [25, 1, 1, "", "TinyImagenet"]], "datasets.seq_tinyimagenet.SequentialTinyImagenet": [[25, 4, 1, "", "MEAN"], [25, 4, 1, "", "NAME"], [25, 4, 1, "", "N_CLASSES"], [25, 4, 1, "", "N_CLASSES_PER_TASK"], [25, 4, 1, "", "N_TASKS"], [25, 4, 1, "", "SETTING"], [25, 4, 1, "", "SIZE"], [25, 4, 1, "", "STD"], [25, 4, 1, "", "TRANSFORM"], [25, 2, 1, "", "get_backbone"], [25, 2, 1, "", "get_batch_size"], [25, 2, 1, "", "get_data_loaders"], [25, 2, 1, "", "get_denormalization_transform"], [25, 2, 1, "", "get_epochs"], [25, 2, 1, "", "get_loss"], [25, 2, 1, "", "get_normalization_transform"], [25, 2, 1, "", "get_transform"]], "datasets.seq_tinyimagenet_r": [[26, 1, 1, "", "SequentialTinyImagenet32R"]], "datasets.seq_tinyimagenet_r.SequentialTinyImagenet32R": [[26, 4, 1, "", "MEAN"], [26, 4, 1, "", "NAME"], [26, 4, 1, "", "STD"], [26, 4, 1, "", "TEST_TRANSFORM"], [26, 4, 1, "", "TRANSFORM"]], "datasets.transforms": [[28, 0, 0, "-", "denormalization"], [29, 0, 0, "-", "permutation"], [30, 0, 0, "-", "rotation"]], "datasets.transforms.denormalization": [[28, 1, 1, "", "DeNormalize"]], "datasets.transforms.permutation": [[29, 1, 1, "", "FixedPermutation"], [29, 1, 1, "", "Permutation"]], "datasets.transforms.rotation": [[30, 1, 1, "", "FixedRotation"], [30, 1, 1, "", "IncrementalRotation"], [30, 1, 1, "", "Rotation"]], "datasets.transforms.rotation.IncrementalRotation": [[30, 2, 1, "", "set_iteration"]], "datasets.utils": [[32, 0, 0, "-", "continual_dataset"], [33, 0, 0, "-", "gcl_dataset"], [34, 0, 0, "-", "validation"]], "datasets.utils.continual_dataset": [[32, 1, 1, "", "ContinualDataset"], [32, 4, 1, "", "setting"], [32, 3, 1, "", "store_masked_loaders"], [32, 4, 1, "", "test_dataset"], [32, 4, 1, "", "train_dataset"]], "datasets.utils.continual_dataset.ContinualDataset": [[32, 4, 1, "", "AVAIL_SCHEDS"], [32, 4, 1, "id0", "NAME"], [32, 4, 1, "id1", "N_CLASSES"], [32, 4, 1, "id2", "N_CLASSES_PER_TASK"], [32, 4, 1, "id3", "N_TASKS"], [32, 4, 1, "id4", "SETTING"], [32, 4, 1, "id5", "SIZE"], [32, 4, 1, "", "args"], [32, 4, 1, "", "c_task"], [32, 2, 1, "", "get_backbone"], [32, 2, 1, "", "get_batch_size"], [32, 2, 1, "", "get_data_loaders"], [32, 2, 1, "", "get_denormalization_transform"], [32, 2, 1, "", "get_epochs"], [32, 2, 1, "", "get_loss"], [32, 2, 1, "", "get_minibatch_size"], [32, 2, 1, "", "get_normalization_transform"], [32, 2, 1, "", "get_offsets"], [32, 2, 1, "", "get_scheduler"], [32, 2, 1, "", "get_transform"], [32, 4, 1, "", "i"], [32, 4, 1, "", "test_loaders"], [32, 4, 1, "", "train_loader"]], "datasets.utils.gcl_dataset": [[33, 1, 1, "", "GCLDataset"]], "datasets.utils.gcl_dataset.GCLDataset": [[33, 4, 1, "", "NAME"], [33, 4, 1, "", "N_CLASSES"], [33, 4, 1, "", "N_CLASSES_PER_TASK"], [33, 4, 1, "", "N_TASKS"], [33, 4, 1, "", "SETTING"], [33, 4, 1, "", "SIZE"], [33, 2, 1, "", "get_epochs"]], "datasets.utils.validation": [[34, 1, 1, "", "ValidationDataset"], [34, 3, 1, "", "get_train_val"]], "models": [[36, 0, 0, "-", "agem"], [37, 0, 0, "-", "agem_r"], [38, 0, 0, "-", "bic"], [39, 0, 0, "-", "ccic"], [40, 0, 0, "-", "coda_prompt"], [41, 0, 0, "-", "coda_prompt_utils"], [44, 0, 0, "-", "deprecated"], [46, 0, 0, "-", "der"], [47, 0, 0, "-", "derpp"], [48, 0, 0, "-", "derpp_lider"], [49, 0, 0, "-", "dualprompt"], [50, 0, 0, "-", "dualprompt_utils"], [55, 0, 0, "-", "er"], [56, 0, 0, "-", "er_ace"], [57, 0, 0, "-", "er_ace_lider"], [58, 0, 0, "-", "ewc_on"], [59, 0, 0, "-", "fdr"], [60, 0, 0, "-", "gdumb"], [61, 0, 0, "-", "gdumb_lider"], [62, 0, 0, "-", "gem"], [35, 3, 1, "", "get_all_models"], [35, 3, 1, "", "get_model"], [35, 3, 1, "", "get_model_class"], [35, 3, 1, "", "get_model_names"], [63, 0, 0, "-", "gss"], [64, 0, 0, "-", "hal"], [65, 0, 0, "-", "icarl"], [66, 0, 0, "-", "icarl_lider"], [67, 0, 0, "-", "joint_gcl"], [68, 0, 0, "-", "l2p"], [69, 0, 0, "-", "l2p_utils"], [73, 0, 0, "-", "lucir"], [74, 0, 0, "-", "lwf"], [75, 0, 0, "-", "lwf_mc"], [76, 0, 0, "-", "mer"], [77, 0, 0, "-", "pnn"], [78, 0, 0, "-", "rpc"], [79, 0, 0, "-", "sgd"], [80, 0, 0, "-", "si"], [81, 0, 0, "-", "slca_utils"], [89, 0, 0, "-", "twf"], [90, 0, 0, "-", "twf_utils"], [93, 0, 0, "-", "utils"], [96, 0, 0, "-", "xder"], [97, 0, 0, "-", "xder_ce"], [98, 0, 0, "-", "xder_rpc"]], "models.agem": [[36, 1, 1, "", "AGem"], [36, 3, 1, "", "project"]], "models.agem.AGem": [[36, 4, 1, "", "COMPATIBILITY"], [36, 4, 1, "", "NAME"], [36, 2, 1, "", "end_task"], [36, 2, 1, "", "get_parser"], [36, 2, 1, "", "observe"]], "models.agem_r": [[37, 1, 1, "", "AGemr"]], "models.agem_r.AGemr": [[37, 4, 1, "", "COMPATIBILITY"], [37, 4, 1, "", "NAME"], [37, 2, 1, "", "get_parser"], [37, 2, 1, "", "observe"]], "models.bic": [[38, 1, 1, "", "BiC"]], "models.bic.BiC": [[38, 4, 1, "", "COMPATIBILITY"], [38, 4, 1, "", "NAME"], [38, 2, 1, "", "begin_task"], [38, 2, 1, "", "build_buffer"], [38, 2, 1, "", "end_task"], [38, 2, 1, "", "evaluate_bias"], [38, 2, 1, "", "forward"], [38, 2, 1, "", "get_parser"], [38, 2, 1, "", "observe"]], "models.ccic": [[39, 1, 1, "", "Ccic"]], "models.ccic.Ccic": [[39, 4, 1, "", "COMPATIBILITY"], [39, 4, 1, "", "NAME"], [39, 2, 1, "", "compute_embeddings"], [39, 2, 1, "", "discard_supervised_labels"], [39, 2, 1, "", "discard_unsupervised_labels"], [39, 2, 1, "", "end_epoch"], [39, 2, 1, "", "end_task"], [39, 2, 1, "", "forward"], [39, 2, 1, "", "get_debug_iters"], [39, 2, 1, "", "get_parser"], [39, 2, 1, "", "observe"]], "models.coda_prompt": [[40, 1, 1, "", "CodaPrompt"]], "models.coda_prompt.CodaPrompt": [[40, 4, 1, "", "COMPATIBILITY"], [40, 4, 1, "", "NAME"], [40, 2, 1, "", "begin_task"], [40, 2, 1, "", "forward"], [40, 2, 1, "", "get_optimizer"], [40, 2, 1, "", "get_parser"], [40, 2, 1, "", "observe"]], "models.coda_prompt_utils": [[42, 0, 0, "-", "model"], [43, 0, 0, "-", "vit"]], "models.coda_prompt_utils.model": [[42, 1, 1, "", "CodaPrompt"], [42, 1, 1, "", "Model"], [42, 3, 1, "", "ortho_penalty"], [42, 3, 1, "", "tensor_prompt"]], "models.coda_prompt_utils.model.CodaPrompt": [[42, 2, 1, "", "forward"], [42, 2, 1, "", "gram_schmidt"], [42, 2, 1, "", "process_task_count"]], "models.coda_prompt_utils.model.Model": [[42, 2, 1, "", "forward"]], "models.coda_prompt_utils.vit": [[43, 1, 1, "", "Attention"], [43, 1, 1, "", "Block"], [43, 1, 1, "", "Mlp"], [43, 1, 1, "", "VisionTransformer"]], "models.coda_prompt_utils.vit.Attention": [[43, 2, 1, "", "forward"], [43, 2, 1, "", "get_attention_map"], [43, 2, 1, "", "get_attn_gradients"], [43, 2, 1, "", "save_attention_map"], [43, 2, 1, "", "save_attn_gradients"]], "models.coda_prompt_utils.vit.Block": [[43, 2, 1, "", "forward"]], "models.coda_prompt_utils.vit.Mlp": [[43, 2, 1, "", "forward"]], "models.coda_prompt_utils.vit.VisionTransformer": [[43, 2, 1, "", "forward"], [43, 2, 1, "", "no_weight_decay"]], "models.deprecated": [[45, 0, 0, "-", "joint"]], "models.deprecated.joint": [[45, 1, 1, "", "Joint"], [45, 3, 1, "", "get_parser"]], "models.deprecated.joint.Joint": [[45, 4, 1, "id0", "COMPATIBILITY"], [45, 4, 1, "id1", "NAME"], [45, 2, 1, "", "end_task"], [45, 2, 1, "", "observe"]], "models.der": [[46, 1, 1, "", "Der"]], "models.der.Der": [[46, 4, 1, "", "COMPATIBILITY"], [46, 4, 1, "", "NAME"], [46, 2, 1, "", "get_parser"], [46, 2, 1, "", "observe"]], "models.derpp": [[47, 1, 1, "", "Derpp"]], "models.derpp.Derpp": [[47, 4, 1, "", "COMPATIBILITY"], [47, 4, 1, "", "NAME"], [47, 2, 1, "", "get_parser"], [47, 2, 1, "", "observe"]], "models.derpp_lider": [[48, 1, 1, "", "DerppLider"]], "models.derpp_lider.DerppLider": [[48, 4, 1, "", "COMPATIBILITY"], [48, 4, 1, "", "NAME"], [48, 2, 1, "", "begin_task"], [48, 2, 1, "", "get_parser"], [48, 2, 1, "", "observe"]], "models.dualprompt": [[49, 1, 1, "", "DualPrompt"]], "models.dualprompt.DualPrompt": [[49, 4, 1, "", "COMPATIBILITY"], [49, 4, 1, "", "NAME"], [49, 2, 1, "", "begin_task"], [49, 2, 1, "", "forward"], [49, 2, 1, "", "get_parameters"], [49, 2, 1, "", "get_parser"], [49, 2, 1, "", "observe"]], "models.dualprompt_utils": [[51, 0, 0, "-", "attention"], [52, 0, 0, "-", "model"], [53, 0, 0, "-", "prompt"], [54, 0, 0, "-", "vision_transformer"]], "models.dualprompt_utils.attention": [[51, 1, 1, "", "PreT_Attention"]], "models.dualprompt_utils.attention.PreT_Attention": [[51, 2, 1, "", "forward"]], "models.dualprompt_utils.model": [[52, 1, 1, "", "Model"]], "models.dualprompt_utils.model.Model": [[52, 2, 1, "", "forward"]], "models.dualprompt_utils.prompt": [[53, 1, 1, "", "EPrompt"]], "models.dualprompt_utils.prompt.EPrompt": [[53, 2, 1, "", "forward"], [53, 2, 1, "", "l2_normalize"]], "models.dualprompt_utils.vision_transformer": [[54, 1, 1, "", "Attention"], [54, 1, 1, "", "Block"], [54, 1, 1, "", "LayerScale"], [54, 1, 1, "", "ParallelBlock"], [54, 1, 1, "", "ResPostBlock"], [54, 1, 1, "", "VisionTransformer"], [54, 3, 1, "", "checkpoint_filter_fn"], [54, 3, 1, "", "get_init_weights_vit"], [54, 3, 1, "", "init_weights_vit_jax"], [54, 3, 1, "", "init_weights_vit_moco"], [54, 3, 1, "", "init_weights_vit_timm"], [54, 3, 1, "", "resize_pos_embed"], [54, 3, 1, "", "vit_base_patch16_224_dualprompt"]], "models.dualprompt_utils.vision_transformer.Attention": [[54, 2, 1, "", "forward"]], "models.dualprompt_utils.vision_transformer.Block": [[54, 2, 1, "", "forward"]], "models.dualprompt_utils.vision_transformer.LayerScale": [[54, 2, 1, "", "forward"]], "models.dualprompt_utils.vision_transformer.ParallelBlock": [[54, 2, 1, "", "forward"]], "models.dualprompt_utils.vision_transformer.ResPostBlock": [[54, 2, 1, "", "forward"], [54, 2, 1, "", "init_weights"]], "models.dualprompt_utils.vision_transformer.VisionTransformer": [[54, 2, 1, "", "forward"], [54, 2, 1, "", "forward_features"], [54, 2, 1, "", "forward_head"], [54, 2, 1, "", "get_classifier"], [54, 2, 1, "", "group_matcher"], [54, 2, 1, "", "init_weights"], [54, 2, 1, "", "load_pretrained"], [54, 2, 1, "", "no_weight_decay"], [54, 2, 1, "", "reset_classifier"], [54, 2, 1, "", "set_grad_checkpointing"]], "models.er": [[55, 1, 1, "", "Er"]], "models.er.Er": [[55, 4, 1, "", "COMPATIBILITY"], [55, 4, 1, "", "NAME"], [55, 2, 1, "", "get_parser"], [55, 2, 1, "", "observe"]], "models.er_ace": [[56, 1, 1, "", "ErACE"]], "models.er_ace.ErACE": [[56, 4, 1, "", "COMPATIBILITY"], [56, 4, 1, "", "NAME"], [56, 2, 1, "", "get_parser"], [56, 2, 1, "", "observe"]], "models.er_ace_lider": [[57, 1, 1, "", "ErACELider"]], "models.er_ace_lider.ErACELider": [[57, 4, 1, "", "COMPATIBILITY"], [57, 4, 1, "", "NAME"], [57, 2, 1, "", "begin_task"], [57, 2, 1, "", "get_parser"], [57, 2, 1, "", "observe"], [57, 2, 1, "", "to"]], "models.ewc_on": [[58, 1, 1, "", "EwcOn"]], "models.ewc_on.EwcOn": [[58, 4, 1, "", "COMPATIBILITY"], [58, 4, 1, "", "NAME"], [58, 2, 1, "", "end_task"], [58, 2, 1, "", "get_parser"], [58, 2, 1, "", "observe"], [58, 2, 1, "", "penalty"]], "models.fdr": [[59, 1, 1, "", "Fdr"]], "models.fdr.Fdr": [[59, 4, 1, "", "COMPATIBILITY"], [59, 4, 1, "", "NAME"], [59, 2, 1, "", "end_task"], [59, 2, 1, "", "get_parser"], [59, 2, 1, "", "observe"]], "models.gdumb": [[60, 1, 1, "", "GDumb"], [60, 3, 1, "", "fit_buffer"]], "models.gdumb.GDumb": [[60, 4, 1, "", "COMPATIBILITY"], [60, 4, 1, "", "NAME"], [60, 2, 1, "", "end_task"], [60, 2, 1, "", "get_parser"], [60, 2, 1, "", "observe"]], "models.gdumb_lider": [[61, 1, 1, "", "GDumbLider"], [61, 3, 1, "", "fit_buffer"], [61, 3, 1, "", "get_parser"]], "models.gdumb_lider.GDumbLider": [[61, 4, 1, "", "COMPATIBILITY"], [61, 4, 1, "", "NAME"], [61, 2, 1, "", "end_task"], [61, 2, 1, "", "get_parser"], [61, 2, 1, "", "observe"]], "models.gem": [[62, 1, 1, "", "Gem"], [62, 3, 1, "", "overwrite_grad"], [62, 3, 1, "", "project2cone2"], [62, 3, 1, "", "store_grad"]], "models.gem.Gem": [[62, 4, 1, "", "COMPATIBILITY"], [62, 4, 1, "", "NAME"], [62, 2, 1, "", "end_task"], [62, 2, 1, "", "get_parser"], [62, 2, 1, "", "observe"]], "models.gss": [[63, 1, 1, "", "Gss"]], "models.gss.Gss": [[63, 4, 1, "", "COMPATIBILITY"], [63, 4, 1, "", "NAME"], [63, 2, 1, "", "get_grads"], [63, 2, 1, "", "get_parser"], [63, 2, 1, "", "observe"]], "models.hal": [[64, 1, 1, "", "HAL"]], "models.hal.HAL": [[64, 4, 1, "", "COMPATIBILITY"], [64, 4, 1, "", "NAME"], [64, 2, 1, "", "end_task"], [64, 2, 1, "", "get_anchors"], [64, 2, 1, "", "get_parser"], [64, 2, 1, "", "observe"]], "models.icarl": [[65, 1, 1, "", "ICarl"]], "models.icarl.ICarl": [[65, 4, 1, "", "COMPATIBILITY"], [65, 4, 1, "", "NAME"], [65, 2, 1, "", "begin_task"], [65, 2, 1, "", "binary_cross_entropy"], [65, 2, 1, "", "compute_class_means"], [65, 2, 1, "", "end_task"], [65, 2, 1, "", "forward"], [65, 2, 1, "", "get_loss"], [65, 2, 1, "", "get_parser"], [65, 2, 1, "", "observe"]], "models.icarl_lider": [[66, 1, 1, "", "ICarlLider"]], "models.icarl_lider.ICarlLider": [[66, 4, 1, "", "COMPATIBILITY"], [66, 4, 1, "", "NAME"], [66, 2, 1, "", "begin_task"], [66, 2, 1, "", "binary_cross_entropy"], [66, 2, 1, "", "compute_class_means"], [66, 2, 1, "", "end_task"], [66, 2, 1, "", "forward"], [66, 2, 1, "", "get_loss"], [66, 2, 1, "", "get_parser"], [66, 2, 1, "", "observe"], [66, 2, 1, "", "to"]], "models.joint_gcl": [[67, 1, 1, "", "JointGCL"]], "models.joint_gcl.JointGCL": [[67, 4, 1, "", "COMPATIBILITY"], [67, 4, 1, "", "NAME"], [67, 2, 1, "", "end_task"], [67, 2, 1, "", "get_parser"], [67, 2, 1, "", "observe"]], "models.l2p": [[68, 1, 1, "", "L2P"]], "models.l2p.L2P": [[68, 4, 1, "", "COMPATIBILITY"], [68, 4, 1, "", "NAME"], [68, 2, 1, "", "begin_task"], [68, 2, 1, "", "forward"], [68, 2, 1, "", "get_parameters"], [68, 2, 1, "", "get_parser"], [68, 2, 1, "", "observe"]], "models.l2p_utils": [[70, 0, 0, "-", "l2p_model"], [71, 0, 0, "-", "prompt"], [72, 0, 0, "-", "vit_prompt"]], "models.l2p_utils.l2p_model": [[70, 1, 1, "", "L2PModel"]], "models.l2p_utils.l2p_model.L2PModel": [[70, 2, 1, "", "forward"]], "models.l2p_utils.prompt": [[71, 1, 1, "", "Prompt"]], "models.l2p_utils.prompt.Prompt": [[71, 2, 1, "", "forward"], [71, 2, 1, "", "l2_normalize"]], "models.l2p_utils.vit_prompt": [[72, 1, 1, "", "Attention"], [72, 1, 1, "", "Block"], [72, 1, 1, "", "LayerScale"], [72, 1, 1, "", "ParallelBlock"], [72, 1, 1, "", "ResPostBlock"], [72, 1, 1, "", "VisionTransformer"], [72, 3, 1, "", "checkpoint_filter_fn"], [72, 3, 1, "", "get_init_weights_vit"], [72, 3, 1, "", "init_weights_vit_jax"], [72, 3, 1, "", "init_weights_vit_moco"], [72, 3, 1, "", "init_weights_vit_timm"], [72, 3, 1, "", "resize_pos_embed"], [72, 3, 1, "", "vit_base_patch16_224_l2p"]], "models.l2p_utils.vit_prompt.Attention": [[72, 2, 1, "", "forward"]], "models.l2p_utils.vit_prompt.Block": [[72, 2, 1, "", "forward"]], "models.l2p_utils.vit_prompt.LayerScale": [[72, 2, 1, "", "forward"]], "models.l2p_utils.vit_prompt.ParallelBlock": [[72, 2, 1, "", "forward"]], "models.l2p_utils.vit_prompt.ResPostBlock": [[72, 2, 1, "", "forward"], [72, 2, 1, "", "init_weights"]], "models.l2p_utils.vit_prompt.VisionTransformer": [[72, 2, 1, "", "forward"], [72, 2, 1, "", "forward_features"], [72, 2, 1, "", "forward_head"], [72, 2, 1, "", "get_classifier"], [72, 2, 1, "", "group_matcher"], [72, 2, 1, "", "init_weights"], [72, 2, 1, "", "load_pretrained"], [72, 2, 1, "", "no_weight_decay"], [72, 2, 1, "", "reset_classifier"], [72, 2, 1, "", "set_grad_checkpointing"]], "models.lucir": [[73, 1, 1, "", "CustomClassifier"], [73, 1, 1, "", "Lucir"], [73, 3, 1, "", "lucir_batch_hard_triplet_loss"]], "models.lucir.CustomClassifier": [[73, 2, 1, "", "forward"], [73, 2, 1, "", "noscale_forward"], [73, 2, 1, "", "reset_parameters"], [73, 2, 1, "", "reset_weight"]], "models.lucir.Lucir": [[73, 4, 1, "", "COMPATIBILITY"], [73, 4, 1, "", "NAME"], [73, 2, 1, "", "begin_task"], [73, 2, 1, "", "end_task"], [73, 2, 1, "", "fit_buffer"], [73, 2, 1, "", "forward"], [73, 2, 1, "", "get_loss"], [73, 2, 1, "", "get_parser"], [73, 2, 1, "", "imprint_weights"], [73, 2, 1, "", "observe"], [73, 2, 1, "", "update_classifier"]], "models.lwf": [[74, 1, 1, "", "Lwf"], [74, 3, 1, "", "modified_kl_div"], [74, 3, 1, "", "smooth"]], "models.lwf.Lwf": [[74, 4, 1, "", "COMPATIBILITY"], [74, 4, 1, "", "NAME"], [74, 2, 1, "", "begin_task"], [74, 2, 1, "", "get_parser"], [74, 2, 1, "", "observe"]], "models.lwf_mc": [[75, 1, 1, "", "LwFMC"], [75, 3, 1, "", "get_parser"]], "models.lwf_mc.LwFMC": [[75, 4, 1, "", "COMPATIBILITY"], [75, 4, 1, "", "NAME"], [75, 2, 1, "", "end_task"], [75, 2, 1, "", "get_loss"], [75, 2, 1, "", "get_parser"], [75, 2, 1, "", "observe"]], "models.mer": [[76, 1, 1, "", "Mer"]], "models.mer.Mer": [[76, 4, 1, "", "COMPATIBILITY"], [76, 4, 1, "", "NAME"], [76, 2, 1, "", "draw_batches"], [76, 2, 1, "", "get_parser"], [76, 2, 1, "", "observe"]], "models.pnn": [[77, 1, 1, "", "Pnn"], [77, 3, 1, "", "get_backbone"]], "models.pnn.Pnn": [[77, 4, 1, "", "COMPATIBILITY"], [77, 4, 1, "", "NAME"], [77, 2, 1, "", "end_task"], [77, 2, 1, "", "forward"], [77, 2, 1, "", "get_parser"], [77, 2, 1, "", "observe"]], "models.rpc": [[78, 1, 1, "", "RPC"], [78, 3, 1, "", "dsimplex"]], "models.rpc.RPC": [[78, 4, 1, "", "COMPATIBILITY"], [78, 4, 1, "", "NAME"], [78, 2, 1, "", "end_task"], [78, 2, 1, "", "forward"], [78, 2, 1, "", "get_parser"], [78, 2, 1, "", "observe"]], "models.sgd": [[79, 1, 1, "", "Sgd"]], "models.sgd.Sgd": [[79, 4, 1, "", "COMPATIBILITY"], [79, 4, 1, "", "NAME"], [79, 2, 1, "", "get_parser"], [79, 2, 1, "", "observe"]], "models.si": [[80, 1, 1, "", "SI"]], "models.si.SI": [[80, 4, 1, "", "COMPATIBILITY"], [80, 4, 1, "", "NAME"], [80, 2, 1, "", "end_task"], [80, 2, 1, "", "get_parser"], [80, 2, 1, "", "observe"], [80, 2, 1, "", "penalty"]], "models.slca_utils": [[82, 0, 0, "-", "convs"], [87, 0, 0, "-", "inc_net"], [88, 0, 0, "-", "toolkit"]], "models.slca_utils.convs": [[83, 0, 0, "-", "cifar_resnet"], [84, 0, 0, "-", "linears"], [85, 0, 0, "-", "resnet"], [86, 0, 0, "-", "vits"]], "models.slca_utils.convs.cifar_resnet": [[83, 1, 1, "", "CifarResNet"], [83, 1, 1, "", "DownsampleA"], [83, 1, 1, "", "DownsampleB"], [83, 1, 1, "", "DownsampleC"], [83, 1, 1, "", "DownsampleD"], [83, 1, 1, "", "ResNetBasicblock"], [83, 3, 1, "", "resnet110"], [83, 3, 1, "", "resnet20"], [83, 3, 1, "", "resnet20mnist"], [83, 3, 1, "", "resnet32"], [83, 3, 1, "", "resnet32mnist"], [83, 3, 1, "", "resnet44"], [83, 3, 1, "", "resnet56"]], "models.slca_utils.convs.cifar_resnet.CifarResNet": [[83, 2, 1, "", "forward"], [83, 5, 1, "", "last_conv"]], "models.slca_utils.convs.cifar_resnet.DownsampleA": [[83, 2, 1, "", "forward"]], "models.slca_utils.convs.cifar_resnet.DownsampleB": [[83, 2, 1, "", "forward"]], "models.slca_utils.convs.cifar_resnet.DownsampleC": [[83, 2, 1, "", "forward"]], "models.slca_utils.convs.cifar_resnet.DownsampleD": [[83, 2, 1, "", "forward"]], "models.slca_utils.convs.cifar_resnet.ResNetBasicblock": [[83, 4, 1, "", "expansion"], [83, 2, 1, "", "forward"]], "models.slca_utils.convs.linears": [[84, 1, 1, "", "SimpleContinualLinear"]], "models.slca_utils.convs.linears.SimpleContinualLinear": [[84, 2, 1, "", "backup"], [84, 2, 1, "", "forward"], [84, 2, 1, "", "recall"], [84, 2, 1, "", "update"]], "models.slca_utils.convs.resnet": [[85, 1, 1, "", "BasicBlock"], [85, 1, 1, "", "Bottleneck"], [85, 1, 1, "", "ResNet"], [85, 3, 1, "", "conv1x1"], [85, 3, 1, "", "conv3x3"], [85, 3, 1, "", "resnet101"], [85, 3, 1, "", "resnet152"], [85, 3, 1, "", "resnet18"], [85, 3, 1, "", "resnet34"], [85, 3, 1, "", "resnet50"], [85, 3, 1, "", "resnext101_32x8d"], [85, 3, 1, "", "resnext50_32x4d"], [85, 3, 1, "", "wide_resnet101_2"], [85, 3, 1, "", "wide_resnet50_2"]], "models.slca_utils.convs.resnet.BasicBlock": [[85, 4, 1, "", "expansion"], [85, 2, 1, "", "forward"]], "models.slca_utils.convs.resnet.Bottleneck": [[85, 4, 1, "", "expansion"], [85, 2, 1, "", "forward"]], "models.slca_utils.convs.resnet.ResNet": [[85, 2, 1, "", "forward"], [85, 5, 1, "", "last_conv"]], "models.slca_utils.convs.vits": [[86, 1, 1, "", "Attention"], [86, 1, 1, "", "Block"], [86, 1, 1, "", "VisionTransformer"], [86, 3, 1, "", "checkpoint_filter_fn"], [86, 3, 1, "", "resize_pos_embed"], [86, 3, 1, "", "vit_base_patch16_224_in21k"], [86, 3, 1, "", "vit_base_patch16_224_mocov3"]], "models.slca_utils.convs.vits.Attention": [[86, 2, 1, "", "forward"]], "models.slca_utils.convs.vits.Block": [[86, 2, 1, "", "forward"]], "models.slca_utils.convs.vits.VisionTransformer": [[86, 2, 1, "", "forward"], [86, 2, 1, "", "forward_features"], [86, 2, 1, "", "get_adapter"], [86, 2, 1, "", "get_classifier"], [86, 2, 1, "", "init_weights"], [86, 2, 1, "", "load_pretrained"], [86, 2, 1, "", "no_weight_decay"], [86, 2, 1, "", "reset_classifier"]], "models.slca_utils.inc_net": [[87, 1, 1, "", "BaseNet"], [87, 1, 1, "", "FinetuneIncrementalNet"], [87, 3, 1, "", "get_convnet"]], "models.slca_utils.inc_net.BaseNet": [[87, 2, 1, "", "copy"], [87, 2, 1, "", "extract_vector"], [87, 5, 1, "", "feature_dim"], [87, 2, 1, "", "forward"], [87, 2, 1, "", "freeze"], [87, 2, 1, "", "generate_fc"], [87, 2, 1, "", "update_fc"]], "models.slca_utils.inc_net.FinetuneIncrementalNet": [[87, 2, 1, "", "extract_layerwise_vector"], [87, 2, 1, "", "forward"], [87, 2, 1, "", "generate_fc"], [87, 2, 1, "", "save_old_fc"], [87, 2, 1, "", "update_fc"]], "models.slca_utils.toolkit": [[88, 3, 1, "", "accuracy"], [88, 3, 1, "", "count_parameters"], [88, 3, 1, "", "makedirs"], [88, 3, 1, "", "split_images_labels"], [88, 3, 1, "", "target2onehot"], [88, 3, 1, "", "tensor2numpy"]], "models.twf": [[89, 1, 1, "", "TwF"], [89, 3, 1, "", "batch_iterate"]], "models.twf.TwF": [[89, 4, 1, "", "COMPATIBILITY"], [89, 4, 1, "", "NAME"], [89, 2, 1, "", "begin_task"], [89, 2, 1, "", "end_task"], [89, 2, 1, "", "get_custom_double_transform"], [89, 2, 1, "", "get_parser"], [89, 2, 1, "", "observe"], [89, 2, 1, "", "partial_distill_loss"]], "models.twf_utils": [[91, 0, 0, "-", "afd"], [92, 0, 0, "-", "utils"]], "models.twf_utils.afd": [[91, 1, 1, "", "BinaryGumbelSoftmax"], [91, 1, 1, "", "ChannelAttn"], [91, 1, 1, "", "ConditionalLinear"], [91, 1, 1, "", "DiverseLoss"], [91, 1, 1, "", "DoubleAttn"], [91, 1, 1, "", "HardAttentionSoftmax"], [91, 1, 1, "", "MultiTaskAFDAlternative"], [91, 1, 1, "", "Normalize"], [91, 1, 1, "", "SoftAttentionSoftmax"], [91, 1, 1, "", "SpatialAttn"], [91, 1, 1, "", "StudentTransform"], [91, 1, 1, "", "TeacherForcingLoss"], [91, 1, 1, "", "TeacherTransform"], [91, 3, 1, "", "get_rnd_weight"]], "models.twf_utils.afd.BinaryGumbelSoftmax": [[91, 2, 1, "", "forward"]], "models.twf_utils.afd.ChannelAttn": [[91, 2, 1, "", "compute_distance"], [91, 2, 1, "", "downsample"], [91, 2, 1, "", "forward"], [91, 2, 1, "", "upsample"]], "models.twf_utils.afd.ConditionalLinear": [[91, 2, 1, "", "forward"], [91, 2, 1, "", "init_parameters"]], "models.twf_utils.afd.DiverseLoss": [[91, 2, 1, "", "forward"]], "models.twf_utils.afd.DoubleAttn": [[91, 2, 1, "", "compute_distance"], [91, 2, 1, "", "downsample"], [91, 2, 1, "", "forward"], [91, 2, 1, "", "init_parameters"], [91, 2, 1, "", "upsample"]], "models.twf_utils.afd.HardAttentionSoftmax": [[91, 2, 1, "", "forward"]], "models.twf_utils.afd.MultiTaskAFDAlternative": [[91, 2, 1, "", "extend_like"], [91, 2, 1, "", "forward"], [91, 2, 1, "", "get_tasks_id"]], "models.twf_utils.afd.Normalize": [[91, 2, 1, "", "forward"]], "models.twf_utils.afd.SoftAttentionSoftmax": [[91, 2, 1, "", "forward"]], "models.twf_utils.afd.SpatialAttn": [[91, 2, 1, "", "forward"]], "models.twf_utils.afd.StudentTransform": [[91, 2, 1, "", "forward"], [91, 2, 1, "", "init_parameters"]], "models.twf_utils.afd.TeacherForcingLoss": [[91, 2, 1, "", "forward"]], "models.twf_utils.afd.TeacherTransform": [[91, 2, 1, "", "forward"], [91, 2, 1, "", "get_margin"]], "models.twf_utils.utils": [[92, 3, 1, "", "init_twf"]], "models.utils": [[94, 0, 0, "-", "continual_model"], [95, 0, 0, "-", "lider_model"]], "models.utils.continual_model": [[94, 1, 1, "", "ContinualModel"]], "models.utils.continual_model.ContinualModel": [[94, 4, 1, "", "AVAIL_OPTIMS"], [94, 4, 1, "", "COMPATIBILITY"], [94, 4, 1, "", "NAME"], [94, 2, 1, "", "autolog_wandb"], [94, 2, 1, "", "begin_task"], [94, 5, 1, "", "cpt"], [94, 5, 1, "", "current_task"], [94, 2, 1, "", "end_task"], [94, 2, 1, "", "forward"], [94, 2, 1, "", "get_debug_iters"], [94, 2, 1, "", "get_optimizer"], [94, 2, 1, "", "get_parameters"], [94, 2, 1, "", "get_parser"], [94, 2, 1, "", "load_buffer"], [94, 2, 1, "", "meta_begin_task"], [94, 2, 1, "", "meta_end_task"], [94, 2, 1, "", "meta_observe"], [94, 5, 1, "", "n_classes_current_task"], [94, 5, 1, "", "n_past_classes"], [94, 5, 1, "", "n_remaining_classes"], [94, 5, 1, "", "n_seen_classes"], [94, 2, 1, "", "observe"], [94, 2, 1, "", "to"]], "models.utils.lider_model": [[95, 1, 1, "", "LiderOptimizer"], [95, 3, 1, "", "add_lipschitz_args"]], "models.utils.lider_model.LiderOptimizer": [[95, 2, 1, "", "compute_transition_matrix"], [95, 2, 1, "", "dynamic_budget_lip_loss"], [95, 2, 1, "", "get_feature_lip_coeffs"], [95, 2, 1, "", "get_layer_lip_coeffs"], [95, 2, 1, "", "get_norm"], [95, 2, 1, "", "init_net"], [95, 2, 1, "", "minimization_lip_loss"], [95, 2, 1, "", "top_eigenvalue"], [95, 2, 1, "", "transmitting_matrix"]], "models.xder": [[96, 1, 1, "", "XDer"]], "models.xder.XDer": [[96, 4, 1, "", "COMPATIBILITY"], [96, 4, 1, "", "NAME"], [96, 2, 1, "", "end_task"], [96, 2, 1, "", "get_parser"], [96, 2, 1, "", "observe"], [96, 2, 1, "", "update_logits"]], "models.xder_ce": [[97, 1, 1, "", "XDerCE"]], "models.xder_ce.XDerCE": [[97, 4, 1, "", "COMPATIBILITY"], [97, 4, 1, "", "NAME"], [97, 2, 1, "", "end_task"], [97, 2, 1, "", "get_parser"], [97, 2, 1, "", "observe"], [97, 2, 1, "", "update_logits"]], "models.xder_rpc": [[98, 1, 1, "", "XDerRPC"], [98, 3, 1, "", "dsimplex"]], "models.xder_rpc.XDerRPC": [[98, 4, 1, "", "COMPATIBILITY"], [98, 4, 1, "", "NAME"], [98, 2, 1, "", "end_task"], [98, 2, 1, "", "forward"], [98, 2, 1, "", "get_parser"], [98, 2, 1, "", "observe"], [98, 2, 1, "", "update_logits"]], "utils": [[100, 0, 0, "-", "args"], [101, 0, 0, "-", "augmentations"], [102, 0, 0, "-", "batch_norm"], [103, 0, 0, "-", "best_args"], [104, 0, 0, "-", "buffer"], [105, 0, 0, "-", "checkpoints"], [106, 0, 0, "-", "conditional_bn"], [107, 0, 0, "-", "conf"], [99, 3, 1, "", "create_if_not_exists"], [99, 3, 1, "", "custom_str_underscore"], [108, 0, 0, "-", "distributed"], [109, 0, 0, "-", "gss_buffer"], [110, 0, 0, "-", "kornia_utils"], [111, 0, 0, "-", "loggers"], [112, 0, 0, "-", "magic"], [113, 0, 0, "-", "main"], [114, 0, 0, "-", "metrics"], [115, 0, 0, "-", "mixup"], [99, 3, 1, "", "none_or_float"], [116, 0, 0, "-", "prompt_templates"], [99, 3, 1, "", "random_id"], [117, 0, 0, "-", "ring_buffer"], [118, 0, 0, "-", "schedulers"], [119, 0, 0, "-", "simclrloss"], [99, 3, 1, "", "smart_joint"], [120, 0, 0, "-", "status"], [121, 0, 0, "-", "training"], [122, 0, 0, "-", "triplet"]], "utils.args": [[100, 3, 1, "", "add_experiment_args"], [100, 3, 1, "", "add_management_args"], [100, 3, 1, "", "add_rehearsal_args"]], "utils.augmentations": [[101, 1, 1, "", "CustomRandomCrop"], [101, 1, 1, "", "CustomRandomHorizontalFlip"], [101, 1, 1, "", "DoubleCompose"], [101, 1, 1, "", "DoubleTransform"], [101, 3, 1, "", "apply_transform"], [101, 3, 1, "", "cutmix_data"], [101, 3, 1, "", "normalize"], [101, 3, 1, "", "rand_bbox"], [101, 3, 1, "", "random_crop"], [101, 3, 1, "", "random_flip"], [101, 3, 1, "", "random_grayscale"], [101, 1, 1, "", "soft_aug"], [101, 1, 1, "", "strong_aug"]], "utils.augmentations.DoubleCompose": [[101, 2, 1, "", "__call__"], [101, 2, 1, "", "__getitem__"], [101, 2, 1, "", "__iter__"], [101, 2, 1, "", "__len__"]], "utils.batch_norm": [[102, 1, 1, "", "bn_track_stats"]], "utils.buffer": [[104, 1, 1, "", "Buffer"], [104, 3, 1, "", "fill_buffer"], [104, 3, 1, "", "icarl_replay"], [104, 3, 1, "", "reservoir"]], "utils.buffer.Buffer": [[104, 2, 1, "", "add_data"], [104, 2, 1, "", "empty"], [104, 2, 1, "", "get_all_data"], [104, 2, 1, "", "get_data"], [104, 2, 1, "", "get_data_by_index"], [104, 2, 1, "", "init_tensors"], [104, 2, 1, "", "is_empty"], [104, 2, 1, "", "to"], [104, 5, 1, "", "used_attributes"]], "utils.checkpoints": [[105, 3, 1, "", "mammoth_load_checkpoint"]], "utils.conditional_bn": [[106, 1, 1, "", "ConditionalBatchNorm1d"], [106, 1, 1, "", "ConditionalBatchNorm2d"], [106, 1, 1, "", "SelectClearGrad"]], "utils.conditional_bn.ConditionalBatchNorm1d": [[106, 2, 1, "", "forward"]], "utils.conditional_bn.ConditionalBatchNorm2d": [[106, 2, 1, "", "forward"]], "utils.conditional_bn.SelectClearGrad": [[106, 2, 1, "", "backward"], [106, 2, 1, "", "forward"]], "utils.conf": [[107, 3, 1, "", "base_path"], [107, 3, 1, "", "create_seeded_dataloader"], [107, 3, 1, "", "get_device"], [107, 3, 1, "", "set_random_seed"], [107, 3, 1, "", "set_random_seed_worker"], [107, 3, 1, "", "warn_once"]], "utils.distributed": [[108, 1, 1, "", "CustomDP"], [108, 3, 1, "", "make_ddp"], [108, 3, 1, "", "make_dp"], [108, 3, 1, "", "setup"], [108, 3, 1, "", "wait_for_master"]], "utils.distributed.CustomDP": [[108, 4, 1, "id0", "intercept_names"]], "utils.gss_buffer": [[109, 1, 1, "", "Buffer"]], "utils.gss_buffer.Buffer": [[109, 2, 1, "", "add_data"], [109, 2, 1, "", "drop_cache"], [109, 2, 1, "", "empty"], [109, 2, 1, "", "functional_reservoir"], [109, 2, 1, "", "get_all_data"], [109, 2, 1, "", "get_data"], [109, 2, 1, "", "get_grad_score"], [109, 2, 1, "", "init_tensors"], [109, 2, 1, "", "is_empty"], [109, 2, 1, "", "reset_fathom"]], "utils.kornia_utils": [[110, 1, 1, "", "CustomKorniaRandAugment"], [110, 1, 1, "", "KorniaAugNoGrad"], [110, 3, 1, "", "to_kornia_transform"]], "utils.kornia_utils.CustomKorniaRandAugment": [[110, 2, 1, "", "_getpolicy"], [110, 2, 1, "id0", "compose_subpolicy_sequential"], [110, 2, 1, "id1", "forward_parameters"], [110, 2, 1, "id2", "get_forward_sequence"], [110, 4, 1, "", "n"], [110, 4, 1, "", "rand_selector"]], "utils.kornia_utils.KorniaAugNoGrad": [[110, 2, 1, "", "_do_transform"], [110, 2, 1, "id3", "forward"]], "utils.loggers": [[111, 1, 1, "", "Logger"], [111, 3, 1, "", "log_accs"], [111, 3, 1, "", "print_mean_accuracy"]], "utils.loggers.Logger": [[111, 2, 1, "", "add_bwt"], [111, 2, 1, "", "add_forgetting"], [111, 2, 1, "", "add_fwt"], [111, 2, 1, "", "dump"], [111, 2, 1, "", "load"], [111, 2, 1, "", "log"], [111, 2, 1, "", "log_fullacc"], [111, 2, 1, "", "rewind"], [111, 2, 1, "", "write"]], "utils.magic": [[112, 1, 1, "", "persistent_locals"]], "utils.magic.persistent_locals": [[112, 2, 1, "", "clear_locals"], [112, 5, 1, "", "locals"]], "utils.main": [[113, 3, 1, "", "lecun_fix"], [113, 3, 1, "", "main"], [113, 3, 1, "", "parse_args"]], "utils.metrics": [[114, 3, 1, "", "backward_transfer"], [114, 3, 1, "", "forgetting"], [114, 3, 1, "", "forward_transfer"]], "utils.mixup": [[115, 3, 1, "", "mixup"]], "utils.ring_buffer": [[117, 1, 1, "", "RingBuffer"], [117, 3, 1, "", "ring"]], "utils.ring_buffer.RingBuffer": [[117, 2, 1, "", "add_data"], [117, 2, 1, "", "empty"], [117, 2, 1, "", "get_all_data"], [117, 2, 1, "", "get_data"], [117, 2, 1, "", "init_tensors"], [117, 2, 1, "", "is_empty"]], "utils.schedulers": [[118, 1, 1, "", "CosineSchedule"]], "utils.schedulers.CosineSchedule": [[118, 2, 1, "", "cosine"], [118, 2, 1, "", "get_lr"]], "utils.simclrloss": [[119, 1, 1, "", "SupConLoss"]], "utils.simclrloss.SupConLoss": [[119, 2, 1, "", "forward"]], "utils.status": [[120, 1, 1, "", "ProgressBar"], [120, 3, 1, "", "progress_bar"]], "utils.status.ProgressBar": [[120, 2, 1, "", "prog"]], "utils.training": [[121, 3, 1, "", "evaluate"], [121, 3, 1, "", "initialize_wandb"], [121, 3, 1, "", "mask_classes"], [121, 3, 1, "", "train"]], "utils.triplet": [[122, 3, 1, "", "batch_hard_triplet_loss"], [122, 3, 1, "", "negative_only_triplet_loss"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"backbon": [0, 2, 35, 128, 129, 130], "featur": [0, 2], "logit": [0, 2], "mammoth": [0, 2, 99, 126, 128, 130, 132], "base": [0, 2], "class": [0, 1, 2, 11], "dataset": [1, 11, 35, 128, 129, 130], "requir": [1, 11], "properti": [1, 11], "il": [1, 11], "domain": [1, 11], "set": [1, 11], "method": [1, 11, 35, 129], "all": [1, 11], "experiment": [1, 11], "On": [1, 11], "task": [1, 11, 35, 129], "experi": [1, 11], "joint": [1, 11, 45], "step": [1, 11, 125], "creat": [1, 11], "new": [1, 11], "util": [1, 9, 11, 31, 35, 92, 93, 99, 129, 132], "modul": [2, 10, 11, 35, 99, 132], "attribut": [2, 11, 35, 99, 129], "function": [2, 11, 35, 99], "efficientnet": 3, "mnistmlp": 4, "mnistmlp_pnn": 5, "resnet18": 6, "resnet18_pnn": 7, "resnet50": 8, "deprec": [12, 44], "old_mnist_360": 13, "imagenet_r_util": 14, "mnist_360": 15, "perm_mnist": 16, "rot_mnist": 17, "seq_cifar10": 18, "seq_cifar100": 19, "seq_cifar100_224": 20, "seq_cifar100_224_r": 21, "seq_cub200": 22, "seq_imagenet_r": 23, "seq_mnist": 24, "seq_tinyimagenet": 25, "seq_tinyimagenet_r": 26, "transform": [27, 35, 129], "denorm": 28, "permut": 29, "rotat": 30, "continual_dataset": 32, "gcl_dataset": 33, "valid": 34, "model": [35, 42, 52, 128, 129, 130], "train": [35, 121, 124, 129], "test": [35, 125, 129], "evalu": [35, 129], "begin": [35, 129], "end": [35, 129], "automat": [35, 129], "relat": [35, 129], "other": [35, 99, 128, 129, 130, 132], "notabl": [35, 99, 129, 132], "paramet": [35, 129], "advanc": [35, 129], "usag": [35, 129], "agem": 36, "agem_r": 37, "bic": 38, "ccic": 39, "coda_prompt": 40, "coda_prompt_util": 41, "vit": [43, 86], "der": 46, "derpp": 47, "derpp_lid": 48, "dualprompt": 49, "dualprompt_util": 50, "attent": 51, "prompt": [53, 71], "vision_transform": 54, "er": 55, "er_ac": 56, "er_ace_lid": 57, "ewc_on": 58, "fdr": 59, "gdumb": 60, "gdumb_lid": 61, "gem": 62, "gss": 63, "hal": 64, "icarl": 65, "icarl_lid": 66, "joint_gcl": 67, "l2p": 68, "l2p_util": 69, "l2p_model": 70, "vit_prompt": 72, "lucir": 73, "lwf": 74, "lwf_mc": 75, "mer": 76, "pnn": 77, "rpc": 78, "sgd": 79, "si": 80, "slca_util": 81, "conv": 82, "cifar_resnet": 83, "linear": 84, "resnet": 85, "inc_net": 87, "toolkit": 88, "twf": 89, "twf_util": 90, "afd": 91, "continual_model": 94, "lider_model": 95, "xder": 96, "xder_c": 97, "xder_rpc": 98, "run": [99, 132], "us": [99, 128, 130, 132], "argument": [99, 100, 131, 132], "augment": 101, "batch_norm": 102, "best_arg": 103, "buffer": 104, "checkpoint": [105, 123], "conditional_bn": 106, "conf": 107, "distribut": [108, 124], "gss_buffer": 109, "kornia_util": 110, "logger": 111, "magic": 112, "main": 113, "metric": 114, "mixup": 115, "prompt_templ": 116, "ring_buff": 117, "schedul": 118, "simclrloss": 119, "statu": 120, "triplet": 122, "load": 123, "save": 123, "first": 125, "result": 125, "log": 125, "wandb": 125, "parsev": 126, "script": 127, "welcom": [128, 130], "": [128, 130], "document": [128, 130], "an": [128, 130], "extend": [128, 130], "gener": [128, 130], "continu": [128, 130], "learn": [128, 130], "framework": [128, 130], "pytorch": [128, 130], "setup": [128, 130], "pretrain": [128, 130], "cite": [128, 130], "work": [128, 130], "awesom": [128, 130], "paper": [128, 130], "our": [128, 130], "cl": [128, 130], "updat": [128, 130], "roadmap": [128, 130], "contribut": [128, 130], "previou": [128, 130], "version": [128, 130]}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Backbones": [[0, "backbones"], [2, "backbones"]], "Features and logits": [[0, "features-and-logits"], [2, "features-and-logits"]], "Mammoth backbone base class": [[0, "mammoth-backbone-base-class"], [2, "mammoth-backbone-base-class"]], "Datasets": [[1, "datasets"], [11, "datasets"], [128, "datasets"], [130, "datasets"]], "Required properties": [[1, null], [11, null]], "Required properties for class-il and domain-il settings": [[1, null], [11, null]], "Required methods for all settings": [[1, null], [11, null]], "Experimental settings": [[1, "experimental-settings"], [11, "experimental-settings"]], "On task-il and class-il": [[1, null], [11, null]], "Experiments on the joint setting": [[1, null], [11, null]], "Steps to create a new dataset:": [[1, "steps-to-create-a-new-dataset"], [11, "steps-to-create-a-new-dataset"]], "Utils": [[1, "utils"], [9, "module-backbone.utils"], [11, "utils"], [31, "module-datasets.utils"], [93, "module-models.utils"], [99, "utils"], [132, "utils"]], "Module attributes and functions": [[2, "module-backbone"], [11, "module-0"], [35, "module-0"], [99, "module-0"]], "EfficientNet": [[3, "module-backbone.EfficientNet"]], "MNISTMLP": [[4, "module-backbone.MNISTMLP"]], "MNISTMLP_PNN": [[5, "module-backbone.MNISTMLP_PNN"]], "ResNet18": [[6, "module-backbone.ResNet18"]], "ResNet18_PNN": [[7, "module-backbone.ResNet18_PNN"]], "ResNet50": [[8, "module-backbone.ResNet50"]], "modules": [[10, "module-backbone.utils.modules"]], "Deprecated": [[12, "module-datasets.deprecated"], [44, "module-models.deprecated"]], "old_mnist_360": [[13, "module-datasets.deprecated.old_mnist_360"]], "Imagenet_r_utils": [[14, "module-datasets.imagenet_r_utils"]], "mnist_360": [[15, "module-datasets.mnist_360"]], "perm_mnist": [[16, "module-datasets.perm_mnist"]], "rot_mnist": [[17, "module-datasets.rot_mnist"]], "seq_cifar10": [[18, "module-datasets.seq_cifar10"]], "seq_cifar100": [[19, "module-datasets.seq_cifar100"]], "seq_cifar100_224": [[20, "module-datasets.seq_cifar100_224"]], "seq_cifar100_224_rs": [[21, "module-datasets.seq_cifar100_224_rs"]], "seq_cub200": [[22, "module-datasets.seq_cub200"]], "seq_imagenet_r": [[23, "module-datasets.seq_imagenet_r"]], "seq_mnist": [[24, "module-datasets.seq_mnist"]], "seq_tinyimagenet": [[25, "module-datasets.seq_tinyimagenet"]], "seq_tinyimagenet_r": [[26, "module-datasets.seq_tinyimagenet_r"]], "Transforms": [[27, "module-datasets.transforms"]], "denormalization": [[28, "module-datasets.transforms.denormalization"]], "permutation": [[29, "module-datasets.transforms.permutation"]], "rotation": [[30, "module-datasets.transforms.rotation"]], "continual_dataset": [[32, "module-datasets.utils.continual_dataset"]], "gcl_dataset": [[33, "module-datasets.utils.gcl_dataset"]], "validation": [[34, "module-datasets.utils.validation"]], "Models": [[35, "models"], [128, "models"], [129, "models"], [130, "models"]], "Training and testing": [[35, "training-and-testing"], [129, "training-and-testing"]], "Evaluation": [[35, "evaluation"], [129, "evaluation"]], "Attributes and utility methods": [[35, "attributes-and-utility-methods"], [129, "attributes-and-utility-methods"]], "Backbone model": [[35, "backbone-model"], [129, "backbone-model"]], "Begin and end task": [[35, "begin-and-end-task"], [129, "begin-and-end-task"]], "Automatic attributes": [[35, "automatic-attributes"], [129, "automatic-attributes"]], "Task-related attributes:": [[35, null], [129, null]], "Transforms and dataset-related Attributes": [[35, null], [129, null]], "Other notable attributes": [[35, null], [129, null]], "Model parameters": [[35, "model-parameters"], [129, "model-parameters"]], "Other utility methods": [[35, "other-utility-methods"], [129, "other-utility-methods"]], "Advanced usage": [[35, "advanced-usage"], [129, "advanced-usage"]], "agem": [[36, "module-models.agem"]], "agem_r": [[37, "module-models.agem_r"]], "bic": [[38, "module-models.bic"]], "ccic": [[39, "module-models.ccic"]], "coda_prompt": [[40, "module-models.coda_prompt"]], "Coda_prompt_utils": [[41, "module-models.coda_prompt_utils"]], "model": [[42, "module-models.coda_prompt_utils.model"], [52, "module-models.dualprompt_utils.model"]], "vit": [[43, "module-models.coda_prompt_utils.vit"]], "joint": [[45, "module-models.deprecated.joint"]], "der": [[46, "module-models.der"]], "derpp": [[47, "module-models.derpp"]], "derpp_lider": [[48, "module-models.derpp_lider"]], "dualprompt": [[49, "module-models.dualprompt"]], "Dualprompt_utils": [[50, "module-models.dualprompt_utils"]], "attention": [[51, "module-models.dualprompt_utils.attention"]], "prompt": [[53, "module-models.dualprompt_utils.prompt"], [71, "module-models.l2p_utils.prompt"]], "vision_transformer": [[54, "module-models.dualprompt_utils.vision_transformer"]], "er": [[55, "module-models.er"]], "er_ace": [[56, "module-models.er_ace"]], "er_ace_lider": [[57, "module-models.er_ace_lider"]], "ewc_on": [[58, "module-models.ewc_on"]], "fdr": [[59, "module-models.fdr"]], "gdumb": [[60, "module-models.gdumb"]], "gdumb_lider": [[61, "module-models.gdumb_lider"]], "gem": [[62, "module-models.gem"]], "gss": [[63, "module-models.gss"]], "hal": [[64, "module-models.hal"]], "icarl": [[65, "module-models.icarl"]], "icarl_lider": [[66, "module-models.icarl_lider"]], "joint_gcl": [[67, "module-models.joint_gcl"]], "l2p": [[68, "module-models.l2p"]], "L2p_utils": [[69, "module-models.l2p_utils"]], "l2p_model": [[70, "module-models.l2p_utils.l2p_model"]], "vit_prompt": [[72, "module-models.l2p_utils.vit_prompt"]], "lucir": [[73, "module-models.lucir"]], "lwf": [[74, "module-models.lwf"]], "lwf_mc": [[75, "module-models.lwf_mc"]], "mer": [[76, "module-models.mer"]], "pnn": [[77, "module-models.pnn"]], "rpc": [[78, "module-models.rpc"]], "sgd": [[79, "module-models.sgd"]], "si": [[80, "module-models.si"]], "Slca_utils": [[81, "module-models.slca_utils"]], "Convs": [[82, "module-models.slca_utils.convs"]], "cifar_resnet": [[83, "module-models.slca_utils.convs.cifar_resnet"]], "linears": [[84, "module-models.slca_utils.convs.linears"]], "resnet": [[85, "module-models.slca_utils.convs.resnet"]], "vits": [[86, "module-models.slca_utils.convs.vits"]], "inc_net": [[87, "module-models.slca_utils.inc_net"]], "toolkit": [[88, "module-models.slca_utils.toolkit"]], "twf": [[89, "module-models.twf"]], "Twf_utils": [[90, "module-models.twf_utils"]], "afd": [[91, "module-models.twf_utils.afd"]], "utils": [[92, "module-models.twf_utils.utils"]], "continual_model": [[94, "module-models.utils.continual_model"]], "lider_model": [[95, "module-models.utils.lider_model"]], "xder": [[96, "module-models.xder"]], "xder_ce": [[97, "module-models.xder_ce"]], "xder_rpc": [[98, "module-models.xder_rpc"]], "Running Mammoth": [[99, "running-mammoth"], [132, "running-mammoth"]], "Other useful arguments": [[99, "other-useful-arguments"], [132, "other-useful-arguments"]], "Other notable modules": [[99, "other-notable-modules"], [132, "other-notable-modules"]], "Arguments": [[100, "arguments"], [131, "arguments"]], "augmentations": [[101, "module-utils.augmentations"]], "batch_norm": [[102, "module-utils.batch_norm"]], "best_args": [[103, "module-utils.best_args"]], "buffer": [[104, "module-utils.buffer"]], "checkpoints": [[105, "module-utils.checkpoints"]], "conditional_bn": [[106, "module-utils.conditional_bn"]], "conf": [[107, "module-utils.conf"]], "distributed": [[108, "module-utils.distributed"]], "gss_buffer": [[109, "module-utils.gss_buffer"]], "kornia_utils": [[110, "module-utils.kornia_utils"]], "loggers": [[111, "module-utils.loggers"]], "magic": [[112, "module-utils.magic"]], "main": [[113, "module-utils.main"]], "metrics": [[114, "module-utils.metrics"]], "mixup": [[115, "module-utils.mixup"]], "prompt_templates": [[116, "module-utils.prompt_templates"]], "ring_buffer": [[117, "module-utils.ring_buffer"]], "schedulers": [[118, "module-utils.schedulers"]], "simclrloss": [[119, "module-utils.simclrloss"]], "status": [[120, "module-utils.status"]], "training": [[121, "module-utils.training"]], "triplet": [[122, "module-utils.triplet"]], "Load and save checkpoints": [[123, "load-and-save-checkpoints"]], "Distributed training": [[124, "distributed-training"]], "First steps": [[125, "first-steps"]], "Results and logs - WandB": [[125, "results-and-logs-wandb"]], "WandB": [[125, "wandb"]], "Testing": [[125, "testing"]], "Mammoth parseval": [[126, "mammoth-parseval"]], "Scripts": [[127, "scripts"]], "Welcome to Mammoth\u2019s documentation!": [[128, "welcome-to-mammoth-s-documentation"], [130, "welcome-to-mammoth-s-documentation"]], "Mammoth - An Extendible (General) Continual Learning Framework for Pytorch": [[128, "mammoth-an-extendible-general-continual-learning-framework-for-pytorch"], [130, "mammoth-an-extendible-general-continual-learning-framework-for-pytorch"]], "Setup": [[128, "setup"], [130, "setup"]], "Pretrained backbones": [[128, "pretrained-backbones"], [130, "pretrained-backbones"]], "Citing these works": [[128, "citing-these-works"], [130, "citing-these-works"]], "Awesome Papers using Mammoth": [[128, "awesome-papers-using-mammoth"], [130, "awesome-papers-using-mammoth"]], "Our Papers": [[128, "our-papers"], [130, "our-papers"]], "Other Awesome CL works using Mammoth": [[128, "other-awesome-cl-works-using-mammoth"], [130, "other-awesome-cl-works-using-mammoth"]], "Update Roadmap": [[128, "update-roadmap"], [130, "update-roadmap"]], "Contributing": [[128, "contributing"], [130, "contributing"]], "Previous versions": [[128, "previous-versions"], [130, "previous-versions"]]}, "indexentries": {"mammothbackbone (class in backbone)": [[2, "backbone.MammothBackbone"]], "backbone": [[2, "module-backbone"]], "features() (backbone.mammothbackbone method)": [[2, "backbone.MammothBackbone.features"], [2, "id0"]], "forward() (backbone.mammothbackbone method)": [[2, "backbone.MammothBackbone.forward"], [2, "id1"]], "get_grads() (backbone.mammothbackbone method)": [[2, "backbone.MammothBackbone.get_grads"], [2, "id4"]], "get_grads_list() (backbone.mammothbackbone method)": [[2, "backbone.MammothBackbone.get_grads_list"], [2, "id5"]], "get_params() (backbone.mammothbackbone method)": [[2, "backbone.MammothBackbone.get_params"], [2, "id6"]], "module": [[2, "module-backbone"], [3, "module-backbone.EfficientNet"], [4, "module-backbone.MNISTMLP"], [5, "module-backbone.MNISTMLP_PNN"], [6, "module-backbone.ResNet18"], [7, "module-backbone.ResNet18_PNN"], [8, "module-backbone.ResNet50"], [9, "module-backbone.utils"], [10, "module-backbone.utils.modules"], [11, "module-0"], [12, "module-datasets.deprecated"], [13, "module-datasets.deprecated.old_mnist_360"], [14, "module-datasets.imagenet_r_utils"], [15, "module-datasets.mnist_360"], [16, "module-datasets.perm_mnist"], [17, "module-datasets.rot_mnist"], [18, "module-datasets.seq_cifar10"], [19, "module-datasets.seq_cifar100"], [20, "module-datasets.seq_cifar100_224"], [21, "module-datasets.seq_cifar100_224_rs"], [22, "module-datasets.seq_cub200"], [23, "module-datasets.seq_imagenet_r"], [24, "module-datasets.seq_mnist"], [25, "module-datasets.seq_tinyimagenet"], [26, "module-datasets.seq_tinyimagenet_r"], [27, "module-datasets.transforms"], [28, "module-datasets.transforms.denormalization"], [29, "module-datasets.transforms.permutation"], [30, "module-datasets.transforms.rotation"], [31, "module-datasets.utils"], [32, "module-datasets.utils.continual_dataset"], [33, "module-datasets.utils.gcl_dataset"], [34, "module-datasets.utils.validation"], [35, "module-0"], [36, "module-models.agem"], [37, "module-models.agem_r"], [38, "module-models.bic"], [39, "module-models.ccic"], [40, "module-models.coda_prompt"], [41, "module-models.coda_prompt_utils"], [42, "module-models.coda_prompt_utils.model"], [43, "module-models.coda_prompt_utils.vit"], [44, "module-models.deprecated"], [45, "module-models.deprecated.joint"], [46, "module-models.der"], [47, "module-models.derpp"], [48, "module-models.derpp_lider"], [49, "module-models.dualprompt"], [50, "module-models.dualprompt_utils"], [51, "module-models.dualprompt_utils.attention"], [52, "module-models.dualprompt_utils.model"], [53, "module-models.dualprompt_utils.prompt"], [54, "module-models.dualprompt_utils.vision_transformer"], [55, "module-models.er"], [56, "module-models.er_ace"], [57, "module-models.er_ace_lider"], [58, "module-models.ewc_on"], [59, "module-models.fdr"], [60, "module-models.gdumb"], [61, "module-models.gdumb_lider"], [62, "module-models.gem"], [63, "module-models.gss"], [64, "module-models.hal"], [65, "module-models.icarl"], [66, "module-models.icarl_lider"], [67, "module-models.joint_gcl"], [68, "module-models.l2p"], [69, "module-models.l2p_utils"], [70, "module-models.l2p_utils.l2p_model"], [71, "module-models.l2p_utils.prompt"], [72, "module-models.l2p_utils.vit_prompt"], [73, "module-models.lucir"], [74, "module-models.lwf"], [75, "module-models.lwf_mc"], [76, "module-models.mer"], [77, "module-models.pnn"], [78, "module-models.rpc"], [79, "module-models.sgd"], [80, "module-models.si"], [81, "module-models.slca_utils"], [82, "module-models.slca_utils.convs"], [83, "module-models.slca_utils.convs.cifar_resnet"], [84, "module-models.slca_utils.convs.linears"], [85, "module-models.slca_utils.convs.resnet"], [86, "module-models.slca_utils.convs.vits"], [87, "module-models.slca_utils.inc_net"], [88, "module-models.slca_utils.toolkit"], [89, "module-models.twf"], [90, "module-models.twf_utils"], [91, "module-models.twf_utils.afd"], [92, "module-models.twf_utils.utils"], [93, "module-models.utils"], [94, "module-models.utils.continual_model"], [95, "module-models.utils.lider_model"], [96, "module-models.xder"], [97, "module-models.xder_ce"], [98, "module-models.xder_rpc"], [99, "module-0"], [100, "module-utils.args"], [101, "module-utils.augmentations"], [102, "module-utils.batch_norm"], [103, "module-utils.best_args"], [104, "module-utils.buffer"], [105, "module-utils.checkpoints"], [106, "module-utils.conditional_bn"], [107, "module-utils.conf"], [108, "module-utils.distributed"], [109, "module-utils.gss_buffer"], [110, "module-utils.kornia_utils"], [111, "module-utils.loggers"], [112, "module-utils.magic"], [113, "module-utils.main"], [114, "module-utils.metrics"], [115, "module-utils.mixup"], [116, "module-utils.prompt_templates"], [117, "module-utils.ring_buffer"], [118, "module-utils.schedulers"], [119, "module-utils.simclrloss"], [120, "module-utils.status"], [121, "module-utils.training"], [122, "module-utils.triplet"]], "num_flat_features() (in module backbone)": [[2, "backbone.num_flat_features"]], "set_params() (backbone.mammothbackbone method)": [[2, "backbone.MammothBackbone.set_params"], [2, "id7"]], "xavier() (in module backbone)": [[2, "backbone.xavier"]], "blockdecoder (class in backbone.efficientnet)": [[3, "backbone.EfficientNet.BlockDecoder"]], "conv2ddynamicsamepadding (class in backbone.efficientnet)": [[3, "backbone.EfficientNet.Conv2dDynamicSamePadding"]], "conv2dstaticsamepadding (class in backbone.efficientnet)": [[3, "backbone.EfficientNet.Conv2dStaticSamePadding"]], "efficientnet (class in backbone.efficientnet)": [[3, "backbone.EfficientNet.EfficientNet"]], "mbconvblock (class in backbone.efficientnet)": [[3, "backbone.EfficientNet.MBConvBlock"]], "memoryefficientswish (class in backbone.efficientnet)": [[3, "backbone.EfficientNet.MemoryEfficientSwish"]], "swishimplementation (class in backbone.efficientnet)": [[3, "backbone.EfficientNet.SwishImplementation"]], "activations_hook() (backbone.efficientnet.efficientnet method)": [[3, "backbone.EfficientNet.EfficientNet.activations_hook"]], "backbone.efficientnet": [[3, "module-backbone.EfficientNet"]], "backward() (backbone.efficientnet.swishimplementation static method)": [[3, "backbone.EfficientNet.SwishImplementation.backward"]], "calculate_output_image_size() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.calculate_output_image_size"]], "decode() (backbone.efficientnet.blockdecoder static method)": [[3, "backbone.EfficientNet.BlockDecoder.decode"]], "drop_connect() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.drop_connect"]], "efficientnet() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.efficientnet"]], "efficientnet_params() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.efficientnet_params"]], "efficientnet_tf() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.efficientnet_tf"]], "encode() (backbone.efficientnet.blockdecoder static method)": [[3, "backbone.EfficientNet.BlockDecoder.encode"]], "extract_endpoints() (backbone.efficientnet.efficientnet method)": [[3, "backbone.EfficientNet.EfficientNet.extract_endpoints"]], "extract_features() (backbone.efficientnet.efficientnet method)": [[3, "backbone.EfficientNet.EfficientNet.extract_features"]], "forward() (backbone.efficientnet.conv2ddynamicsamepadding method)": [[3, "backbone.EfficientNet.Conv2dDynamicSamePadding.forward"]], "forward() (backbone.efficientnet.conv2dstaticsamepadding method)": [[3, "backbone.EfficientNet.Conv2dStaticSamePadding.forward"]], "forward() (backbone.efficientnet.efficientnet method)": [[3, "backbone.EfficientNet.EfficientNet.forward"]], "forward() (backbone.efficientnet.mbconvblock method)": [[3, "backbone.EfficientNet.MBConvBlock.forward"]], "forward() (backbone.efficientnet.memoryefficientswish method)": [[3, "backbone.EfficientNet.MemoryEfficientSwish.forward"]], "forward() (backbone.efficientnet.swishimplementation static method)": [[3, "backbone.EfficientNet.SwishImplementation.forward"]], "from_name() (backbone.efficientnet.efficientnet class method)": [[3, "backbone.EfficientNet.EfficientNet.from_name"]], "from_pretrained() (backbone.efficientnet.efficientnet class method)": [[3, "backbone.EfficientNet.EfficientNet.from_pretrained"]], "get_image_size() (backbone.efficientnet.efficientnet class method)": [[3, "backbone.EfficientNet.EfficientNet.get_image_size"]], "get_model_params() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.get_model_params"]], "get_model_params_tf() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.get_model_params_tf"]], "get_same_padding_conv2d() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.get_same_padding_conv2d"]], "get_width_and_height_from_size() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.get_width_and_height_from_size"]], "load_pretrained_weights() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.load_pretrained_weights"]], "mammoth_efficientnet() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.mammoth_efficientnet"]], "round_filters() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.round_filters"]], "round_repeats() (in module backbone.efficientnet)": [[3, "backbone.EfficientNet.round_repeats"]], "set_swish() (backbone.efficientnet.efficientnet method)": [[3, "backbone.EfficientNet.EfficientNet.set_swish"]], "set_swish() (backbone.efficientnet.mbconvblock method)": [[3, "backbone.EfficientNet.MBConvBlock.set_swish"]], "mnistmlp (class in backbone.mnistmlp)": [[4, "backbone.MNISTMLP.MNISTMLP"]], "backbone.mnistmlp": [[4, "module-backbone.MNISTMLP"]], "forward() (backbone.mnistmlp.mnistmlp method)": [[4, "backbone.MNISTMLP.MNISTMLP.forward"]], "reset_parameters() (backbone.mnistmlp.mnistmlp method)": [[4, "backbone.MNISTMLP.MNISTMLP.reset_parameters"]], "to() (backbone.mnistmlp.mnistmlp method)": [[4, "backbone.MNISTMLP.MNISTMLP.to"]], "mnistmlp_pnn (class in backbone.mnistmlp_pnn)": [[5, "backbone.MNISTMLP_PNN.MNISTMLP_PNN"]], "backbone.mnistmlp_pnn": [[5, "module-backbone.MNISTMLP_PNN"]], "forward() (backbone.mnistmlp_pnn.mnistmlp_pnn method)": [[5, "backbone.MNISTMLP_PNN.MNISTMLP_PNN.forward"]], "reset_parameters() (backbone.mnistmlp_pnn.mnistmlp_pnn method)": [[5, "backbone.MNISTMLP_PNN.MNISTMLP_PNN.reset_parameters"]], "basicblock (class in backbone.resnet18)": [[6, "backbone.ResNet18.BasicBlock"]], "resnet (class in backbone.resnet18)": [[6, "backbone.ResNet18.ResNet"]], "backbone.resnet18": [[6, "module-backbone.ResNet18"]], "conv3x3() (in module backbone.resnet18)": [[6, "backbone.ResNet18.conv3x3"]], "expansion (backbone.resnet18.basicblock attribute)": [[6, "backbone.ResNet18.BasicBlock.expansion"]], "forward() (backbone.resnet18.basicblock method)": [[6, "backbone.ResNet18.BasicBlock.forward"]], "forward() (backbone.resnet18.resnet method)": [[6, "backbone.ResNet18.ResNet.forward"]], "resnet18() (in module backbone.resnet18)": [[6, "backbone.ResNet18.resnet18"]], "set_return_prerelu() (backbone.resnet18.resnet method)": [[6, "backbone.ResNet18.ResNet.set_return_prerelu"]], "to() (backbone.resnet18.resnet method)": [[6, "backbone.ResNet18.ResNet.to"]], "basicblockpnn (class in backbone.resnet18_pnn)": [[7, "backbone.ResNet18_PNN.BasicBlockPnn"]], "resnetpnn (class in backbone.resnet18_pnn)": [[7, "backbone.ResNet18_PNN.ResNetPNN"]], "backbone.resnet18_pnn": [[7, "module-backbone.ResNet18_PNN"]], "forward() (backbone.resnet18_pnn.basicblockpnn method)": [[7, "backbone.ResNet18_PNN.BasicBlockPnn.forward"]], "forward() (backbone.resnet18_pnn.resnetpnn method)": [[7, "backbone.ResNet18_PNN.ResNetPNN.forward"]], "resnet18_pnn() (in module backbone.resnet18_pnn)": [[7, "backbone.ResNet18_PNN.resnet18_pnn"]], "bottleneck (class in backbone.resnet50)": [[8, "backbone.ResNet50.Bottleneck"]], "resnet (class in backbone.resnet50)": [[8, "backbone.ResNet50.ResNet"]], "backbone.resnet50": [[8, "module-backbone.ResNet50"]], "conv1x1() (in module backbone.resnet50)": [[8, "backbone.ResNet50.conv1x1"]], "conv3x3() (in module backbone.resnet50)": [[8, "backbone.ResNet50.conv3x3"]], "expansion (backbone.resnet50.bottleneck attribute)": [[8, "backbone.ResNet50.Bottleneck.expansion"]], "forward() (backbone.resnet50.bottleneck method)": [[8, "backbone.ResNet50.Bottleneck.forward"]], "forward() (backbone.resnet50.resnet method)": [[8, "backbone.ResNet50.ResNet.forward"]], "resnet50() (in module backbone.resnet50)": [[8, "backbone.ResNet50.resnet50"]], "set_grad_filter() (backbone.resnet50.resnet method)": [[8, "backbone.ResNet50.ResNet.set_grad_filter"]], "set_return_prerelu() (backbone.resnet50.resnet method)": [[8, "backbone.ResNet50.ResNet.set_return_prerelu"]], "to() (backbone.resnet50.resnet method)": [[8, "backbone.ResNet50.ResNet.to"]], "backbone.utils": [[9, "module-backbone.utils"]], "alphamodule (class in backbone.utils.modules)": [[10, "backbone.utils.modules.AlphaModule"]], "listmodule (class in backbone.utils.modules)": [[10, "backbone.utils.modules.ListModule"]], "append() (backbone.utils.modules.listmodule method)": [[10, "backbone.utils.modules.ListModule.append"]], "backbone.utils.modules": [[10, "module-backbone.utils.modules"]], "forward() (backbone.utils.modules.alphamodule method)": [[10, "backbone.utils.modules.AlphaModule.forward"]], "parameters() (backbone.utils.modules.alphamodule method)": [[10, "backbone.utils.modules.AlphaModule.parameters"]], "datasets": [[11, "module-0"]], "get_all_datasets() (in module datasets)": [[11, "datasets.get_all_datasets"]], "get_dataset() (in module datasets)": [[11, "datasets.get_dataset"]], "get_dataset_class() (in module datasets)": [[11, "datasets.get_dataset_class"]], "get_dataset_names() (in module datasets)": [[11, "datasets.get_dataset_names"]], "datasets.deprecated": [[12, "module-datasets.deprecated"]], "length (datasets.deprecated.old_mnist_360.mnist360 attribute)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.LENGTH"]], "mnist360 (class in datasets.deprecated.old_mnist_360)": [[13, "datasets.deprecated.old_mnist_360.MNIST360"]], "name (datasets.deprecated.old_mnist_360.mnist360 attribute)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.NAME"]], "n_classes (datasets.deprecated.old_mnist_360.mnist360 attribute)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.N_CLASSES"]], "setting (datasets.deprecated.old_mnist_360.mnist360 attribute)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.SETTING"]], "datasets.deprecated.old_mnist_360": [[13, "module-datasets.deprecated.old_mnist_360"]], "get_backbone() (datasets.deprecated.old_mnist_360.mnist360 static method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_backbone"]], "get_batch_size() (datasets.deprecated.old_mnist_360.mnist360 static method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_batch_size"]], "get_denormalization_transform() (datasets.deprecated.old_mnist_360.mnist360 static method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_denormalization_transform"]], "get_loss() (datasets.deprecated.old_mnist_360.mnist360 static method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_loss"]], "get_minibatch_size() (datasets.deprecated.old_mnist_360.mnist360 static method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_minibatch_size"]], "get_test_data() (datasets.deprecated.old_mnist_360.mnist360 method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_test_data"]], "get_train_data() (datasets.deprecated.old_mnist_360.mnist360 method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_train_data"]], "get_transform() (datasets.deprecated.old_mnist_360.mnist360 static method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.get_transform"]], "init_test_loaders() (datasets.deprecated.old_mnist_360.mnist360 method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.init_test_loaders"]], "init_train_loaders() (datasets.deprecated.old_mnist_360.mnist360 method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.init_train_loaders"]], "train_next_class() (datasets.deprecated.old_mnist_360.mnist360 method)": [[13, "datasets.deprecated.old_mnist_360.MNIST360.train_next_class"]], "datasets.imagenet_r_utils": [[14, "module-datasets.imagenet_r_utils"]], "mnist360 (class in datasets.mnist_360)": [[15, "datasets.mnist_360.MNIST360"]], "name (datasets.mnist_360.sequentialmnist360 attribute)": [[15, "datasets.mnist_360.SequentialMNIST360.NAME"], [15, "id1"]], "n_classes (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.N_CLASSES"], [15, "id0"]], "n_classes (datasets.mnist_360.sequentialmnist360 attribute)": [[15, "datasets.mnist_360.SequentialMNIST360.N_CLASSES"], [15, "id2"]], "setting (datasets.mnist_360.sequentialmnist360 attribute)": [[15, "datasets.mnist_360.SequentialMNIST360.SETTING"], [15, "id3"]], "size (datasets.mnist_360.sequentialmnist360 attribute)": [[15, "datasets.mnist_360.SequentialMNIST360.SIZE"], [15, "id4"]], "sequentialmnist360 (class in datasets.mnist_360)": [[15, "datasets.mnist_360.SequentialMNIST360"]], "transform (datasets.mnist_360.sequentialmnist360 attribute)": [[15, "datasets.mnist_360.SequentialMNIST360.TRANSFORM"], [15, "id5"]], "active_train_loaders (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.active_train_loaders"]], "args (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.args"]], "args (datasets.mnist_360.sequentialmnist360 attribute)": [[15, "datasets.mnist_360.SequentialMNIST360.args"]], "completed_rounds (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.completed_rounds"]], "current_items (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.current_items"]], "custom_collate_unbatch() (in module datasets.mnist_360)": [[15, "datasets.mnist_360.custom_collate_unbatch"]], "dataset (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.dataset"]], "datasets.mnist_360": [[15, "module-datasets.mnist_360"]], "get_backbone() (datasets.mnist_360.sequentialmnist360 static method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_backbone"]], "get_batch_size() (datasets.mnist_360.sequentialmnist360 static method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_batch_size"]], "get_data_loaders() (datasets.mnist_360.sequentialmnist360 method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_data_loaders"]], "get_denormalization_transform() (datasets.mnist_360.sequentialmnist360 static method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_denormalization_transform"]], "get_epochs() (datasets.mnist_360.sequentialmnist360 static method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_epochs"]], "get_loss() (datasets.mnist_360.sequentialmnist360 static method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_loss"]], "get_normalization_transform() (datasets.mnist_360.sequentialmnist360 static method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_normalization_transform"]], "get_test_data() (datasets.mnist_360.mnist360 method)": [[15, "datasets.mnist_360.MNIST360.get_test_data"]], "get_train_data() (datasets.mnist_360.mnist360 method)": [[15, "datasets.mnist_360.MNIST360.get_train_data"]], "get_transform() (datasets.mnist_360.sequentialmnist360 static method)": [[15, "datasets.mnist_360.SequentialMNIST360.get_transform"]], "init_test_loaders() (datasets.mnist_360.mnist360 method)": [[15, "datasets.mnist_360.MNIST360.init_test_loaders"]], "init_train_loaders() (datasets.mnist_360.mnist360 method)": [[15, "datasets.mnist_360.MNIST360.init_train_loaders"]], "is_over (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.is_over"]], "is_train (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.is_train"]], "num_rounds (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.num_rounds"]], "reinit() (datasets.mnist_360.mnist360 method)": [[15, "datasets.mnist_360.MNIST360.reinit"]], "remaining_training_items (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.remaining_training_items"]], "test_class (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.test_class"]], "test_iteration (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.test_iteration"]], "train_classes (datasets.mnist_360.mnist360 attribute)": [[15, "datasets.mnist_360.MNIST360.train_classes"]], "train_next_class() (datasets.mnist_360.mnist360 method)": [[15, "datasets.mnist_360.MNIST360.train_next_class"]], "mymnist (class in datasets.perm_mnist)": [[16, "datasets.perm_mnist.MyMNIST"]], "name (datasets.perm_mnist.permutedmnist attribute)": [[16, "datasets.perm_mnist.PermutedMNIST.NAME"]], "n_classes_per_task (datasets.perm_mnist.permutedmnist attribute)": [[16, "datasets.perm_mnist.PermutedMNIST.N_CLASSES_PER_TASK"]], "n_tasks (datasets.perm_mnist.permutedmnist attribute)": [[16, "datasets.perm_mnist.PermutedMNIST.N_TASKS"]], "permutedmnist (class in datasets.perm_mnist)": [[16, "datasets.perm_mnist.PermutedMNIST"]], "setting (datasets.perm_mnist.permutedmnist attribute)": [[16, "datasets.perm_mnist.PermutedMNIST.SETTING"]], "size (datasets.perm_mnist.permutedmnist attribute)": [[16, "datasets.perm_mnist.PermutedMNIST.SIZE"]], "datasets.perm_mnist": [[16, "module-datasets.perm_mnist"]], "get_backbone() (datasets.perm_mnist.permutedmnist static method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_backbone"]], "get_batch_size() (datasets.perm_mnist.permutedmnist static method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_batch_size"]], "get_data_loaders() (datasets.perm_mnist.permutedmnist method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_data_loaders"]], "get_denormalization_transform() (datasets.perm_mnist.permutedmnist static method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_denormalization_transform"]], "get_epochs() (datasets.perm_mnist.permutedmnist static method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_epochs"]], "get_loss() (datasets.perm_mnist.permutedmnist static method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_loss"]], "get_normalization_transform() (datasets.perm_mnist.permutedmnist static method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_normalization_transform"]], "get_transform() (datasets.perm_mnist.permutedmnist static method)": [[16, "datasets.perm_mnist.PermutedMNIST.get_transform"]], "name (datasets.rot_mnist.rotatedmnist attribute)": [[17, "datasets.rot_mnist.RotatedMNIST.NAME"]], "n_classes (datasets.rot_mnist.rotatedmnist attribute)": [[17, "datasets.rot_mnist.RotatedMNIST.N_CLASSES"]], "n_classes_per_task (datasets.rot_mnist.rotatedmnist attribute)": [[17, "datasets.rot_mnist.RotatedMNIST.N_CLASSES_PER_TASK"]], "n_tasks (datasets.rot_mnist.rotatedmnist attribute)": [[17, "datasets.rot_mnist.RotatedMNIST.N_TASKS"]], "rotatedmnist (class in datasets.rot_mnist)": [[17, "datasets.rot_mnist.RotatedMNIST"]], "setting (datasets.rot_mnist.rotatedmnist attribute)": [[17, "datasets.rot_mnist.RotatedMNIST.SETTING"]], "size (datasets.rot_mnist.rotatedmnist attribute)": [[17, "datasets.rot_mnist.RotatedMNIST.SIZE"]], "datasets.rot_mnist": [[17, "module-datasets.rot_mnist"]], "get_backbone() (datasets.rot_mnist.rotatedmnist static method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_backbone"]], "get_batch_size() (datasets.rot_mnist.rotatedmnist static method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_batch_size"]], "get_data_loaders() (datasets.rot_mnist.rotatedmnist method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_data_loaders"]], "get_denormalization_transform() (datasets.rot_mnist.rotatedmnist static method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_denormalization_transform"]], "get_epochs() (datasets.rot_mnist.rotatedmnist static method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_epochs"]], "get_loss() (datasets.rot_mnist.rotatedmnist static method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_loss"]], "get_normalization_transform() (datasets.rot_mnist.rotatedmnist static method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_normalization_transform"]], "get_transform() (datasets.rot_mnist.rotatedmnist static method)": [[17, "datasets.rot_mnist.RotatedMNIST.get_transform"]], "mean (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.MEAN"]], "mycifar10 (class in datasets.seq_cifar10)": [[18, "datasets.seq_cifar10.MyCIFAR10"]], "name (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.NAME"]], "n_classes (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.N_CLASSES"]], "n_classes_per_task (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.N_TASKS"]], "setting (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.SETTING"]], "size (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.SIZE"]], "std (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.STD"]], "sequentialcifar10 (class in datasets.seq_cifar10)": [[18, "datasets.seq_cifar10.SequentialCIFAR10"]], "tcifar10 (class in datasets.seq_cifar10)": [[18, "datasets.seq_cifar10.TCIFAR10"]], "transform (datasets.seq_cifar10.sequentialcifar10 attribute)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.TRANSFORM"]], "datasets.seq_cifar10": [[18, "module-datasets.seq_cifar10"]], "get_backbone() (datasets.seq_cifar10.sequentialcifar10 static method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_backbone"]], "get_batch_size() (datasets.seq_cifar10.sequentialcifar10 static method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_batch_size"]], "get_data_loaders() (datasets.seq_cifar10.sequentialcifar10 method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_cifar10.sequentialcifar10 static method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_denormalization_transform"]], "get_epochs() (datasets.seq_cifar10.sequentialcifar10 static method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_epochs"]], "get_loss() (datasets.seq_cifar10.sequentialcifar10 static method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_loss"]], "get_normalization_transform() (datasets.seq_cifar10.sequentialcifar10 static method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_normalization_transform"]], "get_transform() (datasets.seq_cifar10.sequentialcifar10 static method)": [[18, "datasets.seq_cifar10.SequentialCIFAR10.get_transform"]], "mean (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.MEAN"]], "mycifar100 (class in datasets.seq_cifar100)": [[19, "datasets.seq_cifar100.MyCIFAR100"]], "name (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.NAME"]], "n_classes (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.N_CLASSES"]], "n_classes_per_task (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.N_TASKS"]], "setting (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.SETTING"]], "size (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.SIZE"]], "std (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.STD"]], "sequentialcifar100 (class in datasets.seq_cifar100)": [[19, "datasets.seq_cifar100.SequentialCIFAR100"]], "tcifar100 (class in datasets.seq_cifar100)": [[19, "datasets.seq_cifar100.TCIFAR100"]], "transform (datasets.seq_cifar100.sequentialcifar100 attribute)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.TRANSFORM"]], "datasets.seq_cifar100": [[19, "module-datasets.seq_cifar100"]], "get_backbone() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_backbone"]], "get_batch_size() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_batch_size"]], "get_data_loaders() (datasets.seq_cifar100.sequentialcifar100 method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_denormalization_transform"]], "get_epochs() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_epochs"]], "get_examples_number() (datasets.seq_cifar100.sequentialcifar100 method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_examples_number"]], "get_loss() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_loss"]], "get_normalization_transform() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_normalization_transform"]], "get_scheduler() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_scheduler"]], "get_transform() (datasets.seq_cifar100.sequentialcifar100 static method)": [[19, "datasets.seq_cifar100.SequentialCIFAR100.get_transform"]], "mean (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.MEAN"]], "name (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.NAME"]], "n_classes (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.N_CLASSES"]], "n_classes_per_task (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.N_TASKS"]], "setting (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.SETTING"]], "size (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.SIZE"]], "std (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.STD"]], "sequentialcifar100224 (class in datasets.seq_cifar100_224)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224"]], "test_transform (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.TEST_TRANSFORM"]], "transform (datasets.seq_cifar100_224.sequentialcifar100224 attribute)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.TRANSFORM"]], "datasets.seq_cifar100_224": [[20, "module-datasets.seq_cifar100_224"]], "get_backbone() (datasets.seq_cifar100_224.sequentialcifar100224 static method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_backbone"]], "get_batch_size() (datasets.seq_cifar100_224.sequentialcifar100224 static method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_batch_size"]], "get_data_loaders() (datasets.seq_cifar100_224.sequentialcifar100224 method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_cifar100_224.sequentialcifar100224 static method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_denormalization_transform"]], "get_epochs() (datasets.seq_cifar100_224.sequentialcifar100224 static method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_epochs"]], "get_loss() (datasets.seq_cifar100_224.sequentialcifar100224 static method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_loss"]], "get_normalization_transform() (datasets.seq_cifar100_224.sequentialcifar100224 static method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_normalization_transform"]], "get_transform() (datasets.seq_cifar100_224.sequentialcifar100224 static method)": [[20, "datasets.seq_cifar100_224.SequentialCIFAR100224.get_transform"]], "mean (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.MEAN"]], "name (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.NAME"]], "n_classes (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.N_CLASSES"]], "n_classes_per_task (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.N_TASKS"]], "setting (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.SETTING"]], "size (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.SIZE"]], "std (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.STD"]], "sequentialcifar100224rs (class in datasets.seq_cifar100_224_rs)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS"]], "test_transform (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.TEST_TRANSFORM"]], "transform (datasets.seq_cifar100_224_rs.sequentialcifar100224rs attribute)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.TRANSFORM"]], "datasets.seq_cifar100_224_rs": [[21, "module-datasets.seq_cifar100_224_rs"]], "get_backbone() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs static method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_backbone"]], "get_batch_size() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs static method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_batch_size"]], "get_data_loaders() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs static method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_denormalization_transform"]], "get_epochs() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs static method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_epochs"]], "get_loss() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs static method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_loss"]], "get_normalization_transform() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs static method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_normalization_transform"]], "get_transform() (datasets.seq_cifar100_224_rs.sequentialcifar100224rs static method)": [[21, "datasets.seq_cifar100_224_rs.SequentialCIFAR100224RS.get_transform"]], "cub200 (class in datasets.seq_cub200)": [[22, "datasets.seq_cub200.CUB200"]], "img_size (datasets.seq_cub200.mycub200 attribute)": [[22, "datasets.seq_cub200.MyCUB200.IMG_SIZE"]], "mean (datasets.seq_cub200.mycub200 attribute)": [[22, "datasets.seq_cub200.MyCUB200.MEAN"]], "mean (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.MEAN"]], "mycub200 (class in datasets.seq_cub200)": [[22, "datasets.seq_cub200.MyCUB200"]], "name (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.NAME"]], "n_classes (datasets.seq_cub200.mycub200 attribute)": [[22, "datasets.seq_cub200.MyCUB200.N_CLASSES"]], "n_classes_per_task (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.N_TASKS"]], "setting (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.SETTING"]], "size (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.SIZE"]], "std (datasets.seq_cub200.mycub200 attribute)": [[22, "datasets.seq_cub200.MyCUB200.STD"]], "std (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.STD"]], "sequentialcub200 (class in datasets.seq_cub200)": [[22, "datasets.seq_cub200.SequentialCUB200"]], "test_transform (datasets.seq_cub200.mycub200 attribute)": [[22, "datasets.seq_cub200.MyCUB200.TEST_TRANSFORM"]], "test_transform (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.TEST_TRANSFORM"]], "transform (datasets.seq_cub200.sequentialcub200 attribute)": [[22, "datasets.seq_cub200.SequentialCUB200.TRANSFORM"]], "datasets.seq_cub200": [[22, "module-datasets.seq_cub200"]], "get_backbone() (datasets.seq_cub200.sequentialcub200 static method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_backbone"]], "get_batch_size() (datasets.seq_cub200.sequentialcub200 static method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_batch_size"]], "get_data_loaders() (datasets.seq_cub200.sequentialcub200 method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_cub200.sequentialcub200 static method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_denormalization_transform"]], "get_epochs() (datasets.seq_cub200.sequentialcub200 static method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_epochs"]], "get_loss() (datasets.seq_cub200.sequentialcub200 static method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_loss"]], "get_normalization_transform() (datasets.seq_cub200.sequentialcub200 static method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_normalization_transform"]], "get_transform() (datasets.seq_cub200.sequentialcub200 static method)": [[22, "datasets.seq_cub200.SequentialCUB200.get_transform"]], "myimagenetr (class in datasets.seq_imagenet_r)": [[23, "datasets.seq_imagenet_r.MyImagenetR"]], "name (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.NAME"]], "n_classes (datasets.seq_imagenet_r.myimagenetr attribute)": [[23, "datasets.seq_imagenet_r.MyImagenetR.N_CLASSES"]], "n_classes (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.N_CLASSES"]], "n_classes_per_task (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.N_TASKS"]], "setting (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.SETTING"]], "size (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.SIZE"]], "sequentialimagenetr (class in datasets.seq_imagenet_r)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR"]], "test_transform (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.TEST_TRANSFORM"]], "transform (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.TRANSFORM"]], "datasets.seq_imagenet_r": [[23, "module-datasets.seq_imagenet_r"]], "get_backbone() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_backbone"]], "get_batch_size() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_batch_size"]], "get_class_names() (datasets.seq_imagenet_r.sequentialimagenetr method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_class_names"]], "get_data_loaders() (datasets.seq_imagenet_r.sequentialimagenetr method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_denormalization_transform"]], "get_epochs() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_epochs"]], "get_loss() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_loss"]], "get_n_epochs_first_stage() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_n_epochs_first_stage"]], "get_normalization_transform() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_normalization_transform"]], "get_prompt_templates() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_prompt_templates"]], "get_transform() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_transform"]], "get_virtual_bn_num() (datasets.seq_imagenet_r.sequentialimagenetr static method)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.get_virtual_bn_num"]], "normalize (datasets.seq_imagenet_r.sequentialimagenetr attribute)": [[23, "datasets.seq_imagenet_r.SequentialImagenetR.normalize"]], "mymnist (class in datasets.seq_mnist)": [[24, "datasets.seq_mnist.MyMNIST"]], "name (datasets.seq_mnist.sequentialmnist attribute)": [[24, "datasets.seq_mnist.SequentialMNIST.NAME"]], "n_classes (datasets.seq_mnist.sequentialmnist attribute)": [[24, "datasets.seq_mnist.SequentialMNIST.N_CLASSES"]], "n_classes_per_task (datasets.seq_mnist.sequentialmnist attribute)": [[24, "datasets.seq_mnist.SequentialMNIST.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_mnist.sequentialmnist attribute)": [[24, "datasets.seq_mnist.SequentialMNIST.N_TASKS"]], "setting (datasets.seq_mnist.sequentialmnist attribute)": [[24, "datasets.seq_mnist.SequentialMNIST.SETTING"]], "size (datasets.seq_mnist.sequentialmnist attribute)": [[24, "datasets.seq_mnist.SequentialMNIST.SIZE"]], "sequentialmnist (class in datasets.seq_mnist)": [[24, "datasets.seq_mnist.SequentialMNIST"]], "transform (datasets.seq_mnist.sequentialmnist attribute)": [[24, "datasets.seq_mnist.SequentialMNIST.TRANSFORM"]], "datasets.seq_mnist": [[24, "module-datasets.seq_mnist"]], "get_backbone() (datasets.seq_mnist.sequentialmnist static method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_backbone"]], "get_batch_size() (datasets.seq_mnist.sequentialmnist static method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_batch_size"]], "get_data_loaders() (datasets.seq_mnist.sequentialmnist method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_mnist.sequentialmnist static method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_denormalization_transform"]], "get_epochs() (datasets.seq_mnist.sequentialmnist static method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_epochs"]], "get_loss() (datasets.seq_mnist.sequentialmnist static method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_loss"]], "get_normalization_transform() (datasets.seq_mnist.sequentialmnist static method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_normalization_transform"]], "get_transform() (datasets.seq_mnist.sequentialmnist static method)": [[24, "datasets.seq_mnist.SequentialMNIST.get_transform"]], "mean (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.MEAN"]], "mytinyimagenet (class in datasets.seq_tinyimagenet)": [[25, "datasets.seq_tinyimagenet.MyTinyImagenet"]], "name (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.NAME"]], "n_classes (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.N_CLASSES"]], "n_classes_per_task (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.N_CLASSES_PER_TASK"]], "n_tasks (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.N_TASKS"]], "setting (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.SETTING"]], "size (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.SIZE"]], "std (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.STD"]], "sequentialtinyimagenet (class in datasets.seq_tinyimagenet)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet"]], "transform (datasets.seq_tinyimagenet.sequentialtinyimagenet attribute)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.TRANSFORM"]], "tinyimagenet (class in datasets.seq_tinyimagenet)": [[25, "datasets.seq_tinyimagenet.TinyImagenet"]], "datasets.seq_tinyimagenet": [[25, "module-datasets.seq_tinyimagenet"]], "get_backbone() (datasets.seq_tinyimagenet.sequentialtinyimagenet static method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_backbone"]], "get_batch_size() (datasets.seq_tinyimagenet.sequentialtinyimagenet static method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_batch_size"]], "get_data_loaders() (datasets.seq_tinyimagenet.sequentialtinyimagenet method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_data_loaders"]], "get_denormalization_transform() (datasets.seq_tinyimagenet.sequentialtinyimagenet static method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_denormalization_transform"]], "get_epochs() (datasets.seq_tinyimagenet.sequentialtinyimagenet static method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_epochs"]], "get_loss() (datasets.seq_tinyimagenet.sequentialtinyimagenet static method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_loss"]], "get_normalization_transform() (datasets.seq_tinyimagenet.sequentialtinyimagenet static method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_normalization_transform"]], "get_transform() (datasets.seq_tinyimagenet.sequentialtinyimagenet method)": [[25, "datasets.seq_tinyimagenet.SequentialTinyImagenet.get_transform"]], "mean (datasets.seq_tinyimagenet_r.sequentialtinyimagenet32r attribute)": [[26, "datasets.seq_tinyimagenet_r.SequentialTinyImagenet32R.MEAN"]], "name (datasets.seq_tinyimagenet_r.sequentialtinyimagenet32r attribute)": [[26, "datasets.seq_tinyimagenet_r.SequentialTinyImagenet32R.NAME"]], "std (datasets.seq_tinyimagenet_r.sequentialtinyimagenet32r attribute)": [[26, "datasets.seq_tinyimagenet_r.SequentialTinyImagenet32R.STD"]], "sequentialtinyimagenet32r (class in datasets.seq_tinyimagenet_r)": [[26, "datasets.seq_tinyimagenet_r.SequentialTinyImagenet32R"]], "test_transform (datasets.seq_tinyimagenet_r.sequentialtinyimagenet32r attribute)": [[26, "datasets.seq_tinyimagenet_r.SequentialTinyImagenet32R.TEST_TRANSFORM"]], "transform (datasets.seq_tinyimagenet_r.sequentialtinyimagenet32r attribute)": [[26, "datasets.seq_tinyimagenet_r.SequentialTinyImagenet32R.TRANSFORM"]], "datasets.seq_tinyimagenet_r": [[26, "module-datasets.seq_tinyimagenet_r"]], "datasets.transforms": [[27, "module-datasets.transforms"]], "denormalize (class in datasets.transforms.denormalization)": [[28, "datasets.transforms.denormalization.DeNormalize"]], "datasets.transforms.denormalization": [[28, "module-datasets.transforms.denormalization"]], "fixedpermutation (class in datasets.transforms.permutation)": [[29, "datasets.transforms.permutation.FixedPermutation"]], "permutation (class in datasets.transforms.permutation)": [[29, "datasets.transforms.permutation.Permutation"]], "datasets.transforms.permutation": [[29, "module-datasets.transforms.permutation"]], "fixedrotation (class in datasets.transforms.rotation)": [[30, "datasets.transforms.rotation.FixedRotation"]], "incrementalrotation (class in datasets.transforms.rotation)": [[30, "datasets.transforms.rotation.IncrementalRotation"]], "rotation (class in datasets.transforms.rotation)": [[30, "datasets.transforms.rotation.Rotation"]], "datasets.transforms.rotation": [[30, "module-datasets.transforms.rotation"]], "set_iteration() (datasets.transforms.rotation.incrementalrotation method)": [[30, "datasets.transforms.rotation.IncrementalRotation.set_iteration"]], "datasets.utils": [[31, "module-datasets.utils"]], "avail_scheds (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.AVAIL_SCHEDS"]], "continualdataset (class in datasets.utils.continual_dataset)": [[32, "datasets.utils.continual_dataset.ContinualDataset"]], "name (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.NAME"], [32, "id0"]], "n_classes (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.N_CLASSES"], [32, "id1"]], "n_classes_per_task (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.N_CLASSES_PER_TASK"], [32, "id2"]], "n_tasks (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.N_TASKS"], [32, "id3"]], "setting (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.SETTING"], [32, "id4"]], "size (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.SIZE"], [32, "id5"]], "args (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.args"]], "c_task (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.c_task"]], "datasets.utils.continual_dataset": [[32, "module-datasets.utils.continual_dataset"]], "get_backbone() (datasets.utils.continual_dataset.continualdataset static method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_backbone"]], "get_batch_size() (datasets.utils.continual_dataset.continualdataset static method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_batch_size"]], "get_data_loaders() (datasets.utils.continual_dataset.continualdataset method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_data_loaders"]], "get_denormalization_transform() (datasets.utils.continual_dataset.continualdataset static method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_denormalization_transform"]], "get_epochs() (datasets.utils.continual_dataset.continualdataset method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_epochs"]], "get_loss() (datasets.utils.continual_dataset.continualdataset static method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_loss"]], "get_minibatch_size() (datasets.utils.continual_dataset.continualdataset class method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_minibatch_size"]], "get_normalization_transform() (datasets.utils.continual_dataset.continualdataset static method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_normalization_transform"]], "get_offsets() (datasets.utils.continual_dataset.continualdataset method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_offsets"]], "get_scheduler() (datasets.utils.continual_dataset.continualdataset static method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_scheduler"]], "get_transform() (datasets.utils.continual_dataset.continualdataset static method)": [[32, "datasets.utils.continual_dataset.ContinualDataset.get_transform"]], "i (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.i"]], "setting (in module datasets.utils.continual_dataset)": [[32, "datasets.utils.continual_dataset.setting"]], "store_masked_loaders() (in module datasets.utils.continual_dataset)": [[32, "datasets.utils.continual_dataset.store_masked_loaders"]], "test_dataset (in module datasets.utils.continual_dataset)": [[32, "datasets.utils.continual_dataset.test_dataset"]], "test_loaders (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.test_loaders"]], "train_dataset (in module datasets.utils.continual_dataset)": [[32, "datasets.utils.continual_dataset.train_dataset"]], "train_loader (datasets.utils.continual_dataset.continualdataset attribute)": [[32, "datasets.utils.continual_dataset.ContinualDataset.train_loader"]], "gcldataset (class in datasets.utils.gcl_dataset)": [[33, "datasets.utils.gcl_dataset.GCLDataset"]], "name (datasets.utils.gcl_dataset.gcldataset attribute)": [[33, "datasets.utils.gcl_dataset.GCLDataset.NAME"]], "n_classes (datasets.utils.gcl_dataset.gcldataset attribute)": [[33, "datasets.utils.gcl_dataset.GCLDataset.N_CLASSES"]], "n_classes_per_task (datasets.utils.gcl_dataset.gcldataset attribute)": [[33, "datasets.utils.gcl_dataset.GCLDataset.N_CLASSES_PER_TASK"]], "n_tasks (datasets.utils.gcl_dataset.gcldataset attribute)": [[33, "datasets.utils.gcl_dataset.GCLDataset.N_TASKS"]], "setting (datasets.utils.gcl_dataset.gcldataset attribute)": [[33, "datasets.utils.gcl_dataset.GCLDataset.SETTING"]], "size (datasets.utils.gcl_dataset.gcldataset attribute)": [[33, "datasets.utils.gcl_dataset.GCLDataset.SIZE"]], "datasets.utils.gcl_dataset": [[33, "module-datasets.utils.gcl_dataset"]], "get_epochs() (datasets.utils.gcl_dataset.gcldataset static method)": [[33, "datasets.utils.gcl_dataset.GCLDataset.get_epochs"]], "validationdataset (class in datasets.utils.validation)": [[34, "datasets.utils.validation.ValidationDataset"]], "datasets.utils.validation": [[34, "module-datasets.utils.validation"]], "get_train_val() (in module datasets.utils.validation)": [[34, "datasets.utils.validation.get_train_val"]], "get_all_models() (in module models)": [[35, "models.get_all_models"]], "get_model() (in module models)": [[35, "models.get_model"]], "get_model_class() (in module models)": [[35, "models.get_model_class"]], "get_model_names() (in module models)": [[35, "models.get_model_names"]], "models": [[35, "module-0"]], "agem (class in models.agem)": [[36, "models.agem.AGem"]], "compatibility (models.agem.agem attribute)": [[36, "models.agem.AGem.COMPATIBILITY"]], "name (models.agem.agem attribute)": [[36, "models.agem.AGem.NAME"]], "end_task() (models.agem.agem method)": [[36, "models.agem.AGem.end_task"]], "get_parser() (models.agem.agem static method)": [[36, "models.agem.AGem.get_parser"]], "models.agem": [[36, "module-models.agem"]], "observe() (models.agem.agem method)": [[36, "models.agem.AGem.observe"]], "project() (in module models.agem)": [[36, "models.agem.project"]], "agemr (class in models.agem_r)": [[37, "models.agem_r.AGemr"]], "compatibility (models.agem_r.agemr attribute)": [[37, "models.agem_r.AGemr.COMPATIBILITY"]], "name (models.agem_r.agemr attribute)": [[37, "models.agem_r.AGemr.NAME"]], "get_parser() (models.agem_r.agemr static method)": [[37, "models.agem_r.AGemr.get_parser"]], "models.agem_r": [[37, "module-models.agem_r"]], "observe() (models.agem_r.agemr method)": [[37, "models.agem_r.AGemr.observe"]], "bic (class in models.bic)": [[38, "models.bic.BiC"]], "compatibility (models.bic.bic attribute)": [[38, "models.bic.BiC.COMPATIBILITY"]], "name (models.bic.bic attribute)": [[38, "models.bic.BiC.NAME"]], "begin_task() (models.bic.bic method)": [[38, "models.bic.BiC.begin_task"]], "build_buffer() (models.bic.bic method)": [[38, "models.bic.BiC.build_buffer"]], "end_task() (models.bic.bic method)": [[38, "models.bic.BiC.end_task"]], "evaluate_bias() (models.bic.bic method)": [[38, "models.bic.BiC.evaluate_bias"]], "forward() (models.bic.bic method)": [[38, "models.bic.BiC.forward"]], "get_parser() (models.bic.bic static method)": [[38, "models.bic.BiC.get_parser"]], "models.bic": [[38, "module-models.bic"]], "observe() (models.bic.bic method)": [[38, "models.bic.BiC.observe"]], "compatibility (models.ccic.ccic attribute)": [[39, "models.ccic.Ccic.COMPATIBILITY"]], "ccic (class in models.ccic)": [[39, "models.ccic.Ccic"]], "name (models.ccic.ccic attribute)": [[39, "models.ccic.Ccic.NAME"]], "compute_embeddings() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.compute_embeddings"]], "discard_supervised_labels() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.discard_supervised_labels"]], "discard_unsupervised_labels() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.discard_unsupervised_labels"]], "end_epoch() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.end_epoch"]], "end_task() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.end_task"]], "forward() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.forward"]], "get_debug_iters() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.get_debug_iters"]], "get_parser() (models.ccic.ccic static method)": [[39, "models.ccic.Ccic.get_parser"]], "models.ccic": [[39, "module-models.ccic"]], "observe() (models.ccic.ccic method)": [[39, "models.ccic.Ccic.observe"]], "compatibility (models.coda_prompt.codaprompt attribute)": [[40, "models.coda_prompt.CodaPrompt.COMPATIBILITY"]], "codaprompt (class in models.coda_prompt)": [[40, "models.coda_prompt.CodaPrompt"]], "name (models.coda_prompt.codaprompt attribute)": [[40, "models.coda_prompt.CodaPrompt.NAME"]], "begin_task() (models.coda_prompt.codaprompt method)": [[40, "models.coda_prompt.CodaPrompt.begin_task"]], "forward() (models.coda_prompt.codaprompt method)": [[40, "models.coda_prompt.CodaPrompt.forward"]], "get_optimizer() (models.coda_prompt.codaprompt method)": [[40, "models.coda_prompt.CodaPrompt.get_optimizer"]], "get_parser() (models.coda_prompt.codaprompt static method)": [[40, "models.coda_prompt.CodaPrompt.get_parser"]], "models.coda_prompt": [[40, "module-models.coda_prompt"]], "observe() (models.coda_prompt.codaprompt method)": [[40, "models.coda_prompt.CodaPrompt.observe"]], "models.coda_prompt_utils": [[41, "module-models.coda_prompt_utils"]], "codaprompt (class in models.coda_prompt_utils.model)": [[42, "models.coda_prompt_utils.model.CodaPrompt"]], "model (class in models.coda_prompt_utils.model)": [[42, "models.coda_prompt_utils.model.Model"]], "forward() (models.coda_prompt_utils.model.codaprompt method)": [[42, "models.coda_prompt_utils.model.CodaPrompt.forward"]], "forward() (models.coda_prompt_utils.model.model method)": [[42, "models.coda_prompt_utils.model.Model.forward"]], "gram_schmidt() (models.coda_prompt_utils.model.codaprompt method)": [[42, "models.coda_prompt_utils.model.CodaPrompt.gram_schmidt"]], "models.coda_prompt_utils.model": [[42, "module-models.coda_prompt_utils.model"]], "ortho_penalty() (in module models.coda_prompt_utils.model)": [[42, "models.coda_prompt_utils.model.ortho_penalty"]], "process_task_count() (models.coda_prompt_utils.model.codaprompt method)": [[42, "models.coda_prompt_utils.model.CodaPrompt.process_task_count"]], "tensor_prompt() (in module models.coda_prompt_utils.model)": [[42, "models.coda_prompt_utils.model.tensor_prompt"]], "attention (class in models.coda_prompt_utils.vit)": [[43, "models.coda_prompt_utils.vit.Attention"]], "block (class in models.coda_prompt_utils.vit)": [[43, "models.coda_prompt_utils.vit.Block"]], "mlp (class in models.coda_prompt_utils.vit)": [[43, "models.coda_prompt_utils.vit.Mlp"]], "visiontransformer (class in models.coda_prompt_utils.vit)": [[43, "models.coda_prompt_utils.vit.VisionTransformer"]], "forward() (models.coda_prompt_utils.vit.attention method)": [[43, "models.coda_prompt_utils.vit.Attention.forward"]], "forward() (models.coda_prompt_utils.vit.block method)": [[43, "models.coda_prompt_utils.vit.Block.forward"]], "forward() (models.coda_prompt_utils.vit.mlp method)": [[43, "models.coda_prompt_utils.vit.Mlp.forward"]], "forward() (models.coda_prompt_utils.vit.visiontransformer method)": [[43, "models.coda_prompt_utils.vit.VisionTransformer.forward"]], "get_attention_map() (models.coda_prompt_utils.vit.attention method)": [[43, "models.coda_prompt_utils.vit.Attention.get_attention_map"]], "get_attn_gradients() (models.coda_prompt_utils.vit.attention method)": [[43, "models.coda_prompt_utils.vit.Attention.get_attn_gradients"]], "models.coda_prompt_utils.vit": [[43, "module-models.coda_prompt_utils.vit"]], "no_weight_decay() (models.coda_prompt_utils.vit.visiontransformer method)": [[43, "models.coda_prompt_utils.vit.VisionTransformer.no_weight_decay"]], "save_attention_map() (models.coda_prompt_utils.vit.attention method)": [[43, "models.coda_prompt_utils.vit.Attention.save_attention_map"]], "save_attn_gradients() (models.coda_prompt_utils.vit.attention method)": [[43, "models.coda_prompt_utils.vit.Attention.save_attn_gradients"]], "models.deprecated": [[44, "module-models.deprecated"]], "compatibility (models.deprecated.joint.joint attribute)": [[45, "id0"], [45, "models.deprecated.joint.Joint.COMPATIBILITY"]], "joint (class in models.deprecated.joint)": [[45, "models.deprecated.joint.Joint"]], "name (models.deprecated.joint.joint attribute)": [[45, "id1"], [45, "models.deprecated.joint.Joint.NAME"]], "end_task() (models.deprecated.joint.joint method)": [[45, "models.deprecated.joint.Joint.end_task"]], "get_parser() (in module models.deprecated.joint)": [[45, "models.deprecated.joint.get_parser"]], "models.deprecated.joint": [[45, "module-models.deprecated.joint"]], "observe() (models.deprecated.joint.joint method)": [[45, "models.deprecated.joint.Joint.observe"]], "compatibility (models.der.der attribute)": [[46, "models.der.Der.COMPATIBILITY"]], "der (class in models.der)": [[46, "models.der.Der"]], "name (models.der.der attribute)": [[46, "models.der.Der.NAME"]], "get_parser() (models.der.der static method)": [[46, "models.der.Der.get_parser"]], "models.der": [[46, "module-models.der"]], "observe() (models.der.der method)": [[46, "models.der.Der.observe"]], "compatibility (models.derpp.derpp attribute)": [[47, "models.derpp.Derpp.COMPATIBILITY"]], "derpp (class in models.derpp)": [[47, "models.derpp.Derpp"]], "name (models.derpp.derpp attribute)": [[47, "models.derpp.Derpp.NAME"]], "get_parser() (models.derpp.derpp static method)": [[47, "models.derpp.Derpp.get_parser"]], "models.derpp": [[47, "module-models.derpp"]], "observe() (models.derpp.derpp method)": [[47, "models.derpp.Derpp.observe"]], "compatibility (models.derpp_lider.derpplider attribute)": [[48, "models.derpp_lider.DerppLider.COMPATIBILITY"]], "derpplider (class in models.derpp_lider)": [[48, "models.derpp_lider.DerppLider"]], "name (models.derpp_lider.derpplider attribute)": [[48, "models.derpp_lider.DerppLider.NAME"]], "begin_task() (models.derpp_lider.derpplider method)": [[48, "models.derpp_lider.DerppLider.begin_task"]], "get_parser() (models.derpp_lider.derpplider static method)": [[48, "models.derpp_lider.DerppLider.get_parser"]], "models.derpp_lider": [[48, "module-models.derpp_lider"]], "observe() (models.derpp_lider.derpplider method)": [[48, "models.derpp_lider.DerppLider.observe"]], "compatibility (models.dualprompt.dualprompt attribute)": [[49, "models.dualprompt.DualPrompt.COMPATIBILITY"]], "dualprompt (class in models.dualprompt)": [[49, "models.dualprompt.DualPrompt"]], "name (models.dualprompt.dualprompt attribute)": [[49, "models.dualprompt.DualPrompt.NAME"]], "begin_task() (models.dualprompt.dualprompt method)": [[49, "models.dualprompt.DualPrompt.begin_task"]], "forward() (models.dualprompt.dualprompt method)": [[49, "models.dualprompt.DualPrompt.forward"]], "get_parameters() (models.dualprompt.dualprompt method)": [[49, "models.dualprompt.DualPrompt.get_parameters"]], "get_parser() (models.dualprompt.dualprompt static method)": [[49, "models.dualprompt.DualPrompt.get_parser"]], "models.dualprompt": [[49, "module-models.dualprompt"]], "observe() (models.dualprompt.dualprompt method)": [[49, "models.dualprompt.DualPrompt.observe"]], "models.dualprompt_utils": [[50, "module-models.dualprompt_utils"]], "pret_attention (class in models.dualprompt_utils.attention)": [[51, "models.dualprompt_utils.attention.PreT_Attention"]], "forward() (models.dualprompt_utils.attention.pret_attention method)": [[51, "models.dualprompt_utils.attention.PreT_Attention.forward"]], "models.dualprompt_utils.attention": [[51, "module-models.dualprompt_utils.attention"]], "model (class in models.dualprompt_utils.model)": [[52, "models.dualprompt_utils.model.Model"]], "forward() (models.dualprompt_utils.model.model method)": [[52, "models.dualprompt_utils.model.Model.forward"]], "models.dualprompt_utils.model": [[52, "module-models.dualprompt_utils.model"]], "eprompt (class in models.dualprompt_utils.prompt)": [[53, "models.dualprompt_utils.prompt.EPrompt"]], "forward() (models.dualprompt_utils.prompt.eprompt method)": [[53, "models.dualprompt_utils.prompt.EPrompt.forward"]], "l2_normalize() (models.dualprompt_utils.prompt.eprompt method)": [[53, "models.dualprompt_utils.prompt.EPrompt.l2_normalize"]], "models.dualprompt_utils.prompt": [[53, "module-models.dualprompt_utils.prompt"]], "attention (class in models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.Attention"]], "block (class in models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.Block"]], "layerscale (class in models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.LayerScale"]], "parallelblock (class in models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.ParallelBlock"]], "respostblock (class in models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.ResPostBlock"]], "visiontransformer (class in models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer"]], "checkpoint_filter_fn() (in module models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.checkpoint_filter_fn"]], "forward() (models.dualprompt_utils.vision_transformer.attention method)": [[54, "models.dualprompt_utils.vision_transformer.Attention.forward"]], "forward() (models.dualprompt_utils.vision_transformer.block method)": [[54, "models.dualprompt_utils.vision_transformer.Block.forward"]], "forward() (models.dualprompt_utils.vision_transformer.layerscale method)": [[54, "models.dualprompt_utils.vision_transformer.LayerScale.forward"]], "forward() (models.dualprompt_utils.vision_transformer.parallelblock method)": [[54, "models.dualprompt_utils.vision_transformer.ParallelBlock.forward"]], "forward() (models.dualprompt_utils.vision_transformer.respostblock method)": [[54, "models.dualprompt_utils.vision_transformer.ResPostBlock.forward"]], "forward() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.forward"]], "forward_features() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.forward_features"]], "forward_head() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.forward_head"]], "get_classifier() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.get_classifier"]], "get_init_weights_vit() (in module models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.get_init_weights_vit"]], "group_matcher() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.group_matcher"]], "init_weights() (models.dualprompt_utils.vision_transformer.respostblock method)": [[54, "models.dualprompt_utils.vision_transformer.ResPostBlock.init_weights"]], "init_weights() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.init_weights"]], "init_weights_vit_jax() (in module models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.init_weights_vit_jax"]], "init_weights_vit_moco() (in module models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.init_weights_vit_moco"]], "init_weights_vit_timm() (in module models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.init_weights_vit_timm"]], "load_pretrained() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.load_pretrained"]], "models.dualprompt_utils.vision_transformer": [[54, "module-models.dualprompt_utils.vision_transformer"]], "no_weight_decay() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.no_weight_decay"]], "reset_classifier() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.reset_classifier"]], "resize_pos_embed() (in module models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.resize_pos_embed"]], "set_grad_checkpointing() (models.dualprompt_utils.vision_transformer.visiontransformer method)": [[54, "models.dualprompt_utils.vision_transformer.VisionTransformer.set_grad_checkpointing"]], "vit_base_patch16_224_dualprompt() (in module models.dualprompt_utils.vision_transformer)": [[54, "models.dualprompt_utils.vision_transformer.vit_base_patch16_224_dualprompt"]], "compatibility (models.er.er attribute)": [[55, "models.er.Er.COMPATIBILITY"]], "er (class in models.er)": [[55, "models.er.Er"]], "name (models.er.er attribute)": [[55, "models.er.Er.NAME"]], "get_parser() (models.er.er static method)": [[55, "models.er.Er.get_parser"]], "models.er": [[55, "module-models.er"]], "observe() (models.er.er method)": [[55, "models.er.Er.observe"]], "compatibility (models.er_ace.erace attribute)": [[56, "models.er_ace.ErACE.COMPATIBILITY"]], "erace (class in models.er_ace)": [[56, "models.er_ace.ErACE"]], "name (models.er_ace.erace attribute)": [[56, "models.er_ace.ErACE.NAME"]], "get_parser() (models.er_ace.erace static method)": [[56, "models.er_ace.ErACE.get_parser"]], "models.er_ace": [[56, "module-models.er_ace"]], "observe() (models.er_ace.erace method)": [[56, "models.er_ace.ErACE.observe"]], "compatibility (models.er_ace_lider.eracelider attribute)": [[57, "models.er_ace_lider.ErACELider.COMPATIBILITY"]], "eracelider (class in models.er_ace_lider)": [[57, "models.er_ace_lider.ErACELider"]], "name (models.er_ace_lider.eracelider attribute)": [[57, "models.er_ace_lider.ErACELider.NAME"]], "begin_task() (models.er_ace_lider.eracelider method)": [[57, "models.er_ace_lider.ErACELider.begin_task"]], "get_parser() (models.er_ace_lider.eracelider static method)": [[57, "models.er_ace_lider.ErACELider.get_parser"]], "models.er_ace_lider": [[57, "module-models.er_ace_lider"]], "observe() (models.er_ace_lider.eracelider method)": [[57, "models.er_ace_lider.ErACELider.observe"]], "to() (models.er_ace_lider.eracelider method)": [[57, "models.er_ace_lider.ErACELider.to"]], "compatibility (models.ewc_on.ewcon attribute)": [[58, "models.ewc_on.EwcOn.COMPATIBILITY"]], "ewcon (class in models.ewc_on)": [[58, "models.ewc_on.EwcOn"]], "name (models.ewc_on.ewcon attribute)": [[58, "models.ewc_on.EwcOn.NAME"]], "end_task() (models.ewc_on.ewcon method)": [[58, "models.ewc_on.EwcOn.end_task"]], "get_parser() (models.ewc_on.ewcon static method)": [[58, "models.ewc_on.EwcOn.get_parser"]], "models.ewc_on": [[58, "module-models.ewc_on"]], "observe() (models.ewc_on.ewcon method)": [[58, "models.ewc_on.EwcOn.observe"]], "penalty() (models.ewc_on.ewcon method)": [[58, "models.ewc_on.EwcOn.penalty"]], "compatibility (models.fdr.fdr attribute)": [[59, "models.fdr.Fdr.COMPATIBILITY"]], "fdr (class in models.fdr)": [[59, "models.fdr.Fdr"]], "name (models.fdr.fdr attribute)": [[59, "models.fdr.Fdr.NAME"]], "end_task() (models.fdr.fdr method)": [[59, "models.fdr.Fdr.end_task"]], "get_parser() (models.fdr.fdr static method)": [[59, "models.fdr.Fdr.get_parser"]], "models.fdr": [[59, "module-models.fdr"]], "observe() (models.fdr.fdr method)": [[59, "models.fdr.Fdr.observe"]], "compatibility (models.gdumb.gdumb attribute)": [[60, "models.gdumb.GDumb.COMPATIBILITY"]], "gdumb (class in models.gdumb)": [[60, "models.gdumb.GDumb"]], "name (models.gdumb.gdumb attribute)": [[60, "models.gdumb.GDumb.NAME"]], "end_task() (models.gdumb.gdumb method)": [[60, "models.gdumb.GDumb.end_task"]], "fit_buffer() (in module models.gdumb)": [[60, "models.gdumb.fit_buffer"]], "get_parser() (models.gdumb.gdumb static method)": [[60, "models.gdumb.GDumb.get_parser"]], "models.gdumb": [[60, "module-models.gdumb"]], "observe() (models.gdumb.gdumb method)": [[60, "models.gdumb.GDumb.observe"]], "compatibility (models.gdumb_lider.gdumblider attribute)": [[61, "models.gdumb_lider.GDumbLider.COMPATIBILITY"]], "gdumblider (class in models.gdumb_lider)": [[61, "models.gdumb_lider.GDumbLider"]], "name (models.gdumb_lider.gdumblider attribute)": [[61, "models.gdumb_lider.GDumbLider.NAME"]], "end_task() (models.gdumb_lider.gdumblider method)": [[61, "models.gdumb_lider.GDumbLider.end_task"]], "fit_buffer() (in module models.gdumb_lider)": [[61, "models.gdumb_lider.fit_buffer"]], "get_parser() (in module models.gdumb_lider)": [[61, "models.gdumb_lider.get_parser"]], "get_parser() (models.gdumb_lider.gdumblider static method)": [[61, "models.gdumb_lider.GDumbLider.get_parser"]], "models.gdumb_lider": [[61, "module-models.gdumb_lider"]], "observe() (models.gdumb_lider.gdumblider method)": [[61, "models.gdumb_lider.GDumbLider.observe"]], "compatibility (models.gem.gem attribute)": [[62, "models.gem.Gem.COMPATIBILITY"]], "gem (class in models.gem)": [[62, "models.gem.Gem"]], "name (models.gem.gem attribute)": [[62, "models.gem.Gem.NAME"]], "end_task() (models.gem.gem method)": [[62, "models.gem.Gem.end_task"]], "get_parser() (models.gem.gem static method)": [[62, "models.gem.Gem.get_parser"]], "models.gem": [[62, "module-models.gem"]], "observe() (models.gem.gem method)": [[62, "models.gem.Gem.observe"]], "overwrite_grad() (in module models.gem)": [[62, "models.gem.overwrite_grad"]], "project2cone2() (in module models.gem)": [[62, "models.gem.project2cone2"]], "store_grad() (in module models.gem)": [[62, "models.gem.store_grad"]], "compatibility (models.gss.gss attribute)": [[63, "models.gss.Gss.COMPATIBILITY"]], "gss (class in models.gss)": [[63, "models.gss.Gss"]], "name (models.gss.gss attribute)": [[63, "models.gss.Gss.NAME"]], "get_grads() (models.gss.gss method)": [[63, "models.gss.Gss.get_grads"]], "get_parser() (models.gss.gss static method)": [[63, "models.gss.Gss.get_parser"]], "models.gss": [[63, "module-models.gss"]], "observe() (models.gss.gss method)": [[63, "models.gss.Gss.observe"]], "compatibility (models.hal.hal attribute)": [[64, "models.hal.HAL.COMPATIBILITY"]], "hal (class in models.hal)": [[64, "models.hal.HAL"]], "name (models.hal.hal attribute)": [[64, "models.hal.HAL.NAME"]], "end_task() (models.hal.hal method)": [[64, "models.hal.HAL.end_task"]], "get_anchors() (models.hal.hal method)": [[64, "models.hal.HAL.get_anchors"]], "get_parser() (models.hal.hal static method)": [[64, "models.hal.HAL.get_parser"]], "models.hal": [[64, "module-models.hal"]], "observe() (models.hal.hal method)": [[64, "models.hal.HAL.observe"]], "compatibility (models.icarl.icarl attribute)": [[65, "models.icarl.ICarl.COMPATIBILITY"]], "icarl (class in models.icarl)": [[65, "models.icarl.ICarl"]], "name (models.icarl.icarl attribute)": [[65, "models.icarl.ICarl.NAME"]], "begin_task() (models.icarl.icarl method)": [[65, "models.icarl.ICarl.begin_task"]], "binary_cross_entropy() (models.icarl.icarl static method)": [[65, "models.icarl.ICarl.binary_cross_entropy"]], "compute_class_means() (models.icarl.icarl method)": [[65, "models.icarl.ICarl.compute_class_means"]], "end_task() (models.icarl.icarl method)": [[65, "models.icarl.ICarl.end_task"]], "forward() (models.icarl.icarl method)": [[65, "models.icarl.ICarl.forward"]], "get_loss() (models.icarl.icarl method)": [[65, "models.icarl.ICarl.get_loss"]], "get_parser() (models.icarl.icarl static method)": [[65, "models.icarl.ICarl.get_parser"]], "models.icarl": [[65, "module-models.icarl"]], "observe() (models.icarl.icarl method)": [[65, "models.icarl.ICarl.observe"]], "compatibility (models.icarl_lider.icarllider attribute)": [[66, "models.icarl_lider.ICarlLider.COMPATIBILITY"]], "icarllider (class in models.icarl_lider)": [[66, "models.icarl_lider.ICarlLider"]], "name (models.icarl_lider.icarllider attribute)": [[66, "models.icarl_lider.ICarlLider.NAME"]], "begin_task() (models.icarl_lider.icarllider method)": [[66, "models.icarl_lider.ICarlLider.begin_task"]], "binary_cross_entropy() (models.icarl_lider.icarllider static method)": [[66, "models.icarl_lider.ICarlLider.binary_cross_entropy"]], "compute_class_means() (models.icarl_lider.icarllider method)": [[66, "models.icarl_lider.ICarlLider.compute_class_means"]], "end_task() (models.icarl_lider.icarllider method)": [[66, "models.icarl_lider.ICarlLider.end_task"]], "forward() (models.icarl_lider.icarllider method)": [[66, "models.icarl_lider.ICarlLider.forward"]], "get_loss() (models.icarl_lider.icarllider method)": [[66, "models.icarl_lider.ICarlLider.get_loss"]], "get_parser() (models.icarl_lider.icarllider static method)": [[66, "models.icarl_lider.ICarlLider.get_parser"]], "models.icarl_lider": [[66, "module-models.icarl_lider"]], "observe() (models.icarl_lider.icarllider method)": [[66, "models.icarl_lider.ICarlLider.observe"]], "to() (models.icarl_lider.icarllider method)": [[66, "models.icarl_lider.ICarlLider.to"]], "compatibility (models.joint_gcl.jointgcl attribute)": [[67, "models.joint_gcl.JointGCL.COMPATIBILITY"]], "jointgcl (class in models.joint_gcl)": [[67, "models.joint_gcl.JointGCL"]], "name (models.joint_gcl.jointgcl attribute)": [[67, "models.joint_gcl.JointGCL.NAME"]], "end_task() (models.joint_gcl.jointgcl method)": [[67, "models.joint_gcl.JointGCL.end_task"]], "get_parser() (models.joint_gcl.jointgcl static method)": [[67, "models.joint_gcl.JointGCL.get_parser"]], "models.joint_gcl": [[67, "module-models.joint_gcl"]], "observe() (models.joint_gcl.jointgcl method)": [[67, "models.joint_gcl.JointGCL.observe"]], "compatibility (models.l2p.l2p attribute)": [[68, "models.l2p.L2P.COMPATIBILITY"]], "l2p (class in models.l2p)": [[68, "models.l2p.L2P"]], "name (models.l2p.l2p attribute)": [[68, "models.l2p.L2P.NAME"]], "begin_task() (models.l2p.l2p method)": [[68, "models.l2p.L2P.begin_task"]], "forward() (models.l2p.l2p method)": [[68, "models.l2p.L2P.forward"]], "get_parameters() (models.l2p.l2p method)": [[68, "models.l2p.L2P.get_parameters"]], "get_parser() (models.l2p.l2p static method)": [[68, "models.l2p.L2P.get_parser"]], "models.l2p": [[68, "module-models.l2p"]], "observe() (models.l2p.l2p method)": [[68, "models.l2p.L2P.observe"]], "models.l2p_utils": [[69, "module-models.l2p_utils"]], "l2pmodel (class in models.l2p_utils.l2p_model)": [[70, "models.l2p_utils.l2p_model.L2PModel"]], "forward() (models.l2p_utils.l2p_model.l2pmodel method)": [[70, "models.l2p_utils.l2p_model.L2PModel.forward"]], "models.l2p_utils.l2p_model": [[70, "module-models.l2p_utils.l2p_model"]], "prompt (class in models.l2p_utils.prompt)": [[71, "models.l2p_utils.prompt.Prompt"]], "forward() (models.l2p_utils.prompt.prompt method)": [[71, "models.l2p_utils.prompt.Prompt.forward"]], "l2_normalize() (models.l2p_utils.prompt.prompt method)": [[71, "models.l2p_utils.prompt.Prompt.l2_normalize"]], "models.l2p_utils.prompt": [[71, "module-models.l2p_utils.prompt"]], "attention (class in models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.Attention"]], "block (class in models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.Block"]], "layerscale (class in models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.LayerScale"]], "parallelblock (class in models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.ParallelBlock"]], "respostblock (class in models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.ResPostBlock"]], "visiontransformer (class in models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer"]], "checkpoint_filter_fn() (in module models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.checkpoint_filter_fn"]], "forward() (models.l2p_utils.vit_prompt.attention method)": [[72, "models.l2p_utils.vit_prompt.Attention.forward"]], "forward() (models.l2p_utils.vit_prompt.block method)": [[72, "models.l2p_utils.vit_prompt.Block.forward"]], "forward() (models.l2p_utils.vit_prompt.layerscale method)": [[72, "models.l2p_utils.vit_prompt.LayerScale.forward"]], "forward() (models.l2p_utils.vit_prompt.parallelblock method)": [[72, "models.l2p_utils.vit_prompt.ParallelBlock.forward"]], "forward() (models.l2p_utils.vit_prompt.respostblock method)": [[72, "models.l2p_utils.vit_prompt.ResPostBlock.forward"]], "forward() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.forward"]], "forward_features() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.forward_features"]], "forward_head() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.forward_head"]], "get_classifier() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.get_classifier"]], "get_init_weights_vit() (in module models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.get_init_weights_vit"]], "group_matcher() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.group_matcher"]], "init_weights() (models.l2p_utils.vit_prompt.respostblock method)": [[72, "models.l2p_utils.vit_prompt.ResPostBlock.init_weights"]], "init_weights() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.init_weights"]], "init_weights_vit_jax() (in module models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.init_weights_vit_jax"]], "init_weights_vit_moco() (in module models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.init_weights_vit_moco"]], "init_weights_vit_timm() (in module models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.init_weights_vit_timm"]], "load_pretrained() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.load_pretrained"]], "models.l2p_utils.vit_prompt": [[72, "module-models.l2p_utils.vit_prompt"]], "no_weight_decay() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.no_weight_decay"]], "reset_classifier() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.reset_classifier"]], "resize_pos_embed() (in module models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.resize_pos_embed"]], "set_grad_checkpointing() (models.l2p_utils.vit_prompt.visiontransformer method)": [[72, "models.l2p_utils.vit_prompt.VisionTransformer.set_grad_checkpointing"]], "vit_base_patch16_224_l2p() (in module models.l2p_utils.vit_prompt)": [[72, "models.l2p_utils.vit_prompt.vit_base_patch16_224_l2p"]], "compatibility (models.lucir.lucir attribute)": [[73, "models.lucir.Lucir.COMPATIBILITY"]], "customclassifier (class in models.lucir)": [[73, "models.lucir.CustomClassifier"]], "lucir (class in models.lucir)": [[73, "models.lucir.Lucir"]], "name (models.lucir.lucir attribute)": [[73, "models.lucir.Lucir.NAME"]], "begin_task() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.begin_task"]], "end_task() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.end_task"]], "fit_buffer() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.fit_buffer"]], "forward() (models.lucir.customclassifier method)": [[73, "models.lucir.CustomClassifier.forward"]], "forward() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.forward"]], "get_loss() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.get_loss"]], "get_parser() (models.lucir.lucir static method)": [[73, "models.lucir.Lucir.get_parser"]], "imprint_weights() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.imprint_weights"]], "lucir_batch_hard_triplet_loss() (in module models.lucir)": [[73, "models.lucir.lucir_batch_hard_triplet_loss"]], "models.lucir": [[73, "module-models.lucir"]], "noscale_forward() (models.lucir.customclassifier method)": [[73, "models.lucir.CustomClassifier.noscale_forward"]], "observe() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.observe"]], "reset_parameters() (models.lucir.customclassifier method)": [[73, "models.lucir.CustomClassifier.reset_parameters"]], "reset_weight() (models.lucir.customclassifier method)": [[73, "models.lucir.CustomClassifier.reset_weight"]], "update_classifier() (models.lucir.lucir method)": [[73, "models.lucir.Lucir.update_classifier"]], "compatibility (models.lwf.lwf attribute)": [[74, "models.lwf.Lwf.COMPATIBILITY"]], "lwf (class in models.lwf)": [[74, "models.lwf.Lwf"]], "name (models.lwf.lwf attribute)": [[74, "models.lwf.Lwf.NAME"]], "begin_task() (models.lwf.lwf method)": [[74, "models.lwf.Lwf.begin_task"]], "get_parser() (models.lwf.lwf static method)": [[74, "models.lwf.Lwf.get_parser"]], "models.lwf": [[74, "module-models.lwf"]], "modified_kl_div() (in module models.lwf)": [[74, "models.lwf.modified_kl_div"]], "observe() (models.lwf.lwf method)": [[74, "models.lwf.Lwf.observe"]], "smooth() (in module models.lwf)": [[74, "models.lwf.smooth"]], "compatibility (models.lwf_mc.lwfmc attribute)": [[75, "models.lwf_mc.LwFMC.COMPATIBILITY"]], "lwfmc (class in models.lwf_mc)": [[75, "models.lwf_mc.LwFMC"]], "name (models.lwf_mc.lwfmc attribute)": [[75, "models.lwf_mc.LwFMC.NAME"]], "end_task() (models.lwf_mc.lwfmc method)": [[75, "models.lwf_mc.LwFMC.end_task"]], "get_loss() (models.lwf_mc.lwfmc method)": [[75, "models.lwf_mc.LwFMC.get_loss"]], "get_parser() (in module models.lwf_mc)": [[75, "models.lwf_mc.get_parser"]], "get_parser() (models.lwf_mc.lwfmc static method)": [[75, "models.lwf_mc.LwFMC.get_parser"]], "models.lwf_mc": [[75, "module-models.lwf_mc"]], "observe() (models.lwf_mc.lwfmc method)": [[75, "models.lwf_mc.LwFMC.observe"]], "compatibility (models.mer.mer attribute)": [[76, "models.mer.Mer.COMPATIBILITY"]], "mer (class in models.mer)": [[76, "models.mer.Mer"]], "name (models.mer.mer attribute)": [[76, "models.mer.Mer.NAME"]], "draw_batches() (models.mer.mer method)": [[76, "models.mer.Mer.draw_batches"]], "get_parser() (models.mer.mer static method)": [[76, "models.mer.Mer.get_parser"]], "models.mer": [[76, "module-models.mer"]], "observe() (models.mer.mer method)": [[76, "models.mer.Mer.observe"]], "compatibility (models.pnn.pnn attribute)": [[77, "models.pnn.Pnn.COMPATIBILITY"]], "name (models.pnn.pnn attribute)": [[77, "models.pnn.Pnn.NAME"]], "pnn (class in models.pnn)": [[77, "models.pnn.Pnn"]], "end_task() (models.pnn.pnn method)": [[77, "models.pnn.Pnn.end_task"]], "forward() (models.pnn.pnn method)": [[77, "models.pnn.Pnn.forward"]], "get_backbone() (in module models.pnn)": [[77, "models.pnn.get_backbone"]], "get_parser() (models.pnn.pnn static method)": [[77, "models.pnn.Pnn.get_parser"]], "models.pnn": [[77, "module-models.pnn"]], "observe() (models.pnn.pnn method)": [[77, "models.pnn.Pnn.observe"]], "compatibility (models.rpc.rpc attribute)": [[78, "models.rpc.RPC.COMPATIBILITY"]], "name (models.rpc.rpc attribute)": [[78, "models.rpc.RPC.NAME"]], "rpc (class in models.rpc)": [[78, "models.rpc.RPC"]], "dsimplex() (in module models.rpc)": [[78, "models.rpc.dsimplex"]], "end_task() (models.rpc.rpc method)": [[78, "models.rpc.RPC.end_task"]], "forward() (models.rpc.rpc method)": [[78, "models.rpc.RPC.forward"]], "get_parser() (models.rpc.rpc static method)": [[78, "models.rpc.RPC.get_parser"]], "models.rpc": [[78, "module-models.rpc"]], "observe() (models.rpc.rpc method)": [[78, "models.rpc.RPC.observe"]], "compatibility (models.sgd.sgd attribute)": [[79, "models.sgd.Sgd.COMPATIBILITY"]], "name (models.sgd.sgd attribute)": [[79, "models.sgd.Sgd.NAME"]], "sgd (class in models.sgd)": [[79, "models.sgd.Sgd"]], "get_parser() (models.sgd.sgd static method)": [[79, "models.sgd.Sgd.get_parser"]], "models.sgd": [[79, "module-models.sgd"]], "observe() (models.sgd.sgd method)": [[79, "models.sgd.Sgd.observe"]], "compatibility (models.si.si attribute)": [[80, "models.si.SI.COMPATIBILITY"]], "name (models.si.si attribute)": [[80, "models.si.SI.NAME"]], "si (class in models.si)": [[80, "models.si.SI"]], "end_task() (models.si.si method)": [[80, "models.si.SI.end_task"]], "get_parser() (models.si.si static method)": [[80, "models.si.SI.get_parser"]], "models.si": [[80, "module-models.si"]], "observe() (models.si.si method)": [[80, "models.si.SI.observe"]], "penalty() (models.si.si method)": [[80, "models.si.SI.penalty"]], "models.slca_utils": [[81, "module-models.slca_utils"]], "models.slca_utils.convs": [[82, "module-models.slca_utils.convs"]], "cifarresnet (class in models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.CifarResNet"]], "downsamplea (class in models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleA"]], "downsampleb (class in models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleB"]], "downsamplec (class in models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleC"]], "downsampled (class in models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleD"]], "resnetbasicblock (class in models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.ResNetBasicblock"]], "expansion (models.slca_utils.convs.cifar_resnet.resnetbasicblock attribute)": [[83, "models.slca_utils.convs.cifar_resnet.ResNetBasicblock.expansion"]], "forward() (models.slca_utils.convs.cifar_resnet.cifarresnet method)": [[83, "models.slca_utils.convs.cifar_resnet.CifarResNet.forward"]], "forward() (models.slca_utils.convs.cifar_resnet.downsamplea method)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleA.forward"]], "forward() (models.slca_utils.convs.cifar_resnet.downsampleb method)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleB.forward"]], "forward() (models.slca_utils.convs.cifar_resnet.downsamplec method)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleC.forward"]], "forward() (models.slca_utils.convs.cifar_resnet.downsampled method)": [[83, "models.slca_utils.convs.cifar_resnet.DownsampleD.forward"]], "forward() (models.slca_utils.convs.cifar_resnet.resnetbasicblock method)": [[83, "models.slca_utils.convs.cifar_resnet.ResNetBasicblock.forward"]], "last_conv (models.slca_utils.convs.cifar_resnet.cifarresnet property)": [[83, "models.slca_utils.convs.cifar_resnet.CifarResNet.last_conv"]], "models.slca_utils.convs.cifar_resnet": [[83, "module-models.slca_utils.convs.cifar_resnet"]], "resnet110() (in module models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.resnet110"]], "resnet20() (in module models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.resnet20"]], "resnet20mnist() (in module models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.resnet20mnist"]], "resnet32() (in module models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.resnet32"]], "resnet32mnist() (in module models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.resnet32mnist"]], "resnet44() (in module models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.resnet44"]], "resnet56() (in module models.slca_utils.convs.cifar_resnet)": [[83, "models.slca_utils.convs.cifar_resnet.resnet56"]], "simplecontinuallinear (class in models.slca_utils.convs.linears)": [[84, "models.slca_utils.convs.linears.SimpleContinualLinear"]], "backup() (models.slca_utils.convs.linears.simplecontinuallinear method)": [[84, "models.slca_utils.convs.linears.SimpleContinualLinear.backup"]], "forward() (models.slca_utils.convs.linears.simplecontinuallinear method)": [[84, "models.slca_utils.convs.linears.SimpleContinualLinear.forward"]], "models.slca_utils.convs.linears": [[84, "module-models.slca_utils.convs.linears"]], "recall() (models.slca_utils.convs.linears.simplecontinuallinear method)": [[84, "models.slca_utils.convs.linears.SimpleContinualLinear.recall"]], "update() (models.slca_utils.convs.linears.simplecontinuallinear method)": [[84, "models.slca_utils.convs.linears.SimpleContinualLinear.update"]], "basicblock (class in models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.BasicBlock"]], "bottleneck (class in models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.Bottleneck"]], "resnet (class in models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.ResNet"]], "conv1x1() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.conv1x1"]], "conv3x3() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.conv3x3"]], "expansion (models.slca_utils.convs.resnet.basicblock attribute)": [[85, "models.slca_utils.convs.resnet.BasicBlock.expansion"]], "expansion (models.slca_utils.convs.resnet.bottleneck attribute)": [[85, "models.slca_utils.convs.resnet.Bottleneck.expansion"]], "forward() (models.slca_utils.convs.resnet.basicblock method)": [[85, "models.slca_utils.convs.resnet.BasicBlock.forward"]], "forward() (models.slca_utils.convs.resnet.bottleneck method)": [[85, "models.slca_utils.convs.resnet.Bottleneck.forward"]], "forward() (models.slca_utils.convs.resnet.resnet method)": [[85, "models.slca_utils.convs.resnet.ResNet.forward"]], "last_conv (models.slca_utils.convs.resnet.resnet property)": [[85, "models.slca_utils.convs.resnet.ResNet.last_conv"]], "models.slca_utils.convs.resnet": [[85, "module-models.slca_utils.convs.resnet"]], "resnet101() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.resnet101"]], "resnet152() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.resnet152"]], "resnet18() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.resnet18"]], "resnet34() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.resnet34"]], "resnet50() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.resnet50"]], "resnext101_32x8d() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.resnext101_32x8d"]], "resnext50_32x4d() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.resnext50_32x4d"]], "wide_resnet101_2() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.wide_resnet101_2"]], "wide_resnet50_2() (in module models.slca_utils.convs.resnet)": [[85, "models.slca_utils.convs.resnet.wide_resnet50_2"]], "attention (class in models.slca_utils.convs.vits)": [[86, "models.slca_utils.convs.vits.Attention"]], "block (class in models.slca_utils.convs.vits)": [[86, "models.slca_utils.convs.vits.Block"]], "visiontransformer (class in models.slca_utils.convs.vits)": [[86, "models.slca_utils.convs.vits.VisionTransformer"]], "checkpoint_filter_fn() (in module models.slca_utils.convs.vits)": [[86, "models.slca_utils.convs.vits.checkpoint_filter_fn"]], "forward() (models.slca_utils.convs.vits.attention method)": [[86, "models.slca_utils.convs.vits.Attention.forward"]], "forward() (models.slca_utils.convs.vits.block method)": [[86, "models.slca_utils.convs.vits.Block.forward"]], "forward() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.forward"]], "forward_features() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.forward_features"]], "get_adapter() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.get_adapter"]], "get_classifier() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.get_classifier"]], "init_weights() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.init_weights"]], "load_pretrained() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.load_pretrained"]], "models.slca_utils.convs.vits": [[86, "module-models.slca_utils.convs.vits"]], "no_weight_decay() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.no_weight_decay"]], "reset_classifier() (models.slca_utils.convs.vits.visiontransformer method)": [[86, "models.slca_utils.convs.vits.VisionTransformer.reset_classifier"]], "resize_pos_embed() (in module models.slca_utils.convs.vits)": [[86, "models.slca_utils.convs.vits.resize_pos_embed"]], "vit_base_patch16_224_in21k() (in module models.slca_utils.convs.vits)": [[86, "models.slca_utils.convs.vits.vit_base_patch16_224_in21k"]], "vit_base_patch16_224_mocov3() (in module models.slca_utils.convs.vits)": [[86, "models.slca_utils.convs.vits.vit_base_patch16_224_mocov3"]], "basenet (class in models.slca_utils.inc_net)": [[87, "models.slca_utils.inc_net.BaseNet"]], "finetuneincrementalnet (class in models.slca_utils.inc_net)": [[87, "models.slca_utils.inc_net.FinetuneIncrementalNet"]], "copy() (models.slca_utils.inc_net.basenet method)": [[87, "models.slca_utils.inc_net.BaseNet.copy"]], "extract_layerwise_vector() (models.slca_utils.inc_net.finetuneincrementalnet method)": [[87, "models.slca_utils.inc_net.FinetuneIncrementalNet.extract_layerwise_vector"]], "extract_vector() (models.slca_utils.inc_net.basenet method)": [[87, "models.slca_utils.inc_net.BaseNet.extract_vector"]], "feature_dim (models.slca_utils.inc_net.basenet property)": [[87, "models.slca_utils.inc_net.BaseNet.feature_dim"]], "forward() (models.slca_utils.inc_net.basenet method)": [[87, "models.slca_utils.inc_net.BaseNet.forward"]], "forward() (models.slca_utils.inc_net.finetuneincrementalnet method)": [[87, "models.slca_utils.inc_net.FinetuneIncrementalNet.forward"]], "freeze() (models.slca_utils.inc_net.basenet method)": [[87, "models.slca_utils.inc_net.BaseNet.freeze"]], "generate_fc() (models.slca_utils.inc_net.basenet method)": [[87, "models.slca_utils.inc_net.BaseNet.generate_fc"]], "generate_fc() (models.slca_utils.inc_net.finetuneincrementalnet method)": [[87, "models.slca_utils.inc_net.FinetuneIncrementalNet.generate_fc"]], "get_convnet() (in module models.slca_utils.inc_net)": [[87, "models.slca_utils.inc_net.get_convnet"]], "models.slca_utils.inc_net": [[87, "module-models.slca_utils.inc_net"]], "save_old_fc() (models.slca_utils.inc_net.finetuneincrementalnet method)": [[87, "models.slca_utils.inc_net.FinetuneIncrementalNet.save_old_fc"]], "update_fc() (models.slca_utils.inc_net.basenet method)": [[87, "models.slca_utils.inc_net.BaseNet.update_fc"]], "update_fc() (models.slca_utils.inc_net.finetuneincrementalnet method)": [[87, "models.slca_utils.inc_net.FinetuneIncrementalNet.update_fc"]], "accuracy() (in module models.slca_utils.toolkit)": [[88, "models.slca_utils.toolkit.accuracy"]], "count_parameters() (in module models.slca_utils.toolkit)": [[88, "models.slca_utils.toolkit.count_parameters"]], "makedirs() (in module models.slca_utils.toolkit)": [[88, "models.slca_utils.toolkit.makedirs"]], "models.slca_utils.toolkit": [[88, "module-models.slca_utils.toolkit"]], "split_images_labels() (in module models.slca_utils.toolkit)": [[88, "models.slca_utils.toolkit.split_images_labels"]], "target2onehot() (in module models.slca_utils.toolkit)": [[88, "models.slca_utils.toolkit.target2onehot"]], "tensor2numpy() (in module models.slca_utils.toolkit)": [[88, "models.slca_utils.toolkit.tensor2numpy"]], "compatibility (models.twf.twf attribute)": [[89, "models.twf.TwF.COMPATIBILITY"]], "name (models.twf.twf attribute)": [[89, "models.twf.TwF.NAME"]], "twf (class in models.twf)": [[89, "models.twf.TwF"]], "batch_iterate() (in module models.twf)": [[89, "models.twf.batch_iterate"]], "begin_task() (models.twf.twf method)": [[89, "models.twf.TwF.begin_task"]], "end_task() (models.twf.twf method)": [[89, "models.twf.TwF.end_task"]], "get_custom_double_transform() (models.twf.twf method)": [[89, "models.twf.TwF.get_custom_double_transform"]], "get_parser() (models.twf.twf static method)": [[89, "models.twf.TwF.get_parser"]], "models.twf": [[89, "module-models.twf"]], "observe() (models.twf.twf method)": [[89, "models.twf.TwF.observe"]], "partial_distill_loss() (models.twf.twf method)": [[89, "models.twf.TwF.partial_distill_loss"]], "models.twf_utils": [[90, "module-models.twf_utils"]], "binarygumbelsoftmax (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.BinaryGumbelSoftmax"]], "channelattn (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.ChannelAttn"]], "conditionallinear (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.ConditionalLinear"]], "diverseloss (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.DiverseLoss"]], "doubleattn (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.DoubleAttn"]], "hardattentionsoftmax (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.HardAttentionSoftmax"]], "multitaskafdalternative (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.MultiTaskAFDAlternative"]], "normalize (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.Normalize"]], "softattentionsoftmax (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.SoftAttentionSoftmax"]], "spatialattn (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.SpatialAttn"]], "studenttransform (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.StudentTransform"]], "teacherforcingloss (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.TeacherForcingLoss"]], "teachertransform (class in models.twf_utils.afd)": [[91, "models.twf_utils.afd.TeacherTransform"]], "compute_distance() (models.twf_utils.afd.channelattn method)": [[91, "models.twf_utils.afd.ChannelAttn.compute_distance"]], "compute_distance() (models.twf_utils.afd.doubleattn method)": [[91, "models.twf_utils.afd.DoubleAttn.compute_distance"]], "downsample() (models.twf_utils.afd.channelattn method)": [[91, "models.twf_utils.afd.ChannelAttn.downsample"]], "downsample() (models.twf_utils.afd.doubleattn method)": [[91, "models.twf_utils.afd.DoubleAttn.downsample"]], "extend_like() (models.twf_utils.afd.multitaskafdalternative method)": [[91, "models.twf_utils.afd.MultiTaskAFDAlternative.extend_like"]], "forward() (models.twf_utils.afd.binarygumbelsoftmax method)": [[91, "models.twf_utils.afd.BinaryGumbelSoftmax.forward"]], "forward() (models.twf_utils.afd.channelattn method)": [[91, "models.twf_utils.afd.ChannelAttn.forward"]], "forward() (models.twf_utils.afd.conditionallinear method)": [[91, "models.twf_utils.afd.ConditionalLinear.forward"]], "forward() (models.twf_utils.afd.diverseloss method)": [[91, "models.twf_utils.afd.DiverseLoss.forward"]], "forward() (models.twf_utils.afd.doubleattn method)": [[91, "models.twf_utils.afd.DoubleAttn.forward"]], "forward() (models.twf_utils.afd.hardattentionsoftmax method)": [[91, "models.twf_utils.afd.HardAttentionSoftmax.forward"]], "forward() (models.twf_utils.afd.multitaskafdalternative method)": [[91, "models.twf_utils.afd.MultiTaskAFDAlternative.forward"]], "forward() (models.twf_utils.afd.normalize method)": [[91, "models.twf_utils.afd.Normalize.forward"]], "forward() (models.twf_utils.afd.softattentionsoftmax method)": [[91, "models.twf_utils.afd.SoftAttentionSoftmax.forward"]], "forward() (models.twf_utils.afd.spatialattn method)": [[91, "models.twf_utils.afd.SpatialAttn.forward"]], "forward() (models.twf_utils.afd.studenttransform method)": [[91, "models.twf_utils.afd.StudentTransform.forward"]], "forward() (models.twf_utils.afd.teacherforcingloss method)": [[91, "models.twf_utils.afd.TeacherForcingLoss.forward"]], "forward() (models.twf_utils.afd.teachertransform method)": [[91, "models.twf_utils.afd.TeacherTransform.forward"]], "get_margin() (models.twf_utils.afd.teachertransform method)": [[91, "models.twf_utils.afd.TeacherTransform.get_margin"]], "get_rnd_weight() (in module models.twf_utils.afd)": [[91, "models.twf_utils.afd.get_rnd_weight"]], "get_tasks_id() (models.twf_utils.afd.multitaskafdalternative method)": [[91, "models.twf_utils.afd.MultiTaskAFDAlternative.get_tasks_id"]], "init_parameters() (models.twf_utils.afd.conditionallinear method)": [[91, "models.twf_utils.afd.ConditionalLinear.init_parameters"]], "init_parameters() (models.twf_utils.afd.doubleattn method)": [[91, "models.twf_utils.afd.DoubleAttn.init_parameters"]], "init_parameters() (models.twf_utils.afd.studenttransform method)": [[91, "models.twf_utils.afd.StudentTransform.init_parameters"]], "models.twf_utils.afd": [[91, "module-models.twf_utils.afd"]], "upsample() (models.twf_utils.afd.channelattn method)": [[91, "models.twf_utils.afd.ChannelAttn.upsample"]], "upsample() (models.twf_utils.afd.doubleattn method)": [[91, "models.twf_utils.afd.DoubleAttn.upsample"]], "init_twf() (in module models.twf_utils.utils)": [[92, "models.twf_utils.utils.init_twf"]], "models.twf_utils.utils": [[92, "module-models.twf_utils.utils"]], "models.utils": [[93, "module-models.utils"]], "avail_optims (models.utils.continual_model.continualmodel attribute)": [[94, "models.utils.continual_model.ContinualModel.AVAIL_OPTIMS"]], "compatibility (models.utils.continual_model.continualmodel attribute)": [[94, "models.utils.continual_model.ContinualModel.COMPATIBILITY"]], "continualmodel (class in models.utils.continual_model)": [[94, "models.utils.continual_model.ContinualModel"]], "name (models.utils.continual_model.continualmodel attribute)": [[94, "models.utils.continual_model.ContinualModel.NAME"]], "autolog_wandb() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.autolog_wandb"]], "begin_task() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.begin_task"]], "cpt (models.utils.continual_model.continualmodel property)": [[94, "models.utils.continual_model.ContinualModel.cpt"]], "current_task (models.utils.continual_model.continualmodel property)": [[94, "models.utils.continual_model.ContinualModel.current_task"]], "end_task() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.end_task"]], "forward() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.forward"]], "get_debug_iters() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.get_debug_iters"]], "get_optimizer() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.get_optimizer"]], "get_parameters() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.get_parameters"]], "get_parser() (models.utils.continual_model.continualmodel static method)": [[94, "models.utils.continual_model.ContinualModel.get_parser"]], "load_buffer() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.load_buffer"]], "meta_begin_task() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.meta_begin_task"]], "meta_end_task() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.meta_end_task"]], "meta_observe() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.meta_observe"]], "models.utils.continual_model": [[94, "module-models.utils.continual_model"]], "n_classes_current_task (models.utils.continual_model.continualmodel property)": [[94, "models.utils.continual_model.ContinualModel.n_classes_current_task"]], "n_past_classes (models.utils.continual_model.continualmodel property)": [[94, "models.utils.continual_model.ContinualModel.n_past_classes"]], "n_remaining_classes (models.utils.continual_model.continualmodel property)": [[94, "models.utils.continual_model.ContinualModel.n_remaining_classes"]], "n_seen_classes (models.utils.continual_model.continualmodel property)": [[94, "models.utils.continual_model.ContinualModel.n_seen_classes"]], "observe() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.observe"]], "to() (models.utils.continual_model.continualmodel method)": [[94, "models.utils.continual_model.ContinualModel.to"]], "lideroptimizer (class in models.utils.lider_model)": [[95, "models.utils.lider_model.LiderOptimizer"]], "add_lipschitz_args() (in module models.utils.lider_model)": [[95, "models.utils.lider_model.add_lipschitz_args"]], "compute_transition_matrix() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.compute_transition_matrix"]], "dynamic_budget_lip_loss() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.dynamic_budget_lip_loss"]], "get_feature_lip_coeffs() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.get_feature_lip_coeffs"]], "get_layer_lip_coeffs() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.get_layer_lip_coeffs"]], "get_norm() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.get_norm"]], "init_net() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.init_net"]], "minimization_lip_loss() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.minimization_lip_loss"]], "models.utils.lider_model": [[95, "module-models.utils.lider_model"]], "top_eigenvalue() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.top_eigenvalue"]], "transmitting_matrix() (models.utils.lider_model.lideroptimizer method)": [[95, "models.utils.lider_model.LiderOptimizer.transmitting_matrix"]], "compatibility (models.xder.xder attribute)": [[96, "models.xder.XDer.COMPATIBILITY"]], "name (models.xder.xder attribute)": [[96, "models.xder.XDer.NAME"]], "xder (class in models.xder)": [[96, "models.xder.XDer"]], "end_task() (models.xder.xder method)": [[96, "models.xder.XDer.end_task"]], "get_parser() (models.xder.xder static method)": [[96, "models.xder.XDer.get_parser"]], "models.xder": [[96, "module-models.xder"]], "observe() (models.xder.xder method)": [[96, "models.xder.XDer.observe"]], "update_logits() (models.xder.xder method)": [[96, "models.xder.XDer.update_logits"]], "compatibility (models.xder_ce.xderce attribute)": [[97, "models.xder_ce.XDerCE.COMPATIBILITY"]], "name (models.xder_ce.xderce attribute)": [[97, "models.xder_ce.XDerCE.NAME"]], "xderce (class in models.xder_ce)": [[97, "models.xder_ce.XDerCE"]], "end_task() (models.xder_ce.xderce method)": [[97, "models.xder_ce.XDerCE.end_task"]], "get_parser() (models.xder_ce.xderce static method)": [[97, "models.xder_ce.XDerCE.get_parser"]], "models.xder_ce": [[97, "module-models.xder_ce"]], "observe() (models.xder_ce.xderce method)": [[97, "models.xder_ce.XDerCE.observe"]], "update_logits() (models.xder_ce.xderce method)": [[97, "models.xder_ce.XDerCE.update_logits"]], "compatibility (models.xder_rpc.xderrpc attribute)": [[98, "models.xder_rpc.XDerRPC.COMPATIBILITY"]], "name (models.xder_rpc.xderrpc attribute)": [[98, "models.xder_rpc.XDerRPC.NAME"]], "xderrpc (class in models.xder_rpc)": [[98, "models.xder_rpc.XDerRPC"]], "dsimplex() (in module models.xder_rpc)": [[98, "models.xder_rpc.dsimplex"]], "end_task() (models.xder_rpc.xderrpc method)": [[98, "models.xder_rpc.XDerRPC.end_task"]], "forward() (models.xder_rpc.xderrpc method)": [[98, "models.xder_rpc.XDerRPC.forward"]], "get_parser() (models.xder_rpc.xderrpc static method)": [[98, "models.xder_rpc.XDerRPC.get_parser"]], "models.xder_rpc": [[98, "module-models.xder_rpc"]], "observe() (models.xder_rpc.xderrpc method)": [[98, "models.xder_rpc.XDerRPC.observe"]], "update_logits() (models.xder_rpc.xderrpc method)": [[98, "models.xder_rpc.XDerRPC.update_logits"]], "create_if_not_exists() (in module utils)": [[99, "utils.create_if_not_exists"]], "custom_str_underscore() (in module utils)": [[99, "utils.custom_str_underscore"]], "none_or_float() (in module utils)": [[99, "utils.none_or_float"]], "random_id() (in module utils)": [[99, "utils.random_id"]], "smart_joint() (in module utils)": [[99, "utils.smart_joint"]], "utils": [[99, "module-0"]], "add_experiment_args() (in module utils.args)": [[100, "utils.args.add_experiment_args"]], "add_management_args() (in module utils.args)": [[100, "utils.args.add_management_args"]], "add_rehearsal_args() (in module utils.args)": [[100, "utils.args.add_rehearsal_args"]], "utils.args": [[100, "module-utils.args"]], "customrandomcrop (class in utils.augmentations)": [[101, "utils.augmentations.CustomRandomCrop"]], "customrandomhorizontalflip (class in utils.augmentations)": [[101, "utils.augmentations.CustomRandomHorizontalFlip"]], "doublecompose (class in utils.augmentations)": [[101, "utils.augmentations.DoubleCompose"]], "doubletransform (class in utils.augmentations)": [[101, "utils.augmentations.DoubleTransform"]], "__call__() (utils.augmentations.doublecompose method)": [[101, "utils.augmentations.DoubleCompose.__call__"]], "__getitem__() (utils.augmentations.doublecompose method)": [[101, "utils.augmentations.DoubleCompose.__getitem__"]], "__iter__() (utils.augmentations.doublecompose method)": [[101, "utils.augmentations.DoubleCompose.__iter__"]], "__len__() (utils.augmentations.doublecompose method)": [[101, "utils.augmentations.DoubleCompose.__len__"]], "apply_transform() (in module utils.augmentations)": [[101, "utils.augmentations.apply_transform"]], "cutmix_data() (in module utils.augmentations)": [[101, "utils.augmentations.cutmix_data"]], "normalize() (in module utils.augmentations)": [[101, "utils.augmentations.normalize"]], "rand_bbox() (in module utils.augmentations)": [[101, "utils.augmentations.rand_bbox"]], "random_crop() (in module utils.augmentations)": [[101, "utils.augmentations.random_crop"]], "random_flip() (in module utils.augmentations)": [[101, "utils.augmentations.random_flip"]], "random_grayscale() (in module utils.augmentations)": [[101, "utils.augmentations.random_grayscale"]], "soft_aug (class in utils.augmentations)": [[101, "utils.augmentations.soft_aug"]], "strong_aug (class in utils.augmentations)": [[101, "utils.augmentations.strong_aug"]], "utils.augmentations": [[101, "module-utils.augmentations"]], "bn_track_stats (class in utils.batch_norm)": [[102, "utils.batch_norm.bn_track_stats"]], "utils.batch_norm": [[102, "module-utils.batch_norm"]], "utils.best_args": [[103, "module-utils.best_args"]], "buffer (class in utils.buffer)": [[104, "utils.buffer.Buffer"]], "add_data() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.add_data"]], "empty() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.empty"]], "fill_buffer() (in module utils.buffer)": [[104, "utils.buffer.fill_buffer"]], "get_all_data() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.get_all_data"]], "get_data() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.get_data"]], "get_data_by_index() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.get_data_by_index"]], "icarl_replay() (in module utils.buffer)": [[104, "utils.buffer.icarl_replay"]], "init_tensors() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.init_tensors"]], "is_empty() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.is_empty"]], "reservoir() (in module utils.buffer)": [[104, "utils.buffer.reservoir"]], "to() (utils.buffer.buffer method)": [[104, "utils.buffer.Buffer.to"]], "used_attributes (utils.buffer.buffer property)": [[104, "utils.buffer.Buffer.used_attributes"]], "utils.buffer": [[104, "module-utils.buffer"]], "mammoth_load_checkpoint() (in module utils.checkpoints)": [[105, "utils.checkpoints.mammoth_load_checkpoint"]], "utils.checkpoints": [[105, "module-utils.checkpoints"]], "conditionalbatchnorm1d (class in utils.conditional_bn)": [[106, "utils.conditional_bn.ConditionalBatchNorm1d"]], "conditionalbatchnorm2d (class in utils.conditional_bn)": [[106, "utils.conditional_bn.ConditionalBatchNorm2d"]], "selectcleargrad (class in utils.conditional_bn)": [[106, "utils.conditional_bn.SelectClearGrad"]], "backward() (utils.conditional_bn.selectcleargrad static method)": [[106, "utils.conditional_bn.SelectClearGrad.backward"]], "forward() (utils.conditional_bn.conditionalbatchnorm1d method)": [[106, "utils.conditional_bn.ConditionalBatchNorm1d.forward"]], "forward() (utils.conditional_bn.conditionalbatchnorm2d method)": [[106, "utils.conditional_bn.ConditionalBatchNorm2d.forward"]], "forward() (utils.conditional_bn.selectcleargrad static method)": [[106, "utils.conditional_bn.SelectClearGrad.forward"]], "utils.conditional_bn": [[106, "module-utils.conditional_bn"]], "base_path() (in module utils.conf)": [[107, "utils.conf.base_path"]], "create_seeded_dataloader() (in module utils.conf)": [[107, "utils.conf.create_seeded_dataloader"]], "get_device() (in module utils.conf)": [[107, "utils.conf.get_device"]], "set_random_seed() (in module utils.conf)": [[107, "utils.conf.set_random_seed"]], "set_random_seed_worker() (in module utils.conf)": [[107, "utils.conf.set_random_seed_worker"]], "utils.conf": [[107, "module-utils.conf"]], "warn_once() (in module utils.conf)": [[107, "utils.conf.warn_once"]], "customdp (class in utils.distributed)": [[108, "utils.distributed.CustomDP"]], "intercept_names (utils.distributed.customdp attribute)": [[108, "id0"], [108, "utils.distributed.CustomDP.intercept_names"]], "make_ddp() (in module utils.distributed)": [[108, "utils.distributed.make_ddp"]], "make_dp() (in module utils.distributed)": [[108, "utils.distributed.make_dp"]], "setup() (in module utils.distributed)": [[108, "utils.distributed.setup"]], "utils.distributed": [[108, "module-utils.distributed"]], "wait_for_master() (in module utils.distributed)": [[108, "utils.distributed.wait_for_master"]], "buffer (class in utils.gss_buffer)": [[109, "utils.gss_buffer.Buffer"]], "add_data() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.add_data"]], "drop_cache() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.drop_cache"]], "empty() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.empty"]], "functional_reservoir() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.functional_reservoir"]], "get_all_data() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.get_all_data"]], "get_data() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.get_data"]], "get_grad_score() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.get_grad_score"]], "init_tensors() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.init_tensors"]], "is_empty() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.is_empty"]], "reset_fathom() (utils.gss_buffer.buffer method)": [[109, "utils.gss_buffer.Buffer.reset_fathom"]], "utils.gss_buffer": [[109, "module-utils.gss_buffer"]], "customkorniarandaugment (class in utils.kornia_utils)": [[110, "utils.kornia_utils.CustomKorniaRandAugment"]], "korniaaugnograd (class in utils.kornia_utils)": [[110, "utils.kornia_utils.KorniaAugNoGrad"]], "_do_transform() (utils.kornia_utils.korniaaugnograd method)": [[110, "utils.kornia_utils.KorniaAugNoGrad._do_transform"]], "_getpolicy() (utils.kornia_utils.customkorniarandaugment method)": [[110, "utils.kornia_utils.CustomKorniaRandAugment._getpolicy"]], "compose_subpolicy_sequential() (utils.kornia_utils.customkorniarandaugment method)": [[110, "id0"], [110, "utils.kornia_utils.CustomKorniaRandAugment.compose_subpolicy_sequential"]], "forward() (utils.kornia_utils.korniaaugnograd method)": [[110, "id3"], [110, "utils.kornia_utils.KorniaAugNoGrad.forward"]], "forward_parameters() (utils.kornia_utils.customkorniarandaugment method)": [[110, "id1"], [110, "utils.kornia_utils.CustomKorniaRandAugment.forward_parameters"]], "get_forward_sequence() (utils.kornia_utils.customkorniarandaugment method)": [[110, "id2"], [110, "utils.kornia_utils.CustomKorniaRandAugment.get_forward_sequence"]], "n (utils.kornia_utils.customkorniarandaugment attribute)": [[110, "utils.kornia_utils.CustomKorniaRandAugment.n"]], "rand_selector (utils.kornia_utils.customkorniarandaugment attribute)": [[110, "utils.kornia_utils.CustomKorniaRandAugment.rand_selector"]], "to_kornia_transform() (in module utils.kornia_utils)": [[110, "utils.kornia_utils.to_kornia_transform"]], "utils.kornia_utils": [[110, "module-utils.kornia_utils"]], "logger (class in utils.loggers)": [[111, "utils.loggers.Logger"]], "add_bwt() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.add_bwt"]], "add_forgetting() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.add_forgetting"]], "add_fwt() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.add_fwt"]], "dump() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.dump"]], "load() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.load"]], "log() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.log"]], "log_accs() (in module utils.loggers)": [[111, "utils.loggers.log_accs"]], "log_fullacc() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.log_fullacc"]], "print_mean_accuracy() (in module utils.loggers)": [[111, "utils.loggers.print_mean_accuracy"]], "rewind() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.rewind"]], "utils.loggers": [[111, "module-utils.loggers"]], "write() (utils.loggers.logger method)": [[111, "utils.loggers.Logger.write"]], "clear_locals() (utils.magic.persistent_locals method)": [[112, "utils.magic.persistent_locals.clear_locals"]], "locals (utils.magic.persistent_locals property)": [[112, "utils.magic.persistent_locals.locals"]], "persistent_locals (class in utils.magic)": [[112, "utils.magic.persistent_locals"]], "utils.magic": [[112, "module-utils.magic"]], "lecun_fix() (in module utils.main)": [[113, "utils.main.lecun_fix"]], "main() (in module utils.main)": [[113, "utils.main.main"]], "parse_args() (in module utils.main)": [[113, "utils.main.parse_args"]], "utils.main": [[113, "module-utils.main"]], "backward_transfer() (in module utils.metrics)": [[114, "utils.metrics.backward_transfer"]], "forgetting() (in module utils.metrics)": [[114, "utils.metrics.forgetting"]], "forward_transfer() (in module utils.metrics)": [[114, "utils.metrics.forward_transfer"]], "utils.metrics": [[114, "module-utils.metrics"]], "mixup() (in module utils.mixup)": [[115, "utils.mixup.mixup"]], "utils.mixup": [[115, "module-utils.mixup"]], "utils.prompt_templates": [[116, "module-utils.prompt_templates"]], "ringbuffer (class in utils.ring_buffer)": [[117, "utils.ring_buffer.RingBuffer"]], "add_data() (utils.ring_buffer.ringbuffer method)": [[117, "utils.ring_buffer.RingBuffer.add_data"]], "empty() (utils.ring_buffer.ringbuffer method)": [[117, "utils.ring_buffer.RingBuffer.empty"]], "get_all_data() (utils.ring_buffer.ringbuffer method)": [[117, "utils.ring_buffer.RingBuffer.get_all_data"]], "get_data() (utils.ring_buffer.ringbuffer method)": [[117, "utils.ring_buffer.RingBuffer.get_data"]], "init_tensors() (utils.ring_buffer.ringbuffer method)": [[117, "utils.ring_buffer.RingBuffer.init_tensors"]], "is_empty() (utils.ring_buffer.ringbuffer method)": [[117, "utils.ring_buffer.RingBuffer.is_empty"]], "ring() (in module utils.ring_buffer)": [[117, "utils.ring_buffer.ring"]], "utils.ring_buffer": [[117, "module-utils.ring_buffer"]], "cosineschedule (class in utils.schedulers)": [[118, "utils.schedulers.CosineSchedule"]], "cosine() (utils.schedulers.cosineschedule method)": [[118, "utils.schedulers.CosineSchedule.cosine"]], "get_lr() (utils.schedulers.cosineschedule method)": [[118, "utils.schedulers.CosineSchedule.get_lr"]], "utils.schedulers": [[118, "module-utils.schedulers"]], "supconloss (class in utils.simclrloss)": [[119, "utils.simclrloss.SupConLoss"]], "forward() (utils.simclrloss.supconloss method)": [[119, "utils.simclrloss.SupConLoss.forward"]], "utils.simclrloss": [[119, "module-utils.simclrloss"]], "progressbar (class in utils.status)": [[120, "utils.status.ProgressBar"]], "prog() (utils.status.progressbar method)": [[120, "utils.status.ProgressBar.prog"]], "progress_bar() (in module utils.status)": [[120, "utils.status.progress_bar"]], "utils.status": [[120, "module-utils.status"]], "evaluate() (in module utils.training)": [[121, "utils.training.evaluate"]], "initialize_wandb() (in module utils.training)": [[121, "utils.training.initialize_wandb"]], "mask_classes() (in module utils.training)": [[121, "utils.training.mask_classes"]], "train() (in module utils.training)": [[121, "utils.training.train"]], "utils.training": [[121, "module-utils.training"]], "batch_hard_triplet_loss() (in module utils.triplet)": [[122, "utils.triplet.batch_hard_triplet_loss"]], "negative_only_triplet_loss() (in module utils.triplet)": [[122, "utils.triplet.negative_only_triplet_loss"]], "utils.triplet": [[122, "module-utils.triplet"]]}})